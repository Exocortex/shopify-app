{"version":3,"file":"static/webpack/static/development/pages/index.js.4f04fea62c3636eca64b.hot-update.js","sources":["webpack:///./components/ThreekitForm.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  Form,\n  FormLayout,\n  Layout,\n  TextField,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button,\n  Toast,\n} from \"@shopify/polaris\";\nimport { LoadingText } from \"../components/Loading\";\nimport SnippetGen from \"../components/SnippetGen\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [tkMetaId, setTkMetaId] = useState();\n  const [isSaved, setIsSaved] = useState(false);\n\n  const [isPdp, setIsPdp] = useState({});\n  const [isChecked, setIsChecked] = useState(false);\n\n  const [isAr, setIsAr] = useState({});\n  const [arChecked, setArChecked] = useState(false);\n\n  const [modalActive, setModalActive] = useState(false);\n  const handleModalChange = useCallback(() => setModalActive(!modalActive), [\n    modalActive,\n  ]);\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_PLAYER_PDP = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"pdp\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_AR_ENABLED = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"ARen\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const UPDATE_TK_ATTR = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  const setCheck = (val) => setIsChecked(val);\n  const setArCheck = (val) => setArChecked(val);\n\n  const updateMeta = (data, bool, namespace, key, obj, action) => {\n    let productVariableInput;\n    if (!data.product.metafield) {\n      bool\n        ? (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"false\",\n                valueType: \"STRING\",\n              },\n            ],\n          })\n        : (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"true\",\n                valueType: \"STRING\",\n              },\n            ],\n          });\n    } else {\n      bool\n        ? (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"false\",\n                valueType: \"STRING\",\n                id: obj.product.metafield.id,\n              },\n            ],\n          })\n        : (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"true\",\n                valueType: \"STRING\",\n                id: obj.product.metafield.id,\n              },\n            ],\n          });\n    }\n\n    action({\n      variables: {\n        input: productVariableInput,\n      },\n    });\n  };\n  return (\n    <div>\n      <Stack distribution=\"fill\">\n        <Form>\n          <FormLayout>\n            <Query query={props.query} variables={props.id}>\n              {({ loading, error, data, refetch }) => {\n                if (loading) return <LoadingText />;\n                if (error) return `Error! ${error}`;\n\n                return (\n                  <div>\n                    <Query\n                      query={GET_META_ID}\n                      variables={props.id}\n                      onCompleted={(data) => setTkMetaId(data)}\n                    >\n                      {({ loading, error, data, refetch }) => {\n                        if (loading) return null;\n                        if (error) return `Error! ${error}`;\n                        \n                        return null;\n                      }}\n                    </Query>\n\n                    <Stack.Item>\n                      <h3>\n                        <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                      </h3>\n                    </Stack.Item>\n\n                    <Stack.Item>\n                      <Mutation\n                        mutation={UPDATE_TK_ID}\n                        onCompleted={() => setIsSaved(true)}\n                      >\n                        {(handleSubmit, { err, res }) => {\n                          const showError = err && (\n                            <Banner status=\"critical\">{err.message}</Banner>\n                          );\n\n                          return (\n                            <div>\n                              {!isSaved ? (\n                                <div></div>\n                              ) : (\n                                <Toast\n                                  content=\"Saved\"\n                                  onDismiss={() => setIsSaved(false)}\n                                ></Toast>\n                              )}\n\n                              <Layout.Section>{showError}</Layout.Section>\n\n                              <TextField\n                                value={value}\n                                onFocus={() =>\n                                  setValue(\n                                    !data.product.metafield\n                                      ? \"No Threekit ID\"\n                                      : data.product.metafield.value\n                                  )\n                                }\n                                onChange={handleChange}\n                                id={data.product.id}\n                                ariaControls={data.product.id}\n                                placeholder={\n                                  !data.product.metafield\n                                    ? \"No Threekit ID\"\n                                    : data.product.metafield.value\n                                }\n                                connectedRight={\n                                  <div>\n                                    <SnippetGen\n                                      handleChange={handleModalChange}\n                                      active={modalActive}\n                                      title={`${props.title}`}\n                                      assetid={\n                                        !data.product.metafield\n                                          ? \"No Threekit ID\"\n                                          : data.product.metafield.value\n                                      }\n                                      ar={\"true\"}\n                                      env={\"preview\"}\n                                    />\n                                    <Button\n                                      primary\n                                      onClick={() => {\n                                        let productVariableInput;\n                                        if (!data.product.metafield) {\n                                          productVariableInput = {\n                                            id: props.id.id,\n                                            metafields: [\n                                              {\n                                                namespace: \"threekit\",\n                                                key: \"assetid\",\n                                                value: value,\n                                                valueType: \"STRING\",\n                                              },\n                                            ],\n                                          };\n                                        } else {\n                                          productVariableInput = {\n                                            id: props.id.id,\n                                            metafields: [\n                                              {\n                                                namespace: \"threekit\",\n                                                key: \"assetid\",\n                                                value: value,\n                                                valueType: \"STRING\",\n                                                id:\n                                                  tkMetaId.product.metafield.id,\n                                              },\n                                            ],\n                                          };\n                                        }\n\n                                        handleSubmit({\n                                          variables: {\n                                            input: productVariableInput,\n                                          },\n                                        });\n                                      }}\n                                    >\n                                      Save\n                                    </Button>\n                                    <Button onClick={handleModalChange}>\n                                      Embed this product\n                                    </Button>\n                                  </div>\n                                }\n                              ></TextField>\n                            </div>\n                          );\n                        }}\n                      </Mutation>\n                    </Stack.Item>\n                  </div>\n                );\n              }}\n            </Query>\n\n            <Stack.Item>\n              <Query\n                query={IS_PLAYER_PDP}\n                variables={props.id}\n                onCompleted={(data) => setIsPdp(data)}\n              >\n                {({ loading, error, data, refetch }) => {\n                  if (loading) return <LoadingText />;\n                  if (error) return `Error! ${error}`;\n                  return (\n                    <Mutation\n                      mutation={UPDATE_TK_ATTR}\n                      onCompleted={() => setIsSaved(true)}\n                    >\n                      {(handleSubmit, { err, res }) => {\n                        const showError = err && (\n                          <Banner status=\"critical\">{err.message}</Banner>\n                        );\n                        if (\n                          !data.product.metafield ||\n                          data.product.metafield.value == \"false\"\n                        ) {\n                          useEffect(() => {\n                            setIsChecked(false);\n                          }, [setIsChecked]);\n                        } else {\n                          useEffect(() => {\n                            setIsChecked(true);\n                          }, [setIsChecked]);\n                        }\n\n                        return (\n                          <div>\n                            <p>\n                              PDP Controls\n                            </p>\n                            <Checkbox\n                              label=\"Display on PDP\"\n                              checked={isChecked}\n                              onChange={() =>\n                                updateMeta(\n                                  data,\n                                  isChecked,\n                                  \"threekit\",\n                                  \"pdp\",\n                                  isPdp,\n                                  handleSubmit\n                                )\n                              }\n                              onFocus={() =>\n                                isChecked ? setCheck(false) : setCheck(true)\n                              }\n                            />\n                          </div>\n                        );\n                      }}\n                    </Mutation>\n                  );\n                }}\n              </Query>\n            </Stack.Item>\n            <Stack.Item>\n              <Query\n                query={IS_AR_ENABLED}\n                variables={props.id}\n                onCompleted={(data) => setIsAr(data)}\n              >\n                {({ loading, error, data, refetch }) => {\n                  if (loading) return <LoadingText />;\n                  if (error) return `Error! ${error}`;\n                  return (\n                    <Mutation\n                      mutation={UPDATE_TK_ATTR}\n                      onCompleted={() => setIsSaved(true)}\n                    >\n                      {(handleArSubmit, { err, res }) => {\n                        const showError = err && (\n                          <Banner status=\"critical\">{err.message}</Banner>\n                        );\n                        if (\n                          !data.product.metafield ||\n                          data.product.metafield.value == \"false\"\n                        ) {\n                          useEffect(() => {\n                            setArChecked(false);\n                          }, [setArChecked]);\n                        } else {\n                          useEffect(() => {\n                            setArChecked(true);\n                          }, [setArChecked]);\n                        }\n\n                        return (\n                          <div>\n                            <Checkbox\n                              label=\"AR Enabled\"\n                              checked={arChecked}\n                              onChange={() =>\n                                updateMeta(\n                                  data,\n                                  arChecked,\n                                  \"threekit\",\n                                  \"ARen\",\n                                  isAr,\n                                  handleArSubmit\n                                )\n                              }\n                              onFocus={() =>\n                                arChecked ? setArCheck(false) : setArCheck(true)\n                              }\n                            />\n                          </div>\n                        );\n                      }}\n                    </Mutation>\n                  );\n                }}\n              </Query>\n            </Stack.Item>\n          </FormLayout>\n        </Form>\n      </Stack>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAYA;AAAA;AAAA;AAIA;AAmBA;AAWA;AAWA;AAWA;AAmBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AAYA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AAWA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AAYA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAKA;AAAA;AAMA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAMA;AACA;AAAA;AAAA;AAFA;AASA;AACA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAVA;AAaA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AAaA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AArCA;AAyCA;AAAA;AAxEA;AAgFA;AAKA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAUA;AAAA;AAAA;AAbA;AAmBA;AAGA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAUA;AAAA;AAAA;AAbA;AAmBA;AAGA;AAQA;AACA;AACA;;;;A","sourceRoot":""}