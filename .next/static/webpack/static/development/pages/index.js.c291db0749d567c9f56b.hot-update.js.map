{"version":3,"file":"static/webpack/static/development/pages/index.js.c291db0749d567c9f56b.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import { Layout, Page, TextStyle, EmptyState, Button } from \"@shopify/polaris\";\r\nimport { ResourcePicker, TitleBar } from \"@shopify/app-bridge-react\";\r\nimport store from \"store-js\";\r\nimport ResourceListWithProducts from \"../components/ResourceList\";\r\nimport TokenForm from '../components/TokenForm';\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\n\r\n// Get the shop's threekit metafield\r\nconst GET_TK_METAFIELD = gql`\r\nquery {\r\n  shop{\r\n    metafield(namespace: \"threekit\", key: \"token\") {\r\n      id,\r\n      value\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nclass Index extends React.Component {\r\n  state = {\r\n    open: false,\r\n    hasSrc: false,\r\n    shop: \"\",\r\n    tkMetaId: {},\r\n    metaID: '',\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null){\r\n      return null;\r\n    } else {\r\n      this.setState({\r\n        tkMetaId: data,\r\n        metaID: data.shop.metafield.id.split('Metafield/')[1]\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n\r\n  _checkIfTK = () => {\r\n    if(this.state.tkMetaId.shop.metafield == null){\r\n      console.log('no TK id')\r\n    } else {\r\n      console.log(\"Yes this is TK\")\r\n    }\r\n  }\r\n\r\n  _formatProductID = arr => {\r\n    arr.map(x => x.split('Product/')[1]);\r\n  }\r\n\r\n  // For testing\r\n  getShopMetafield = () => {\r\n    var fetchUrl = \"/api/shopMeta\";\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        return json.data\r\n      });\r\n  };\r\n\r\n\r\n\r\n  updateShopMetafield = (id, val) => {\r\n    var fetchUrl = `/api/insertMeta/${id}/${val}`;\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        return json.data\r\n      });\r\n  };\r\n\r\n  makeScript = () => {\r\n    var fetchUrl = `/make/script_tags`;\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        return json.data\r\n      });\r\n  }\r\n\r\n  makeShopMetafield = (val) => {\r\n    var fetchUrl;\r\n    if (val == 'undefined'){\r\n      fetchUrl = \"/api/makeMeta/\";\r\n    } else{\r\n      fetchUrl = \"/api/makeMeta/\" + val;\r\n    }\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n\r\n      });\r\n  };\r\n  \r\n\r\n  componentDidMount() {\r\n    console.log(this.state)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    store.remove('ids')\r\n  }\r\n\r\n  render() {\r\n    // This retrieves any locally stored items\r\n    const emptyState = !store.get(\"ids\");\r\n\r\n    return (\r\n      <Page>\r\n        <TitleBar\r\n          primaryAction={{\r\n            content: \"Select products\",\r\n            onAction: () => this.setState({ open: true })\r\n          }}\r\n        />\r\n        <ResourcePicker\r\n          resourceType=\"Product\"\r\n          showVariants={false}\r\n          open={this.state.open}\r\n          onSelection={resources => this.handleSelection(resources)}\r\n          onCancel={() => this.setState({ open: false })}\r\n        />\r\n        <div >\r\n          \r\n          <TokenForm />\r\n\r\n  \r\n\r\n        </div>\r\n        {emptyState ? (\r\n          <Layout>\r\n            <EmptyState\r\n              heading=\"Associate a Shopify product with a Threekit item.\"\r\n              action={{\r\n                content: \"Select products\",\r\n                onAction: () => this.setState({ open: true })\r\n              }}\r\n              image={\r\n                \"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\r\n              }\r\n            >\r\n              <p>Select products to associate it with a Threekit item.</p>\r\n            </EmptyState>\r\n          </Layout>\r\n        ) : (\r\n          <div>\r\n            <Query query={GET_TK_METAFIELD} onCompleted={data => this._queryMe(data)}>\r\n              {() => {\r\n                return (\r\n                  <div>\r\n                    {\"\"}\r\n                  </div>\r\n                );\r\n              }}\r\n            </Query>\r\n          <ResourceListWithProducts />\r\n\r\n          </div>\r\n        )}\r\n      </Page>\r\n    );\r\n  }\r\n  handleSelection = resources => {\r\n    const idsFromResources = resources.selection.map(product => product.id);\r\n    this.setState({ open: false });\r\n    store.set(\"ids\", idsFromResources);\r\n  };\r\n}\r\nexport default Index;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AAqEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;;AAxEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AANA;AAeA;AAAA;AAAA;AAAA;AAAA;AAEA;AAKA;AAQA;;;;AArJA;AACA;AA2JA;;;;A","sourceRoot":""}