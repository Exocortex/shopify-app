{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Banner, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Card, Stack, TextStyle, Checkbox, Button } from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const {\n    0: value,\n    1: setValue\n  } = useState(\"\");\n  const {\n    0: showToast,\n    1: setToast\n  } = useState(false);\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n  return __jsx(\"div\", null, __jsx(Query, {\n    query: props.query,\n    variables: props.id // skip={!breed}\n\n  }, ({\n    loading,\n    error,\n    data,\n    refetch\n  }) => {\n    if (loading) return null;\n    if (error) return `Error! ${error}`;\n    return __jsx(\"div\", null, __jsx(Stack, null, __jsx(Stack.Item, {\n      fill: true\n    }, __jsx(\"h3\", null, __jsx(TextStyle, {\n      variation: \"strong\"\n    }, props.title))), __jsx(Stack.Item, null, __jsx(Mutation, {\n      mutation: UPDATE_TK_ID\n    }, (handleSubmit, {\n      error,\n      data\n    }) => {\n      const showError = error && __jsx(Banner, {\n        status: \"critical\"\n      }, error.message);\n\n      const showToast = data && data.productVariantUpdate && __jsx(Toast, {\n        content: \"Sucessfully updated\",\n        onDismiss: () => console.log(\"UPDATED\")\n      });\n\n      return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, showError), __jsx(Layout.Section, null, __jsx(DisplayText, {\n        size: \"large\"\n      }, name), __jsx(Form, null, __jsx(Card, {\n        sectioned: true\n      }, __jsx(\"p\", null, __jsx(\"b\", null, \"Current TK ID: \"), getMetaVal(this.state.variantId)), __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        prefix: \"Associated Product\",\n        value: tkid,\n        onChange: this.handleChange(\"tkid\"),\n        label: \"Enter your Threekit Asset ID\",\n        type: \"text\"\n      })))), __jsx(PageActions, {\n        primaryAction: [{\n          content: \"Save\",\n          onAction: () => {\n            let productVariableInput;\n\n            if (metaId == \"\") {\n              productVariableInput = {\n                id: this.state.variantId,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: this.state.tkid,\n                  valueType: \"STRING\"\n                }]\n              };\n            } else {\n              productVariableInput = {\n                id: this.state.variantId,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: this.state.tkid,\n                  valueType: \"STRING\",\n                  id: metaId\n                }]\n              };\n            }\n\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            });\n          }\n        }],\n        secondaryActions: [{\n          content: \"Remove discount\"\n        }]\n      }))))));\n    }))), __jsx(TextField, {\n      value: value,\n      onChange: handleChange // onFocus={getID(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value)}\n      ,\n      id: data.product.id,\n      ariaControls: data.product.id,\n      placeholder: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n      connectedRight: __jsx(Button, {\n        onClick: () => console.log(\"Saved\")\n      }, \"Save\")\n    }));\n  }));\n}\n\nexport default ThreekitForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ThreekitForm.js"],"names":["React","useState","useCallback","Query","Mutation","gql","Banner","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Card","Stack","TextStyle","Checkbox","Button","ThreekitForm","props","value","setValue","showToast","setToast","UPDATE_TK_ID","handleChange","newValue","query","id","loading","error","data","refetch","title","handleSubmit","showError","message","productVariantUpdate","console","log","name","getMetaVal","state","variantId","tkid","content","onAction","productVariableInput","metaId","metafields","namespace","key","valueType","variables","input","product","metafield"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  DisplayText,\n  Form,\n  FormLayout,\n  Frame,\n  Layout,\n  Page,\n  PageActions,\n  TextField,\n  Card,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button\n} from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [showToast, setToast] = useState(false)\n\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n  return (\n    <div>\n      <Query\n        query={props.query}\n        variables={props.id}\n        // skip={!breed}\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n\n          return (\n            <div>\n              {/* <Card title={props.title}> */}\n              {/* {console.log(data)} */}\n\n              <Stack>\n                <Stack.Item fill>\n                  <h3>\n                    <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                  </h3>\n                </Stack.Item>\n                <Stack.Item>\n                  <Mutation mutation={UPDATE_TK_ID}>\n                    {(handleSubmit, { error, data }) => {\n                      const showError = error && (\n                        <Banner status=\"critical\">{error.message}</Banner>\n                      );\n                      const showToast = data && data.productVariantUpdate && (\n                        <Toast\n                          content=\"Sucessfully updated\"\n                          onDismiss={() => console.log(\"UPDATED\")}\n                        />\n                      );\n\n                      return (\n                        <Frame>\n                          <Page>\n                            <Layout>\n                              {showToast}\n                              <Layout.Section>{showError}</Layout.Section>\n                              <Layout.Section>\n                                <DisplayText size=\"large\">{name}</DisplayText>\n                                <Form>\n                                  <Card sectioned>\n                                    <p>\n                                      <b>Current TK ID: </b>\n                                      {getMetaVal(this.state.variantId)}\n                                    </p>\n                                    <FormLayout>\n                                      <FormLayout.Group>\n                                        <TextField\n                                          prefix=\"Associated Product\"\n                                          value={tkid}\n                                          onChange={this.handleChange(\"tkid\")}\n                                          label=\"Enter your Threekit Asset ID\"\n                                          type=\"text\"\n                                        />\n                                      </FormLayout.Group>\n                                    </FormLayout>\n                                  </Card>\n                                  <PageActions\n                                    primaryAction={[\n                                      {\n                                        content: \"Save\",\n                                        onAction: () => {\n                                          let productVariableInput;\n                                          if (metaId == \"\") {\n                                            productVariableInput = {\n                                              id: this.state.variantId,\n                                              metafields: [\n                                                {\n                                                  namespace: \"threekit\",\n                                                  key: \"assetid\",\n                                                  value: this.state.tkid,\n                                                  valueType: \"STRING\"\n                                                }\n                                              ]\n                                            };\n                                          } else {\n                                            productVariableInput = {\n                                              id: this.state.variantId,\n                                              metafields: [\n                                                {\n                                                  namespace: \"threekit\",\n                                                  key: \"assetid\",\n                                                  value: this.state.tkid,\n                                                  valueType: \"STRING\",\n                                                  id: metaId\n                                                }\n                                              ]\n                                            };\n                                          }\n\n                                          handleSubmit({\n                                            variables: {\n                                              input: productVariableInput\n                                            }\n                                          });\n                                        }\n                                      }\n                                    ]}\n                                    secondaryActions={[\n                                      {\n                                        content: \"Remove discount\"\n                                      }\n                                    ]}\n                                  />\n                                </Form>\n                              </Layout.Section>\n                            </Layout>\n                          </Page>\n                        </Frame>\n                      );\n                    }}\n                  </Mutation>\n                </Stack.Item>\n              </Stack>\n              {/* Catch the error for no IDS */}\n\n              <TextField\n                value={value}\n                onChange={handleChange}\n                // onFocus={getID(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value)}\n                id={data.product.id}\n                ariaControls={data.product.id}\n                placeholder={\n                  !data.product.metafield\n                    ? \"No Threekit ID\"\n                    : data.product.metafield.value\n                }\n                connectedRight={\n                  <Button onClick={() => console.log(\"Saved\")}>Save</Button>\n                }\n              ></TextField>\n\n              {/* <button onClick={() => refetch()}>Refetch!</button> */}\n              {/* </Card> */}\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"]},"metadata":{},"sourceType":"module"}