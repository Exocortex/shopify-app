{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from \"graphql-tag\";\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport { Card, ResourceList, Stack, Thumbnail } from \"@shopify/polaris\";\nimport store from \"store-js\";\nimport ThreekitForm from \"./ThreekitForm\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport { Context } from \"@shopify/app-bridge-react\";\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GET_TK_PRODUCT_IDS = gql`\n  query {\n    shop {\n      metafield(namespace: \"threekit\", key: \"items\") {\n        id\n        value\n      }\n    }\n  }\n`;\nconst GET_TK_ASSET_ID = gql`\n  query($id: ID!) {\n    product(id: $id) {\n      metafield(namespace: \"threekit\", key: \"assetid\") {\n        value\n        id\n      }\n    }\n  }\n`;\nconst GET_META_ID = gql`\nquery($id: ID!) {\n  product(id: $id) {\n    metafield(namespace: \"threekit\", key: \"assetid\") {\n      value\n      id\n    }\n  }\n}\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      ids: [],\n      tkId: {},\n      field: \"\",\n      active: false,\n      checked: false,\n      tkMetaFieldId: ''\n    });\n\n    _defineProperty(this, \"_queryMe\", data => {\n      if (data.shop.metafield == null) {\n        return null;\n      } else {\n        const str = JSON.parse(data.shop.metafield.value);\n        let arr;\n        arr = str.ids.split(\",\");\n        this.setState({\n          ids: arr.map(id => \"gid://shopify/Product/\" + id)\n        });\n      }\n    });\n\n    _defineProperty(this, \"_setTkID\", data => {\n      this.setState({\n        tkId: JSON.stringify(data)\n      }); // console.log(data);\n    });\n\n    _defineProperty(this, \"_setTkMetafieldId\", data => {\n      this.setState({\n        tkMetaFieldId: data\n      });\n    });\n\n    _defineProperty(this, \"getTkAsset\", () => {\n      return __jsx(Query, {\n        query: GET_TK_ASSET_ID,\n        onCompleted: data => this._setTkID(data)\n      }, () => {\n        // console.log(\"set\");\n        // console.log(this.state);\n        return null;\n      });\n    });\n\n    _defineProperty(this, \"handleTKChange\", e => {\n      this.setState({\n        field: e\n      }); // console.log(this.state);\n      // console.log(e.target)\n    });\n\n    _defineProperty(this, \"handleCheck\", () => {\n      !this.state.checked ? this.setState({\n        checked: true\n      }) : this.setState({\n        checked: false\n      });\n    });\n\n    _defineProperty(this, \"handleToggle\", () => !this.state.active ? this.setState({\n      active: true\n    }) : this.setState({\n      active: false\n    }));\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\n    };\n\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_TK_PRODUCT_IDS,\n      onCompleted: data => this._queryMe(data)\n    }, () => {\n      return __jsx(\"div\", null, \"\");\n    }), \" \", __jsx(Query, {\n      query: GET_META_ID,\n      onCompleted: data => this._setTkMetafieldId(data)\n    }, () => {\n      return __jsx(\"div\", null, \"\");\n    }), \" \", __jsx(Query, {\n      query: GET_PRODUCTS_BY_ID,\n      variables: {\n        ids: store.get(\"ids\")\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n      if (error) return __jsx(\"div\", null, error.message); // console.log(data);\n\n      return __jsx(Card, null, __jsx(ResourceList, {\n        showHeader: true,\n        resourceName: {\n          singular: \"Product\",\n          plural: \"Products\"\n        },\n        items: data.nodes,\n        renderItem: item => {\n          const media = __jsx(Thumbnail, {\n            source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : \"\",\n            alt: item.images.edges[0] ? item.images.edges[0].node.altText : \"\"\n          });\n\n          const price = item.variants.edges[0].node.price;\n          return __jsx(ResourceList.Item, {\n            id: item.id,\n            media: media,\n            accessibilityLabel: `View details for ${item.title}` // onClick={this.handleToggle}\n\n          }, __jsx(Stack, null, __jsx(Stack.Item, {\n            fill: true\n          }, __jsx(ThreekitForm, {\n            query: GET_TK_ASSET_ID,\n            title: item.title,\n            id: {\n              id: item.id\n            },\n            field: this.state.field,\n            handleTKChange: this.handleTKChange,\n            handleCheckChange: this.handleCheck,\n            checked: this.state.checked,\n            tkMetafieldId: this.state.tkMetaFieldId\n          }))));\n        }\n      }));\n    }));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ResourceList.js"],"names":["gql","Query","ApolloConsumer","Card","ResourceList","Stack","Thumbnail","store","ThreekitForm","Redirect","Context","GET_PRODUCTS_BY_ID","GET_TK_PRODUCT_IDS","GET_TK_ASSET_ID","GET_META_ID","ResourceListWithProducts","React","Component","ids","tkId","field","active","checked","tkMetaFieldId","data","shop","metafield","str","JSON","parse","value","arr","split","setState","map","id","stringify","_setTkID","e","state","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","_queryMe","_setTkMetafieldId","get","loading","error","message","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","title","handleTKChange","handleCheck"],"mappings":"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","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { Query, ApolloConsumer } from \"react-apollo\";\r\nimport {\r\n  Card,\r\n  ResourceList,\r\n  Stack,\r\n  Thumbnail,\r\n} from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport ThreekitForm from \"./ThreekitForm\";\r\nimport { Redirect } from \"@shopify/app-bridge/actions\";\r\nimport { Context } from \"@shopify/app-bridge-react\";\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!) {\r\n    nodes(ids: $ids) {\r\n      ... on Product {\r\n        title\r\n        handle\r\n        descriptionHtml\r\n        id\r\n        images(first: 1) {\r\n          edges {\r\n            node {\r\n              originalSrc\r\n              altText\r\n            }\r\n          }\r\n        }\r\n        variants(first: 1) {\r\n          edges {\r\n            node {\r\n              price\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_PRODUCT_IDS = gql`\r\n  query {\r\n    shop {\r\n      metafield(namespace: \"threekit\", key: \"items\") {\r\n        id\r\n        value\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_ASSET_ID = gql`\r\n  query($id: ID!) {\r\n    product(id: $id) {\r\n      metafield(namespace: \"threekit\", key: \"assetid\") {\r\n        value\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_META_ID = gql`\r\nquery($id: ID!) {\r\n  product(id: $id) {\r\n    metafield(namespace: \"threekit\", key: \"assetid\") {\r\n      value\r\n      id\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nclass ResourceListWithProducts extends React.Component {\r\n  state = {\r\n    ids: [],\r\n    tkId: {},\r\n    field: \"\",\r\n    active: false,\r\n    checked: false,\r\n    tkMetaFieldId: ''\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null) {\r\n      return null;\r\n    } else {\r\n      const str = JSON.parse(data.shop.metafield.value);\r\n      let arr;\r\n      arr = str.ids.split(\",\");\r\n\r\n      this.setState({\r\n        ids: arr.map(id => \"gid://shopify/Product/\" + id)\r\n      });\r\n    }\r\n  };\r\n\r\n  _setTkID = data => {\r\n    this.setState({\r\n      tkId: JSON.stringify(data)\r\n    });\r\n    // console.log(data);\r\n  };\r\n\r\n  _setTkMetafieldId = data => {\r\n    this.setState({\r\n      tkMetaFieldId: data\r\n    });\r\n  };\r\n\r\n  getTkAsset = () => {\r\n    return (\r\n      <Query query={GET_TK_ASSET_ID} onCompleted={data => this._setTkID(data)}>\r\n        {() => {\r\n          // console.log(\"set\");\r\n          // console.log(this.state);\r\n          return null;\r\n        }}\r\n      </Query>\r\n    );\r\n  };\r\n\r\n  handleTKChange = e => {\r\n    this.setState({\r\n      field: e\r\n    });\r\n    // console.log(this.state);\r\n    // console.log(e.target)\r\n  };\r\n\r\n  handleCheck = () => {\r\n    !this.state.checked\r\n      ? this.setState({ checked: true })\r\n      : this.setState({ checked: false });\r\n  };\r\n\r\n  handleToggle = () =>\r\n    !this.state.active\r\n      ? this.setState({ active: true })\r\n      : this.setState({ active: false });\r\n\r\n  static contextType = Context;\r\n  render() {\r\n    const app = this.context;\r\n    const redirectToProduct = () => {\r\n      const redirect = Redirect.create(app);\r\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Query\r\n          query={GET_TK_PRODUCT_IDS}\r\n          onCompleted={data => this._queryMe(data)}\r\n        >\r\n          {() => {\r\n            return <div>{\"\"}</div>;\r\n          }}\r\n        </Query>{\" \"}\r\n        <Query\r\n          query={GET_META_ID}\r\n          onCompleted={data => this._setTkMetafieldId(data)}\r\n        >\r\n          {() => {\r\n            return <div>{\"\"}</div>;\r\n          }}\r\n        </Query>{\" \"}\r\n        {/* this.state.ids */}\r\n        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get(\"ids\") }}>\r\n          {({ data, loading, error }) => {\r\n            if (loading) return <div>Loading…</div>;\r\n            if (error) return <div>{error.message}</div>;\r\n            // console.log(data);\r\n            return (\r\n              <Card>\r\n                <ResourceList\r\n                  showHeader\r\n                  resourceName={{\r\n                    singular: \"Product\",\r\n                    plural: \"Products\"\r\n                  }}\r\n                  items={data.nodes}\r\n                  renderItem={item => {\r\n                    const media = (\r\n                      <Thumbnail\r\n                        source={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.originalSrc\r\n                            : \"\"\r\n                        }\r\n                        alt={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.altText\r\n                            : \"\"\r\n                        }\r\n                      />\r\n                    );\r\n                    const price = item.variants.edges[0].node.price;\r\n                    return (\r\n                      <ResourceList.Item\r\n                        id={item.id}\r\n                        media={media}\r\n                        accessibilityLabel={`View details for ${item.title}`}\r\n                        // onClick={this.handleToggle}\r\n                      >\r\n                        <Stack>\r\n                          {/* <Stack.Item fill>\r\n                            <h3>\r\n                              <TextStyle variation=\"strong\">\r\n                                {item.title}\r\n                              </TextStyle>\r\n                            </h3>\r\n                          </Stack.Item> */}\r\n                          {/* <Stack.Item>\r\n                            <Checkbox\r\n                              label=\"Basic checkbox\"\r\n                              checked={this.state.checked}\r\n                              id={item.id}\r\n                              onChange={()=>!this.state.checked ? this.setState({checked:true}) : this.setState({checked:false})}\r\n                            />\r\n                          </Stack.Item> */}\r\n                          <Stack.Item fill>\r\n                            <ThreekitForm\r\n                              query={GET_TK_ASSET_ID}\r\n                              title={item.title}\r\n                              id={{ id: item.id }}\r\n                              field={this.state.field}\r\n                              handleTKChange={this.handleTKChange}\r\n                              handleCheckChange={this.handleCheck}\r\n                              checked={this.state.checked}\r\n                              tkMetafieldId={this.state.tkMetaFieldId}\r\n                            />\r\n                          </Stack.Item>\r\n       \r\n                          {/* </Collapsible> */}\r\n                        </Stack>\r\n                      </ResourceList.Item>\r\n                    );\r\n                  }}\r\n                />\r\n              </Card>\r\n            );\r\n          }}\r\n        </Query>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceListWithProducts;\r\n"]},"metadata":{},"sourceType":"module"}