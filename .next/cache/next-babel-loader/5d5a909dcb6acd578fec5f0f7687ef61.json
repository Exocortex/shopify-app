{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  query($id: ID!) {\\n    product(id: $id) {\\n      metafield(namespace: \\\"threekit\\\", key: \\\"assetid\\\") {\\n        value\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    shop {\\n      metafield(namespace: \\\"threekit\\\", key: \\\"items\\\") {\\n        id\\n        value\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getProducts($ids: [ID!]!) {\\n    nodes(ids: $ids) {\\n      ... on Product {\\n        title\\n        handle\\n        descriptionHtml\\n        id\\n        images(first: 1) {\\n          edges {\\n            node {\\n              originalSrc\\n              altText\\n            }\\n          }\\n        }\\n        variants(first: 1) {\\n          edges {\\n            node {\\n              price\\n              id\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail, TextField, Button } from \"@shopify/polaris\";\nimport store from \"store-js\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport { Context } from \"@shopify/app-bridge-react\";\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());\nvar GET_TK_PRODUCT_IDS = gql(_templateObject2());\nvar GET_TK_ASSET_ID = gql(_templateObject3());\n\nvar ResourceListWithProducts = /*#__PURE__*/function (_React$Component) {\n  _inherits(ResourceListWithProducts, _React$Component);\n\n  function ResourceListWithProducts() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ResourceListWithProducts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResourceListWithProducts)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      ids: [],\n      tkId: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_queryMe\", function (data) {\n      if (data.shop.metafield == null) {\n        return null;\n      } else {\n        var str = JSON.parse(data.shop.metafield.value);\n        var arr;\n        arr = str.ids.split(\",\");\n\n        _this.setState({\n          ids: arr.map(function (id) {\n            return \"gid://shopify/Product/\" + id;\n          })\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setTkID\", function (data) {\n      _this.setState({\n        tkId: data\n      });\n\n      console.log(data);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getTkAsset\", function () {\n      return __jsx(Query, {\n        query: GET_TK_ASSET_ID,\n        onCompleted: function onCompleted(data) {\n          return _this._setTkID(data);\n        }\n      }, function () {\n        console.log(\"set\");\n        console.log(_this.state);\n        return null;\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ResourceListWithProducts, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var app = this.context;\n\n      var redirectToProduct = function redirectToProduct() {\n        var redirect = Redirect.create(app);\n        redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\n      };\n\n      var twoWeeksFromNow = new Date(_Date$now() + 12096e5).toDateString();\n\n      var TkEditForm = function TkEditForm(_ref) {\n        var id = _ref.id;\n        return __jsx(Query, {\n          query: GET_TK_ASSET_ID,\n          variables: {\n            id: id\n          } // skip={!breed}\n\n        }, function (_ref2) {\n          var loading = _ref2.loading,\n              error = _ref2.error,\n              data = _ref2.data,\n              refetch = _ref2.refetch;\n          if (loading) return null;\n          if (error) return \"Error! \".concat(error);\n          return __jsx(\"div\", null, console.log(data), __jsx(TextField, {\n            value: data.product.metafield.value ? data.product.metafield.value : null\n          }), __jsx(\"button\", {\n            onClick: function onClick() {\n              return refetch();\n            }\n          }, \"Refetch!\"));\n        });\n      };\n\n      return __jsx(\"div\", null, __jsx(Query, {\n        query: GET_TK_PRODUCT_IDS,\n        onCompleted: function onCompleted(data) {\n          return _this2._queryMe(data);\n        }\n      }, function () {\n        return __jsx(\"div\", null, \"\");\n      }), \" \", __jsx(Query, {\n        query: GET_PRODUCTS_BY_ID,\n        variables: {\n          ids: store.get(\"ids\")\n        }\n      }, function (_ref3) {\n        var data = _ref3.data,\n            loading = _ref3.loading,\n            error = _ref3.error;\n        if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n        if (error) return __jsx(\"div\", null, error.message);\n        console.log(data);\n        return __jsx(Card, null, __jsx(ResourceList, {\n          showHeader: true,\n          resourceName: {\n            singular: \"Product\",\n            plural: \"Products\"\n          },\n          items: data.nodes,\n          renderItem: function renderItem(item) {\n            var media = __jsx(Thumbnail, {\n              source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : \"\",\n              alt: item.images.edges[0] ? item.images.edges[0].node.altText : \"\"\n            });\n\n            var price = item.variants.edges[0].node.price;\n            return __jsx(ResourceList.Item, {\n              id: item.id,\n              media: media,\n              accessibilityLabel: \"View details for \".concat(item.title),\n              onClick: function onClick() {\n                console.log(item);\n              }\n            }, __jsx(Stack, null, __jsx(Stack.Item, {\n              fill: true\n            }, __jsx(\"h3\", null, __jsx(TextStyle, {\n              variation: \"strong\"\n            }, item.title))), __jsx(Stack.Item, null, __jsx(TkEditForm, {\n              id: item.id\n            })), __jsx(Stack.Item, null, __jsx(Button, null, \"Save\"))));\n          }\n        }));\n      }));\n    }\n  }]);\n\n  return ResourceListWithProducts;\n}(React.Component);\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ResourceList.js"],"names":["gql","Query","ApolloConsumer","Card","ResourceList","Stack","TextStyle","Thumbnail","TextField","Button","store","Redirect","Context","GET_PRODUCTS_BY_ID","GET_TK_PRODUCT_IDS","GET_TK_ASSET_ID","ResourceListWithProducts","ids","tkId","data","shop","metafield","str","JSON","parse","value","arr","split","setState","map","id","console","log","_setTkID","state","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","twoWeeksFromNow","Date","toDateString","TkEditForm","loading","error","refetch","product","_queryMe","get","message","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","title","React","Component"],"mappings":"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","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { Query, ApolloConsumer } from \"react-apollo\";\r\nimport {\r\n  Card,\r\n  ResourceList,\r\n  Stack,\r\n  TextStyle,\r\n  Thumbnail,\r\n  TextField,\r\n  Button\r\n} from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport { Redirect } from \"@shopify/app-bridge/actions\";\r\nimport { Context } from \"@shopify/app-bridge-react\";\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!) {\r\n    nodes(ids: $ids) {\r\n      ... on Product {\r\n        title\r\n        handle\r\n        descriptionHtml\r\n        id\r\n        images(first: 1) {\r\n          edges {\r\n            node {\r\n              originalSrc\r\n              altText\r\n            }\r\n          }\r\n        }\r\n        variants(first: 1) {\r\n          edges {\r\n            node {\r\n              price\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_PRODUCT_IDS = gql`\r\n  query {\r\n    shop {\r\n      metafield(namespace: \"threekit\", key: \"items\") {\r\n        id\r\n        value\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_ASSET_ID = gql`\r\n  query($id: ID!) {\r\n    product(id: $id) {\r\n      metafield(namespace: \"threekit\", key: \"assetid\") {\r\n        value\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass ResourceListWithProducts extends React.Component {\r\n  state = {\r\n    ids: [],\r\n    tkId: {}\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null) {\r\n      return null;\r\n    } else {\r\n      const str = JSON.parse(data.shop.metafield.value);\r\n      let arr;\r\n      arr = str.ids.split(\",\");\r\n\r\n      this.setState({\r\n        ids: arr.map(id => \"gid://shopify/Product/\" + id)\r\n      });\r\n    }\r\n  };\r\n\r\n  _setTkID = data => {\r\n    this.setState({\r\n      tkId: data\r\n    });\r\n    console.log(data);\r\n  };\r\n\r\n  getTkAsset = () => {\r\n    return (\r\n      <Query query={GET_TK_ASSET_ID} onCompleted={data => this._setTkID(data)}>\r\n        {() => {\r\n          console.log(\"set\");\r\n          console.log(this.state);\r\n          return null;\r\n        }}\r\n      </Query>\r\n    );\r\n  };\r\n\r\n  static contextType = Context;\r\n  render() {\r\n    const app = this.context;\r\n    const redirectToProduct = () => {\r\n      const redirect = Redirect.create(app);\r\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\r\n    };\r\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\r\n\r\n    const TkEditForm = ({ id }) => (\r\n      <Query\r\n        query={GET_TK_ASSET_ID}\r\n        variables={{ id }}\r\n        // skip={!breed}\r\n      >\r\n        {({ loading, error, data, refetch }) => {\r\n          if (loading) return null;\r\n          if (error) return `Error! ${error}`;\r\n\r\n          return (\r\n            <div>\r\n              {console.log(data)}\r\n            {/* Catch the error for no IDS */}\r\n            <TextField value={data.product.metafield.value ? data.product.metafield.value : null }></TextField> \r\n              <button onClick={() => refetch()}>Refetch!</button>\r\n            </div>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Query\r\n          query={GET_TK_PRODUCT_IDS}\r\n          onCompleted={data => this._queryMe(data)}\r\n        >\r\n          {() => {\r\n            return (\r\n              <div>\r\n                {\"\"}\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>{\" \"}\r\n        {/* this.state.ids */}\r\n        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get(\"ids\") }}>\r\n          {({ data, loading, error }) => {\r\n            if (loading) return <div>Loading…</div>;\r\n            if (error) return <div>{error.message}</div>;\r\n            console.log(data);\r\n            return (\r\n              <Card>\r\n                <ResourceList\r\n                  showHeader\r\n                  resourceName={{\r\n                    singular: \"Product\",\r\n                    plural: \"Products\"\r\n                  }}\r\n                  items={data.nodes}\r\n                  renderItem={item => {\r\n                    const media = (\r\n                      <Thumbnail\r\n                        source={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.originalSrc\r\n                            : \"\"\r\n                        }\r\n                        alt={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.altText\r\n                            : \"\"\r\n                        }\r\n                      />\r\n                    );\r\n                    const price = item.variants.edges[0].node.price;\r\n                    return (\r\n                      <ResourceList.Item\r\n                        id={item.id}\r\n                        media={media}\r\n                        accessibilityLabel={`View details for ${item.title}`}\r\n                        onClick={() => {\r\n                          console.log(item);\r\n                        }}\r\n                      >\r\n                        <Stack>\r\n                          <Stack.Item fill>\r\n                            <h3>\r\n                              <TextStyle variation=\"strong\">\r\n                                {item.title}\r\n                              </TextStyle>\r\n                            </h3>\r\n                          </Stack.Item>\r\n\r\n                          <Stack.Item>\r\n                            <TkEditForm id={item.id} />\r\n                          </Stack.Item>\r\n                          <Stack.Item>\r\n                            <Button>Save</Button>\r\n                          </Stack.Item>\r\n                        </Stack>\r\n                      </ResourceList.Item>\r\n                    );\r\n                  }}\r\n                />\r\n              </Card>\r\n            );\r\n          }}\r\n        </Query>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceListWithProducts;\r\n"]},"metadata":{},"sourceType":"module"}