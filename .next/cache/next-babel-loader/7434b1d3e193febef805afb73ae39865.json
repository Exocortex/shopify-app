{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      shop {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"token\\\") {\\n          id\\n          value\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($id: ID!) {\\n    product(id: $id) {\\n      metafield(namespace: \\\"threekit\\\", key: \\\"assetid\\\") {\\n        value\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from \"react\";\nimport { SkeletonPage, TextContainer, TextField, Button, Modal } from \"@shopify/polaris\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nfunction SnippetGen(props) {\n  var GET_META_ID = gql(_templateObject());\n  var GET_TK_TOKEN = gql(_templateObject2()); // `<div id=\"tkplayer-${newTitle}\" style=\"height: 500px; width: 500px;\">\n  // <script>\n  //         window.threekitPlayer({\n  //         authToken: \"${token}\",\n  //         el: document.getElementById(\"tkplayer-${newTitle}\"),\n  //         assetId: '${props.assetid}',\n  //         showConfigurator: false,\n  //         showAR: ${props.ar}\n  //       })\n  //       .then(async api => {\n  //          window.player = api;\n  //          window.configurator = await api.getConfigurator();\n  //   });\n  // </script>`\n\n  var createSnippet = function createSnippet(token) {\n    var newTitle = props.title.replace(/\\s/g, \"\");\n\n    __jsx(Query, {\n      query: GET_META_ID // variables={props.id}\n      ,\n      onCompleted: function onCompleted(data) {\n        return console.log(data);\n      }\n    }, function (_ref) {\n      var loading = _ref.loading,\n          error = _ref.error,\n          data = _ref.data,\n          refetch = _ref.refetch;\n      if (loading) return null;\n      if (error) return \"Error! \".concat(error);\n      return __jsx(\"p\", null, \"Done\");\n    });\n\n    var _useState = useState(\"\"),\n        value = _useState[0],\n        setValue = _useState[1]; // useEffect(() => {\n    //   setValue(createSnippet());\n    // }, [setValue]);\n\n\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_TK_TOKEN // variables={props.id}\n      ,\n      onCompleted: function onCompleted(data) {\n        return setValue(createSnippet(!data.shop.metafield ? \"no token\" : data.shop.metafield.value));\n      }\n    }, function (_ref2) {\n      var loading = _ref2.loading,\n          error = _ref2.error,\n          data = _ref2.data,\n          refetch = _ref2.refetch;\n      if (loading) return null;\n      if (error) return \"Error! \".concat(error);\n      return __jsx(Modal, {\n        open: props.active,\n        onClose: props.handleChange,\n        title: props.title,\n        primaryAction: {\n          content: \"Copy to clipboard\",\n          onAction: props.handleChange\n        }\n      }, __jsx(Modal.Section, null, __jsx(TextContainer, null, __jsx(\"p\", null, \"Copy and paste the HTML to embed a Threekit player with the selected product. Use it on blog posts, home pages, or anywhere HTML input is supported.\"))), __jsx(Modal.Section, null, __jsx(TextContainer, null, __jsx(TextField, {\n        multiline: true,\n        value: value\n      }))));\n    }));\n  };\n}\n\nexport default SnippetGen;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/SnippetGen.js"],"names":["React","useState","useEffect","SkeletonPage","TextContainer","TextField","Button","Modal","Query","Mutation","gql","SnippetGen","props","GET_META_ID","GET_TK_TOKEN","createSnippet","token","newTitle","title","replace","data","console","log","loading","error","refetch","value","setValue","shop","metafield","active","handleChange","content","onAction"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,KALF,QAMO,kBANP;AAOA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,cAAhC;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAMC,WAAW,GAAGH,GAAH,mBAAjB;AAUA,MAAMI,YAAY,GAAGJ,GAAH,oBAAlB,CAXyB,CAsBzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAASC,KAAT,EAAgB;AACpC,QAAIC,QAAQ,GAAGL,KAAK,CAACM,KAAN,CAAYC,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAf;;AACA,UAAC,KAAD;AACA,MAAA,KAAK,EAAEN,WADP,CAEA;AAFA;AAGA,MAAA,WAAW,EAAE,qBAACO,IAAD;AAAA,eAAUC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAV;AAAA;AAHb,OAKC,gBAAuC;AAAA,UAApCG,OAAoC,QAApCA,OAAoC;AAAA,UAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,UAApBJ,IAAoB,QAApBA,IAAoB;AAAA,UAAdK,OAAc,QAAdA,OAAc;AACtC,UAAIF,OAAJ,EAAa,OAAO,IAAP;AACb,UAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AAEX,aAAQ,wBAAR;AACD,KAVD;;AAFoC,oBAeZvB,QAAQ,CAAC,EAAD,CAfI;AAAA,QAe/ByB,KAf+B;AAAA,QAexBC,QAfwB,iBAiBtC;AACA;AACA;;;AAEA,WACE,mBACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEb,YADT,CAEE;AAFF;AAGE,MAAA,WAAW,EAAE,qBAAAM,IAAI;AAAA,eAAIO,QAAQ,CAC3BZ,aAAa,CACX,CAACK,IAAI,CAACQ,IAAL,CAAUC,SAAX,GAAuB,UAAvB,GAAoCT,IAAI,CAACQ,IAAL,CAAUC,SAAV,CAAoBH,KAD7C,CADc,CAAZ;AAAA;AAHnB,OASG,iBAAuC;AAAA,UAApCH,OAAoC,SAApCA,OAAoC;AAAA,UAA3BC,KAA2B,SAA3BA,KAA2B;AAAA,UAApBJ,IAAoB,SAApBA,IAAoB;AAAA,UAAdK,OAAc,SAAdA,OAAc;AACtC,UAAIF,OAAJ,EAAa,OAAO,IAAP;AACb,UAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AAEX,aACE,MAAC,KAAD;AACE,QAAA,IAAI,EAAEZ,KAAK,CAACkB,MADd;AAEE,QAAA,OAAO,EAAElB,KAAK,CAACmB,YAFjB;AAGE,QAAA,KAAK,EAAEnB,KAAK,CAACM,KAHf;AAIE,QAAA,aAAa,EAAE;AACbc,UAAAA,OAAO,EAAE,mBADI;AAEbC,UAAAA,QAAQ,EAAErB,KAAK,CAACmB;AAFH;AAJjB,SASE,MAAC,KAAD,CAAO,OAAP,QACE,MAAC,aAAD,QACE,wKADF,CADF,CATF,EAgBE,MAAC,KAAD,CAAO,OAAP,QACE,MAAC,aAAD,QACE,MAAC,SAAD;AAAW,QAAA,SAAS,MAApB;AAAqB,QAAA,KAAK,EAAEL;AAA5B,QADF,CADF,CAhBF,CADF;AAwBD,KArCH,CADF,CADF;AA2CD,GAhEC;AAiED;;AACD,eAAef,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  SkeletonPage,\n  TextContainer,\n  TextField,\n  Button,\n  Modal\n} from \"@shopify/polaris\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nfunction SnippetGen(props) {\n  const GET_META_ID = gql`\n  query($id: ID!) {\n    product(id: $id) {\n      metafield(namespace: \"threekit\", key: \"assetid\") {\n        value\n        id\n      }\n    }\n  }\n`;\n  const GET_TK_TOKEN = gql`\n    query {\n      shop {\n        metafield(namespace: \"threekit\", key: \"token\") {\n          id\n          value\n        }\n      }\n    }\n  `;\n\n  // `<div id=\"tkplayer-${newTitle}\" style=\"height: 500px; width: 500px;\">\n  // <script>\n  //         window.threekitPlayer({\n  //         authToken: \"${token}\",\n  //         el: document.getElementById(\"tkplayer-${newTitle}\"),\n  //         assetId: '${props.assetid}',\n  //         showConfigurator: false,\n  //         showAR: ${props.ar}\n  //       })\n  //       .then(async api => {\n  //          window.player = api;\n  //          window.configurator = await api.getConfigurator();\n  //   });\n  // </script>`\n  const createSnippet = function(token) {\n    let newTitle = props.title.replace(/\\s/g, \"\");\n    <Query\n    query={GET_META_ID}\n    // variables={props.id}\n    onCompleted={(data) => console.log(data)}\n  >\n    {({ loading, error, data, refetch }) => {\n      if (loading) return null;\n      if (error) return `Error! ${error}`;\n\n      return (<p>Done</p>);\n    }}\n  </Query>\n\n  const [value, setValue] = useState(\"\");\n\n  // useEffect(() => {\n  //   setValue(createSnippet());\n  // }, [setValue]);\n\n  return (\n    <div>\n      <Query\n        query={GET_TK_TOKEN}\n        // variables={props.id}\n        onCompleted={data => setValue(\n          createSnippet(\n            !data.shop.metafield ? \"no token\" : data.shop.metafield.value\n          )\n        )}\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n\n          return (\n            <Modal\n              open={props.active}\n              onClose={props.handleChange}\n              title={props.title}\n              primaryAction={{\n                content: \"Copy to clipboard\",\n                onAction: props.handleChange\n              }}\n            >\n              <Modal.Section>\n                <TextContainer>\n                  <p>\n                    Copy and paste the HTML to embed a Threekit player with the selected product. Use it on blog posts, home pages, or anywhere HTML input is supported. \n                  </p>\n                </TextContainer>\n              </Modal.Section>\n              <Modal.Section>\n                <TextContainer>\n                  <TextField multiline value={value} />\n                </TextContainer>\n              </Modal.Section>\n            </Modal>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n}\nexport default SnippetGen;\n"]},"metadata":{},"sourceType":"module"}