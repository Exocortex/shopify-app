{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation($input: ProductInput!) {\\n      productUpdate(input: $input) {\\n        product {\\n          metafields(first: 100) {\\n            edges {\\n              node {\\n                id\\n                namespace\\n                key\\n                value\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      shop {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"token\\\") {\\n          id\\n          value\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { TextField, Button } from \"@shopify/polaris\";\n\nfunction TokenForm(props) {\n  var _useState = useState(\"No Threekit ID\"),\n      tkToken = _useState[0],\n      setTkToken = _useState[1];\n\n  var _useState2 = useState(false),\n      isSaved = _useState2[0],\n      setIsSaved = _useState2[1];\n\n  var makeShopMetafield = function makeShopMetafield(val) {\n    var fetchUrl = \"/api/makeMeta/\" + val;\n    var method = \"GET\";\n    fetch(fetchUrl, {\n      method: method\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      setTkToken(json.data.metafield.value);\n      setIsSaved(true);\n      console.log(json);\n    });\n  };\n\n  var updateShopMetafield = function updateShopMetafield(id, val) {\n    var fetchUrl = \"/api/insertMeta/\".concat(id, \"/\").concat(val);\n    var method = \"GET\";\n    fetch(fetchUrl, {\n      method: method\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      setTkToken(json.data.metafield.value);\n      console.log(json);\n      setIsSaved(true);\n    });\n  };\n\n  var handleSubmit = function handleSubmit(data, id, val) {\n    !data ? makeShopMetafield(val) : updateShopMetafield(id, val);\n  };\n\n  var GET_TK_TOKEN = gql(_templateObject());\n  var UPDATE_TK_TOKEN = gql(_templateObject2());\n  var handleChange = useCallback(function (newValue) {\n    return setTkToken(newValue);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Query, {\n    query: GET_TK_TOKEN // variables={props.id}\n    ,\n    onCompleted: function onCompleted(data) {\n      return setTkToken(data);\n    }\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data,\n        refetch = _ref.refetch;\n    if (loading) return null;\n    if (error) return \"Error! \".concat(error);\n    console.log(\"data\");\n    console.log(data);\n    console.log(tkToken);\n    return __jsx(TextField, {\n      label: \"Threekit Token\",\n      value: tkToken,\n      onChange: handleChange,\n      onFocus: function onFocus() {\n        return setTkToken(!data.shop.metafield ? \"No Threekit Token\" : data.shop.metafield.value);\n      } // id={data.product.id}\n      // ariaControls={data.product.id}\n      ,\n      placeholder: !data.shop.metafield ? \"No Threekit Token\" : data.shop.metafield.value,\n      connectedRight: __jsx(\"div\", null, __jsx(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return !data.shop.metafield ? makeShopMetafield(tkToken) : updateShopMetafield(data.shop.metafield.id.split(\"Metafield/\")[1], tkToken);\n        }\n      }, \"Save\"))\n    });\n  }, !isSaved ? __jsx(\"div\", null) : __jsx(Toast, {\n    content: \"Saved\",\n    onDismiss: function onDismiss() {\n      return setIsSaved(false);\n    }\n  })));\n}\n\nexport default TokenForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/TokenForm.js"],"names":["React","useState","useCallback","useEffect","Query","Mutation","gql","TextField","Button","TokenForm","props","tkToken","setTkToken","isSaved","setIsSaved","makeShopMetafield","val","fetchUrl","method","fetch","then","response","json","data","metafield","value","console","log","updateShopMetafield","id","handleSubmit","GET_TK_TOKEN","UPDATE_TK_TOKEN","handleChange","newValue","loading","error","refetch","shop","split"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { TextField, Button } from \"@shopify/polaris\";\n\nfunction TokenForm(props) {\n  const [tkToken, setTkToken] = useState(\"No Threekit ID\");\n  const [isSaved, setIsSaved] = useState(false);\n\n\n  const makeShopMetafield = val => {\n    var fetchUrl = \"/api/makeMeta/\" + val;\n    var method = \"GET\";\n\n    fetch(fetchUrl, { method: method })\n      .then(response => response.json())\n      .then(json => {\n        setTkToken(json.data.metafield.value);\n        setIsSaved(true);\n        console.log(json);\n      });\n  };\n\n  const updateShopMetafield = (id, val) => {\n    var fetchUrl = `/api/insertMeta/${id}/${val}`;\n    var method = \"GET\";\n    fetch(fetchUrl, { method: method })\n      .then(response => response.json())\n      .then(json => {\n        setTkToken(json.data.metafield.value);\n        console.log(json);\n        setIsSaved(true);\n\n      });\n  };\n\n  const handleSubmit = (data, id, val) => {\n    !data ? makeShopMetafield(val) : updateShopMetafield(id, val);\n  };\n\n  const GET_TK_TOKEN = gql`\n    query {\n      shop {\n        metafield(namespace: \"threekit\", key: \"token\") {\n          id\n          value\n        }\n      }\n    }\n  `;\n\n  const UPDATE_TK_TOKEN = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setTkToken(newValue), []);\n  return (\n    <div>\n      <Query\n        query={GET_TK_TOKEN}\n        // variables={props.id}\n        onCompleted={data => setTkToken(data)}\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n          console.log(\"data\");\n          console.log(data);\n          console.log(tkToken);\n\n          return (\n            <TextField\n              label={\"Threekit Token\"}\n              value={tkToken}\n              onChange={handleChange}\n              onFocus={() =>\n                setTkToken(\n                  !data.shop.metafield\n                    ? \"No Threekit Token\"\n                    : data.shop.metafield.value\n                )\n              }\n              // id={data.product.id}\n              // ariaControls={data.product.id}\n              placeholder={\n                !data.shop.metafield\n                  ? \"No Threekit Token\"\n                  : data.shop.metafield.value\n              }\n              connectedRight={\n                <div>\n                  <Button\n                    primary\n                    onClick={() =>\n                      !data.shop.metafield\n                        ? makeShopMetafield(tkToken)\n                        : updateShopMetafield(\n                            data.shop.metafield.id.split(\"Metafield/\")[1],\n                            tkToken\n                          )\n                    }\n                  >\n                    Save\n                  </Button>\n                </div>\n              }\n            ></TextField>\n          );\n        }}\n        {!isSaved ? (\n          <div></div>\n        ) : (\n          <Toast content=\"Saved\" onDismiss={() => setIsSaved(false)}></Toast>\n        )}\n      </Query>\n    </div>\n  );\n}\n\nexport default TokenForm;\n"]},"metadata":{},"sourceType":"module"}