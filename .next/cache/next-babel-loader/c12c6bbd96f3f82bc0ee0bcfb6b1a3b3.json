{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Layout, Page, TextStyle, EmptyState, Button } from \"@shopify/polaris\";\nimport { ResourcePicker, TitleBar } from \"@shopify/app-bridge-react\";\nimport store from \"store-js\";\nimport ResourceListWithProducts from \"../components/ResourceList\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\n/*\r\n\r\nWhat needs to happen:\r\n  - Page Loads\r\n    - Check the Shop's Threekit Metafield\r\n    - If there are products with Threekit Asset IDs, list them\r\n    - If not, load the empty state\r\n    - When products are selected, their Shopify IDs get entered into the Shop's metafield\r\n  - From the main page, display TK ID & if AR is enabled\r\n*/\n// This will always get the Shop's Threekit Metafield\n// Get the shop's threekit metafield\n\nconst GET_TK_METAFIELD = gql`\nquery {\n  shop{\n    metafield(namespace: \"threekit\", key: \"items\") {\n      id,\n      value\n    }\n  }\n}\n`;\n\nclass Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      open: false,\n      hasSrc: false,\n      shop: \"\",\n      tkMetaId: {},\n      metaID: ''\n    });\n\n    _defineProperty(this, \"_queryMe\", data => {\n      if (data.shop.metafield == null) {\n        return null;\n      } else {\n        this.setState({\n          tkMetaId: data,\n          metaID: data.shop.metafield.id.split('Metafield/')[1]\n        });\n      }\n    });\n\n    _defineProperty(this, \"_checkIfTK\", () => {\n      if (this.state.tkMetaId.shop.metafield == null) {\n        console.log('no TK id');\n      } else {\n        console.log(\"Yes this is TK\");\n      }\n    });\n\n    _defineProperty(this, \"_formatProductID\", arr => {\n      arr.map(x => x.split('Product/')[1]);\n    });\n\n    _defineProperty(this, \"getShopMetafield\", () => {\n      var fetchUrl = \"/api/shopMeta\";\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(response => response.json()).then(json => {\n        // console.log(json.data.metafields)\n        // this.setState({tkMetaId: json.data})\n        return json.data;\n      });\n    });\n\n    _defineProperty(this, \"updateShopMetafield\", (id, val) => {\n      var fetchUrl = `/api/insertMeta/${id}/${val}`;\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(response => response.json()).then(json => {\n        console.log(\"UPDATED\");\n        console.log(json); // this.setState({tkMetaId: json.data})\n\n        return json.data;\n      });\n    });\n\n    _defineProperty(this, \"makeShopMetafield\", val => {\n      var fetchUrl;\n\n      if (val == 'undefined') {\n        fetchUrl = \"/api/makeMeta/\";\n      } else {\n        fetchUrl = \"/api/makeMeta/\" + val;\n      }\n\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(response => response.json()).then(json => {// console.log(json);\n        // console.log(json.data.metafields[\"threekitItems\"])\n      });\n    });\n\n    _defineProperty(this, \"handleSelection\", resources => {\n      const idsFromResources = resources.selection.map(product => product.id);\n      this.setState({\n        open: false\n      });\n      console.log(idsFromResources);\n      this.makeShopMetafield(_formatProductID(idsFromResources));\n      store.set(\"ids\", idsFromResources);\n    });\n  }\n\n  // End testing functions\n  componentDidMount() {\n    this.getShopMetafield();\n    console.log(this.state); // this.setState({tkMetaId: this.getShopMetafield()})\n\n    this.makeShopMetafield(['1234-345-646', '2234-4535-346', '3345-3457-5456']); // this.getScripts();\n    // this.initializeSrc();\n    // this.deleteSrc();\n  }\n\n  render() {\n    // This retrieves any locally stored items\n    const emptyState = !store.get(\"ids\");\n    return __jsx(Page, null, __jsx(TitleBar, {\n      primaryAction: {\n        content: \"Select products\",\n        onAction: () => this.setState({\n          open: true\n        })\n      }\n    }), __jsx(ResourcePicker, {\n      resourceType: \"Product\",\n      showVariants: false,\n      open: this.state.open,\n      onSelection: resources => this.handleSelection(resources),\n      onCancel: () => this.setState({\n        open: false\n      })\n    }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n      heading: \"Associate a Shopify product with a Threekit item.\",\n      action: {\n        content: \"Select products\",\n        onAction: () => this.setState({\n          open: true\n        })\n      },\n      image: \"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\n    }, __jsx(\"p\", null, \"Select products to associate it with a Threekit item.\"))) : __jsx(\"div\", null, __jsx(Query, {\n      query: GET_TK_METAFIELD,\n      onCompleted: data => this._queryMe(data)\n    }, () => {\n      return __jsx(\"div\", null, __jsx(\"p\", null, JSON.stringify(this.state)), __jsx(Button, {\n        onClick: () => console.log(\"Clicked\")\n      }, \"Button\"));\n    }), __jsx(ResourceListWithProducts, null)));\n  }\n\n}\n\nexport default Index;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/pages/index.js"],"names":["Layout","Page","TextStyle","EmptyState","Button","ResourcePicker","TitleBar","store","ResourceListWithProducts","gql","Query","GET_TK_METAFIELD","Index","React","Component","open","hasSrc","shop","tkMetaId","metaID","data","metafield","setState","id","split","state","console","log","arr","map","x","fetchUrl","method","fetch","then","response","json","val","resources","idsFromResources","selection","product","makeShopMetafield","_formatProductID","set","componentDidMount","getShopMetafield","render","emptyState","get","content","onAction","handleSelection","_queryMe","JSON","stringify"],"mappings":";;;;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,UAAlC,EAA8CC,MAA9C,QAA4D,kBAA5D;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,2BAAzC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AAEA;;;;;;;;;;AAUA;AAGA;;AACA,MAAMC,gBAAgB,GAAGF,GAAI;;;;;;;;;CAA7B;;AAaA,MAAMG,KAAN,SAAoBC,KAAK,CAACC,SAA1B,CAAoC;AAAA;AAAA;;AAAA,mCAC1B;AACNC,MAAAA,IAAI,EAAE,KADA;AAENC,MAAAA,MAAM,EAAE,KAFF;AAGNC,MAAAA,IAAI,EAAE,EAHA;AAINC,MAAAA,QAAQ,EAAE,EAJJ;AAKNC,MAAAA,MAAM,EAAE;AALF,KAD0B;;AAAA,sCASvBC,IAAI,IAAI;AACjB,UAAIA,IAAI,CAACH,IAAL,CAAUI,SAAV,IAAuB,IAA3B,EAAgC;AAC9B,eAAO,IAAP;AACD,OAFD,MAEO;AACL,aAAKC,QAAL,CAAc;AACZJ,UAAAA,QAAQ,EAAEE,IADE;AAEZD,UAAAA,MAAM,EAAEC,IAAI,CAACH,IAAL,CAAUI,SAAV,CAAoBE,EAApB,CAAuBC,KAAvB,CAA6B,YAA7B,EAA2C,CAA3C;AAFI,SAAd;AAID;AAEF,KAnBiC;;AAAA,wCAsBrB,MAAM;AACjB,UAAG,KAAKC,KAAL,CAAWP,QAAX,CAAoBD,IAApB,CAAyBI,SAAzB,IAAsC,IAAzC,EAA8C;AAC5CK,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;AACF,KA5BiC;;AAAA,8CA8BfC,GAAG,IAAI;AACxBA,MAAAA,GAAG,CAACC,GAAJ,CAAQC,CAAC,IAAIA,CAAC,CAACN,KAAF,CAAQ,UAAR,EAAoB,CAApB,CAAb;AACD,KAhCiC;;AAAA,8CAmCf,MAAM;AACvB,UAAIO,QAAQ,GAAG,eAAf;AACA,UAAIC,MAAM,GAAG,KAAb;AACAC,MAAAA,KAAK,CAACF,QAAD,EAAW;AAAEC,QAAAA,MAAM,EAAEA;AAAV,OAAX,CAAL,CACGE,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQE,IAAI,IAAI;AACZ;AACA;AACA,eAAOA,IAAI,CAAChB,IAAZ;AACD,OANH;AAOD,KA7CiC;;AAAA,iDA+CZ,CAACG,EAAD,EAAKc,GAAL,KAAa;AACjC,UAAIN,QAAQ,GAAI,mBAAkBR,EAAG,IAAGc,GAAI,EAA5C;AACA,UAAIL,MAAM,GAAG,KAAb;AACAC,MAAAA,KAAK,CAACF,QAAD,EAAW;AAAEC,QAAAA,MAAM,EAAEA;AAAV,OAAX,CAAL,CACGE,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQE,IAAI,IAAI;AACZV,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ,EAFY,CAGZ;;AACA,eAAOA,IAAI,CAAChB,IAAZ;AACD,OAPH;AAQD,KA1DiC;;AAAA,+CA4DbiB,GAAD,IAAS;AAC3B,UAAIN,QAAJ;;AACA,UAAIM,GAAG,IAAI,WAAX,EAAuB;AACrBN,QAAAA,QAAQ,GAAG,gBAAX;AACD,OAFD,MAEM;AACJA,QAAAA,QAAQ,GAAG,mBAAmBM,GAA9B;AACD;;AACD,UAAIL,MAAM,GAAG,KAAb;AACAC,MAAAA,KAAK,CAACF,QAAD,EAAW;AAAEC,QAAAA,MAAM,EAAEA;AAAV,OAAX,CAAL,CACGE,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQE,IAAI,IAAI,CACZ;AACA;AACD,OALH;AAMD,KA1EiC;;AAAA,6CA+IhBE,SAAS,IAAI;AAC7B,YAAMC,gBAAgB,GAAGD,SAAS,CAACE,SAAV,CAAoBX,GAApB,CAAwBY,OAAO,IAAIA,OAAO,CAAClB,EAA3C,CAAzB;AACA,WAAKD,QAAL,CAAc;AAAEP,QAAAA,IAAI,EAAE;AAAR,OAAd;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYY,gBAAZ;AACA,WAAKG,iBAAL,CAAuBC,gBAAgB,CAACJ,gBAAD,CAAvC;AACAhC,MAAAA,KAAK,CAACqC,GAAN,CAAU,KAAV,EAAiBL,gBAAjB;AACD,KArJiC;AAAA;;AA6ElC;AAEAM,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,gBAAL;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAjB,EAFkB,CAGlB;;AACA,SAAKiB,iBAAL,CAAuB,CAAC,cAAD,EAAiB,eAAjB,EAAkC,gBAAlC,CAAvB,EAJkB,CAKlB;AACA;AACA;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP;AACA,UAAMC,UAAU,GAAG,CAACzC,KAAK,CAAC0C,GAAN,CAAU,KAAV,CAApB;AAEA,WACE,MAAC,IAAD,QACE,MAAC,QAAD;AACE,MAAA,aAAa,EAAE;AACbC,QAAAA,OAAO,EAAE,iBADI;AAEbC,QAAAA,QAAQ,EAAE,MAAM,KAAK7B,QAAL,CAAc;AAAEP,UAAAA,IAAI,EAAE;AAAR,SAAd;AAFH;AADjB,MADF,EAOE,MAAC,cAAD;AACE,MAAA,YAAY,EAAC,SADf;AAEE,MAAA,YAAY,EAAE,KAFhB;AAGE,MAAA,IAAI,EAAE,KAAKU,KAAL,CAAWV,IAHnB;AAIE,MAAA,WAAW,EAAEuB,SAAS,IAAI,KAAKc,eAAL,CAAqBd,SAArB,CAJ5B;AAKE,MAAA,QAAQ,EAAE,MAAM,KAAKhB,QAAL,CAAc;AAAEP,QAAAA,IAAI,EAAE;AAAR,OAAd;AALlB,MAPF,EAcGiC,UAAU,GACT,MAAC,MAAD,QACE,MAAC,UAAD;AACE,MAAA,OAAO,EAAC,mDADV;AAEE,MAAA,MAAM,EAAE;AACNE,QAAAA,OAAO,EAAE,iBADH;AAENC,QAAAA,QAAQ,EAAE,MAAM,KAAK7B,QAAL,CAAc;AAAEP,UAAAA,IAAI,EAAE;AAAR,SAAd;AAFV,OAFV;AAME,MAAA,KAAK,EACH;AAPJ,OAUE,yEAVF,CADF,CADS,GAgBT,mBACE,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEJ,gBAAd;AAAgC,MAAA,WAAW,EAAES,IAAI,IAAI,KAAKiC,QAAL,CAAcjC,IAAd;AAArD,OACG,MAAM;AACL,aACE,mBACE,iBAAIkC,IAAI,CAACC,SAAL,CAAe,KAAK9B,KAApB,CAAJ,CADF,EAGE,MAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,SAAZ;AAAvB,kBAHF,CADF;AAOD,KATH,CADF,EAYA,MAAC,wBAAD,OAZA,CA9BJ,CADF;AAiDD;;AA9IiC;;AAuJpC,eAAef,KAAf","sourcesContent":["import { Layout, Page, TextStyle, EmptyState, Button } from \"@shopify/polaris\";\r\nimport { ResourcePicker, TitleBar } from \"@shopify/app-bridge-react\";\r\nimport store from \"store-js\";\r\nimport ResourceListWithProducts from \"../components/ResourceList\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\n\r\n/*\r\n\r\nWhat needs to happen:\r\n  - Page Loads\r\n    - Check the Shop's Threekit Metafield\r\n    - If there are products with Threekit Asset IDs, list them\r\n    - If not, load the empty state\r\n    - When products are selected, their Shopify IDs get entered into the Shop's metafield\r\n  - From the main page, display TK ID & if AR is enabled\r\n*/\r\n// This will always get the Shop's Threekit Metafield\r\n\r\n\r\n// Get the shop's threekit metafield\r\nconst GET_TK_METAFIELD = gql`\r\nquery {\r\n  shop{\r\n    metafield(namespace: \"threekit\", key: \"items\") {\r\n      id,\r\n      value\r\n    }\r\n  }\r\n}\r\n`\r\n\r\n\r\n\r\nclass Index extends React.Component {\r\n  state = {\r\n    open: false,\r\n    hasSrc: false,\r\n    shop: \"\",\r\n    tkMetaId: {},\r\n    metaID: ''\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null){\r\n      return null;\r\n    } else {\r\n      this.setState({\r\n        tkMetaId: data,\r\n        metaID: data.shop.metafield.id.split('Metafield/')[1]\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n\r\n  _checkIfTK = () => {\r\n    if(this.state.tkMetaId.shop.metafield == null){\r\n      console.log('no TK id')\r\n    } else {\r\n      console.log(\"Yes this is TK\")\r\n    }\r\n  }\r\n\r\n  _formatProductID = arr => {\r\n    arr.map(x => x.split('Product/')[1]);\r\n  }\r\n\r\n  // For testing\r\n  getShopMetafield = () => {\r\n    var fetchUrl = \"/api/shopMeta\";\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        // console.log(json.data.metafields)\r\n        // this.setState({tkMetaId: json.data})\r\n        return json.data\r\n      });\r\n  };\r\n\r\n  updateShopMetafield = (id, val) => {\r\n    var fetchUrl = `/api/insertMeta/${id}/${val}`;\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        console.log(\"UPDATED\")\r\n        console.log(json)\r\n        // this.setState({tkMetaId: json.data})\r\n        return json.data\r\n      });\r\n  };\r\n\r\n  makeShopMetafield = (val) => {\r\n    var fetchUrl;\r\n    if (val == 'undefined'){\r\n      fetchUrl = \"/api/makeMeta/\";\r\n    } else{\r\n      fetchUrl = \"/api/makeMeta/\" + val;\r\n    }\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        // console.log(json);\r\n        // console.log(json.data.metafields[\"threekitItems\"])\r\n      });\r\n  };\r\n  \r\n\r\n  // End testing functions\r\n\r\n  componentDidMount() {\r\n    this.getShopMetafield();\r\n    console.log(this.state)\r\n    // this.setState({tkMetaId: this.getShopMetafield()})\r\n    this.makeShopMetafield(['1234-345-646', '2234-4535-346', '3345-3457-5456']);\r\n    // this.getScripts();\r\n    // this.initializeSrc();\r\n    // this.deleteSrc();\r\n  }\r\n\r\n  render() {\r\n    // This retrieves any locally stored items\r\n    const emptyState = !store.get(\"ids\");\r\n\r\n    return (\r\n      <Page>\r\n        <TitleBar\r\n          primaryAction={{\r\n            content: \"Select products\",\r\n            onAction: () => this.setState({ open: true })\r\n          }}\r\n        />\r\n        <ResourcePicker\r\n          resourceType=\"Product\"\r\n          showVariants={false}\r\n          open={this.state.open}\r\n          onSelection={resources => this.handleSelection(resources)}\r\n          onCancel={() => this.setState({ open: false })}\r\n        />\r\n        {emptyState ? (\r\n          <Layout>\r\n            <EmptyState\r\n              heading=\"Associate a Shopify product with a Threekit item.\"\r\n              action={{\r\n                content: \"Select products\",\r\n                onAction: () => this.setState({ open: true })\r\n              }}\r\n              image={\r\n                \"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\r\n              }\r\n            >\r\n              <p>Select products to associate it with a Threekit item.</p>\r\n            </EmptyState>\r\n          </Layout>\r\n        ) : (\r\n          <div>\r\n            <Query query={GET_TK_METAFIELD} onCompleted={data => this._queryMe(data)}>\r\n              {() => {\r\n                return (\r\n                  <div>\r\n                    <p>{JSON.stringify(this.state)}</p>\r\n                    \r\n                    <Button onClick={() => console.log(\"Clicked\")}>Button</Button>\r\n                  </div>\r\n                );\r\n              }}\r\n            </Query>\r\n          <ResourceListWithProducts />\r\n\r\n          </div>\r\n        )}\r\n      </Page>\r\n    );\r\n  }\r\n  handleSelection = resources => {\r\n    const idsFromResources = resources.selection.map(product => product.id);\r\n    this.setState({ open: false });\r\n    console.log(idsFromResources)\r\n    this.makeShopMetafield(_formatProductID(idsFromResources))\r\n    store.set(\"ids\", idsFromResources);\r\n  };\r\n}\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}