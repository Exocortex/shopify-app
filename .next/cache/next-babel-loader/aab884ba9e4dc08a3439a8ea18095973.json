{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      shop {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"token\\\") {\\n          id\\n          value\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { TextField, Button } from \"@shopify/polaris\";\n\nfunction TokenForm(props) {\n  var _useState = useState(\"No Threekit ID\"),\n      tkToken = _useState[0],\n      setTkToken = _useState[1];\n\n  var GET_TK_TOKEN = gql(_templateObject());\n  var handleChange = useCallback(function (newValue) {\n    return setTkToken(newValue);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Query, {\n    query: GET_TK_TOKEN // variables={props.id}\n    ,\n    onCompleted: function onCompleted(data) {\n      return setTkToken(data);\n    }\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data,\n        refetch = _ref.refetch;\n    if (loading) return null;\n    if (error) return \"Error! \".concat(error);\n    console.log(\"data\");\n    console.log(data);\n    console.log(tkToken);\n    return __jsx(TextField, {\n      label: \"Threekit Token\" //   value={!data.shop.metafield ? tkToken : JSON.stringify(tkToken)}\n      ,\n      onChange: handleChange // id={data.product.id}\n      // ariaControls={data.product.id}\n      ,\n      placeholder: !data.shop.metafield ? \"No Threekit Token\" : data.shop.metafield.value,\n      connectedRight: __jsx(\"div\", null, __jsx(Button, {\n        primary: true,\n        onClick: function onClick() {\n          return console.log(\"Clicked\");\n        }\n      }, \"Save\"))\n    });\n  }));\n}\n\nexport default TokenForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/TokenForm.js"],"names":["React","useState","useCallback","useEffect","Query","Mutation","gql","TextField","Button","TokenForm","props","tkToken","setTkToken","GET_TK_TOKEN","handleChange","newValue","data","loading","error","refetch","console","log","shop","metafield","value"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,cAAhC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,kBAAlC;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,kBACMT,QAAQ,CAAC,gBAAD,CADd;AAAA,MACjBU,OADiB;AAAA,MACRC,UADQ;;AAGxB,MAAMC,YAAY,GAAGP,GAAH,mBAAlB;AAWA,MAAMQ,YAAY,GAAGZ,WAAW,CAAC,UAAAa,QAAQ;AAAA,WAAIH,UAAU,CAACG,QAAD,CAAd;AAAA,GAAT,EAAmC,EAAnC,CAAhC;AACA,SACE,mBACE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEF,YADT,CAEE;AAFF;AAGE,IAAA,WAAW,EAAE,qBAAAG,IAAI;AAAA,aAAIJ,UAAU,CAACI,IAAD,CAAd;AAAA;AAHnB,KAKG,gBAAuC;AAAA,QAApCC,OAAoC,QAApCA,OAAoC;AAAA,QAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,QAApBF,IAAoB,QAApBA,IAAoB;AAAA,QAAdG,OAAc,QAAdA,OAAc;AACtC,QAAIF,OAAJ,EAAa,OAAO,IAAP;AACb,QAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AACXE,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AAEA,WACE,MAAC,SAAD;AACE,MAAA,KAAK,EAAE,gBADT,CAEA;AAFA;AAGE,MAAA,QAAQ,EAAEG,YAHZ,CAIE;AACA;AALF;AAME,MAAA,WAAW,EACT,CAACE,IAAI,CAACM,IAAL,CAAUC,SAAX,GACI,mBADJ,GAEIP,IAAI,CAACM,IAAL,CAAUC,SAAV,CAAoBC,KAT5B;AAWE,MAAA,cAAc,EACZ,mBACE,MAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAgB,QAAA,OAAO,EAAE;AAAA,iBAAMJ,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAN;AAAA;AAAzB,gBADF;AAZJ,MADF;AAqBD,GAjCH,CADF,CADF;AAuCD;;AAED,eAAeZ,SAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { TextField, Button } from \"@shopify/polaris\";\n\nfunction TokenForm(props) {\n  const [tkToken, setTkToken] = useState(\"No Threekit ID\");\n\n  const GET_TK_TOKEN = gql`\n    query {\n      shop {\n        metafield(namespace: \"threekit\", key: \"token\") {\n          id\n          value\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setTkToken(newValue), []);\n  return (\n    <div>\n      <Query\n        query={GET_TK_TOKEN}\n        // variables={props.id}\n        onCompleted={data => setTkToken(data)}\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n          console.log(\"data\");\n          console.log(data);\n          console.log(tkToken);\n\n          return (\n            <TextField\n              label={\"Threekit Token\"}\n            //   value={!data.shop.metafield ? tkToken : JSON.stringify(tkToken)}\n              onChange={handleChange}\n              // id={data.product.id}\n              // ariaControls={data.product.id}\n              placeholder={\n                !data.shop.metafield\n                  ? \"No Threekit Token\"\n                  : data.shop.metafield.value\n              }\n              connectedRight={\n                <div>\n                  <Button primary onClick={() => console.log(\"Clicked\")}>\n                    Save\n                  </Button>\n                </div>\n              }\n            ></TextField>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default TokenForm;\n"]},"metadata":{},"sourceType":"module"}