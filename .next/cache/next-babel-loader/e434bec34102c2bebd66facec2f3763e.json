{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { TextField, Button } from \"@shopify/polaris\";\n\nfunction TokenForm(props) {\n  const {\n    0: tkToken,\n    1: setTkToken\n  } = useState(\"No Threekit ID\");\n\n  const makeShopMetafield = val => {\n    var fetchUrl = \"/api/makeMeta/\" + val;\n    var method = \"GET\";\n    fetch(fetchUrl, {\n      method: method\n    }).then(response => response.json()).then(json => {\n      setTkToken(json.data.metafield.value);\n      console.log(json);\n    });\n  };\n\n  const updateShopMetafield = (id, val) => {\n    var fetchUrl = `/api/insertMeta/${id}/${val}`;\n    var method = \"GET\";\n    fetch(fetchUrl, {\n      method: method\n    }).then(response => response.json()).then(json => {\n      setTkToken(json.data.metafield.value);\n      console.log(json);\n    });\n  };\n\n  const handleSubmit = (data, id, val) => {\n    !data ? makeShopMetafield(val) : updateShopMetafield(id, val);\n  };\n\n  const GET_TK_TOKEN = gql`\n    query {\n      shop {\n        metafield(namespace: \"threekit\", key: \"token\") {\n          id\n          value\n        }\n      }\n    }\n  `;\n  const UPDATE_TK_TOKEN = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const handleChange = useCallback(newValue => setTkToken(newValue), []);\n  return __jsx(\"div\", null, __jsx(Query, {\n    query: GET_TK_TOKEN // variables={props.id}\n    ,\n    onCompleted: data => setTkToken(data)\n  }, ({\n    loading,\n    error,\n    data,\n    refetch\n  }) => {\n    if (loading) return null;\n    if (error) return `Error! ${error}`;\n    console.log(\"data\");\n    console.log(data);\n    console.log(tkToken);\n    return __jsx(TextField, {\n      label: \"Threekit Token\",\n      value: tkToken,\n      onChange: handleChange,\n      onFocus: () => setTkToken(!data.shop.metafield ? \"No Threekit Token\" : data.shop.metafield.value) // id={data.product.id}\n      // ariaControls={data.product.id}\n      ,\n      placeholder: !data.shop.metafield ? \"No Threekit Token\" : data.shop.metafield.value,\n      connectedRight: __jsx(\"div\", null, __jsx(Button, {\n        primary: true,\n        onClick: () => !data.shop.metafield ? makeShopMetafield(tkToken) : updateShopMetafield(data.shop.metafield.id.split('Metafield/')[1], tkToken)\n      }, \"Save\"))\n    });\n  }));\n}\n\nexport default TokenForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/TokenForm.js"],"names":["React","useState","useCallback","useEffect","Query","Mutation","gql","TextField","Button","TokenForm","props","tkToken","setTkToken","makeShopMetafield","val","fetchUrl","method","fetch","then","response","json","data","metafield","value","console","log","updateShopMetafield","id","handleSubmit","GET_TK_TOKEN","UPDATE_TK_TOKEN","handleChange","newValue","loading","error","refetch","shop","split"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { TextField, Button } from \"@shopify/polaris\";\n\nfunction TokenForm(props) {\n  const [tkToken, setTkToken] = useState(\"No Threekit ID\");\n\n  const makeShopMetafield = val => {\n    var fetchUrl = \"/api/makeMeta/\" + val;\n    var method = \"GET\";\n\n    fetch(fetchUrl, { method: method })\n      .then(response => response.json())\n      .then(json => {\n        setTkToken(json.data.metafield.value)\n        console.log(json);\n      });\n  };\n\n  const updateShopMetafield = (id, val) => {\n    var fetchUrl = `/api/insertMeta/${id}/${val}`;\n    var method = \"GET\";\n    fetch(fetchUrl, { method: method })\n      .then(response => response.json())\n      .then(json => {\n        setTkToken(json.data.metafield.value)\n        console.log(json);\n      });\n  };\n\n  const handleSubmit = (data, id, val) => {\n    !data\n      ? makeShopMetafield(val)\n      : updateShopMetafield(id, val);\n  };\n\n  const GET_TK_TOKEN = gql`\n    query {\n      shop {\n        metafield(namespace: \"threekit\", key: \"token\") {\n          id\n          value\n        }\n      }\n    }\n  `;\n\n  const UPDATE_TK_TOKEN = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setTkToken(newValue), []);\n  return (\n    <div>\n      <Query\n        query={GET_TK_TOKEN}\n        // variables={props.id}\n        onCompleted={data => setTkToken(data)}\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n          console.log(\"data\");\n          console.log(data);\n          console.log(tkToken);\n\n          return (\n            <TextField\n              label={\"Threekit Token\"}\n              value={tkToken}\n              onChange={handleChange}\n              onFocus={() =>\n                setTkToken(\n                  !data.shop.metafield\n                    ? \"No Threekit Token\"\n                    : data.shop.metafield.value\n                )\n              }\n              // id={data.product.id}\n              // ariaControls={data.product.id}\n              placeholder={\n                !data.shop.metafield\n                  ? \"No Threekit Token\"\n                  : data.shop.metafield.value\n              }\n              connectedRight={\n                <div>\n                  <Button primary onClick={() => !data.shop.metafield ? makeShopMetafield(tkToken) : updateShopMetafield(data.shop.metafield.id.split('Metafield/')[1], tkToken)}>\n                    Save\n                  </Button>\n                </div>\n              }\n            ></TextField>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default TokenForm;\n"]},"metadata":{},"sourceType":"module"}