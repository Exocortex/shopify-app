{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery {\\n  shop{\\n    metafield(namespace: \\\"threekit\\\", key: \\\"items\\\") {\\n      id,\\n      value\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Layout, Page, TextStyle, EmptyState, Button } from \"@shopify/polaris\";\nimport { ResourcePicker, TitleBar } from \"@shopify/app-bridge-react\";\nimport store from \"store-js\";\nimport ResourceListWithProducts from \"../components/ResourceList\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\n/*\r\n\r\nWhat needs to happen:\r\n  - Page Loads\r\n    - Check the Shop's Threekit Metafield\r\n    - If there are products with Threekit Asset IDs, list them\r\n    - If not, load the empty state\r\n    - When products are selected, their Shopify IDs get entered into the Shop's metafield\r\n  - From the main page, display TK ID & if AR is enabled\r\n*/\n// This will always get the Shop's Threekit Metafield\n// Get the shop's threekit metafield\n\nvar GET_TK_METAFIELD = gql(_templateObject());\n\nvar Index = /*#__PURE__*/function (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Index)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      open: false,\n      hasSrc: false,\n      shop: \"\",\n      tkMetaId: {},\n      metaID: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_queryMe\", function (data) {\n      if (data.shop.metafield == null) {\n        return null;\n      } else {\n        _this.setState({\n          tkMetaId: data,\n          metaID: data.shop.metafield.id.split('Metafield/')[1]\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_checkIfTK\", function () {\n      if (_this.state.tkMetaId.shop.metafield == null) {\n        console.log('no TK id');\n      } else {\n        console.log(\"Yes this is TK\");\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_formatProductID\", function (arr) {\n      arr.map(function (x) {\n        return x.split('Product/')[1];\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getShopMetafield\", function () {\n      var fetchUrl = \"/api/shopMeta\";\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        // console.log(json.data.metafields)\n        // this.setState({tkMetaId: json.data})\n        return json.data;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateShopMetafield\", function (id, val) {\n      var fetchUrl = \"/api/insertMeta/\".concat(id, \"/\").concat(val);\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        console.log(\"UPDATED\");\n        console.log(json); // this.setState({tkMetaId: json.data})\n\n        return json.data;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeShopMetafield\", function (val) {\n      var fetchUrl;\n\n      if (val == 'undefined') {\n        fetchUrl = \"/api/makeMeta/\";\n      } else {\n        fetchUrl = \"/api/makeMeta/\" + val;\n      }\n\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {// console.log(json);\n        // console.log(json.data.metafields[\"threekitItems\"])\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelection\", function (resources) {\n      var idsFromResources = resources.selection.map(function (product) {\n        return product.id;\n      });\n\n      _this.setState({\n        open: false\n      });\n\n      console.log(idsFromResources);\n      console.log(_this._formatProductID(idsFromResources));\n\n      _this.makeShopMetafield(idsFromResources.map(function (x) {\n        return x.split('Product/')[1];\n      }));\n\n      store.set(\"ids\", idsFromResources);\n\n      _this.forceUpdateHandler();\n\n      _this.getShopMetafield();\n    });\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"forceUpdateHandler\",\n    value: function forceUpdateHandler() {\n      this.forceUpdate();\n    }\n  }, {\n    key: \"componentDidMount\",\n    // End testing functions\n    value: function componentDidMount() {\n      this.getShopMetafield();\n      console.log(this.state); // this.setState({tkMetaId: this.getShopMetafield()})\n      // this.makeShopMetafield(['1234-345-646', '2234-4535-346', '3345-3457-5456']);\n      // this.getScripts();\n      // this.initializeSrc();\n      // this.deleteSrc();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // This retrieves any locally stored items\n      var emptyState = !store.get(\"ids\");\n      return __jsx(Page, null, __jsx(TitleBar, {\n        primaryAction: {\n          content: \"Select products\",\n          onAction: function onAction() {\n            return _this2.setState({\n              open: true\n            });\n          }\n        }\n      }), __jsx(ResourcePicker, {\n        resourceType: \"Product\",\n        showVariants: false,\n        open: this.state.open,\n        onSelection: function onSelection(resources) {\n          return _this2.handleSelection(resources);\n        },\n        onCancel: function onCancel() {\n          return _this2.setState({\n            open: false\n          });\n        }\n      }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n        heading: \"Associate a Shopify product with a Threekit item.\",\n        action: {\n          content: \"Select products\",\n          onAction: function onAction() {\n            return _this2.setState({\n              open: true\n            });\n          }\n        },\n        image: \"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\n      }, __jsx(\"p\", null, \"Select products to associate it with a Threekit item.\"))) : __jsx(\"div\", null, __jsx(Query, {\n        query: GET_TK_METAFIELD,\n        onCompleted: function onCompleted(data) {\n          return _this2._queryMe(data);\n        }\n      }, function () {\n        return __jsx(\"div\", null, __jsx(\"p\", null, _JSON$stringify(_this2.state)), __jsx(Button, {\n          onClick: function onClick() {\n            return console.log(\"Clicked\");\n          }\n        }, \"Button\"));\n      }), __jsx(ResourceListWithProducts, null)));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/pages/index.js"],"names":["Layout","Page","TextStyle","EmptyState","Button","ResourcePicker","TitleBar","store","ResourceListWithProducts","gql","Query","GET_TK_METAFIELD","Index","open","hasSrc","shop","tkMetaId","metaID","data","metafield","setState","id","split","state","console","log","arr","map","x","fetchUrl","method","fetch","then","response","json","val","resources","idsFromResources","selection","product","_formatProductID","makeShopMetafield","set","forceUpdateHandler","getShopMetafield","forceUpdate","emptyState","get","content","onAction","handleSelection","_queryMe","React","Component"],"mappings":"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","sourcesContent":["import { Layout, Page, TextStyle, EmptyState, Button } from \"@shopify/polaris\";\r\nimport { ResourcePicker, TitleBar } from \"@shopify/app-bridge-react\";\r\nimport store from \"store-js\";\r\nimport ResourceListWithProducts from \"../components/ResourceList\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\n\r\n/*\r\n\r\nWhat needs to happen:\r\n  - Page Loads\r\n    - Check the Shop's Threekit Metafield\r\n    - If there are products with Threekit Asset IDs, list them\r\n    - If not, load the empty state\r\n    - When products are selected, their Shopify IDs get entered into the Shop's metafield\r\n  - From the main page, display TK ID & if AR is enabled\r\n*/\r\n// This will always get the Shop's Threekit Metafield\r\n\r\n\r\n// Get the shop's threekit metafield\r\nconst GET_TK_METAFIELD = gql`\r\nquery {\r\n  shop{\r\n    metafield(namespace: \"threekit\", key: \"items\") {\r\n      id,\r\n      value\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nclass Index extends React.Component {\r\n  state = {\r\n    open: false,\r\n    hasSrc: false,\r\n    shop: \"\",\r\n    tkMetaId: {},\r\n    metaID: ''\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null){\r\n      return null;\r\n    } else {\r\n      this.setState({\r\n        tkMetaId: data,\r\n        metaID: data.shop.metafield.id.split('Metafield/')[1]\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n\r\n  _checkIfTK = () => {\r\n    if(this.state.tkMetaId.shop.metafield == null){\r\n      console.log('no TK id')\r\n    } else {\r\n      console.log(\"Yes this is TK\")\r\n    }\r\n  }\r\n\r\n  _formatProductID = arr => {\r\n    arr.map(x => x.split('Product/')[1]);\r\n  }\r\n\r\n  // For testing\r\n  getShopMetafield = () => {\r\n    var fetchUrl = \"/api/shopMeta\";\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        // console.log(json.data.metafields)\r\n        // this.setState({tkMetaId: json.data})\r\n        return json.data\r\n      });\r\n  };\r\n\r\n  forceUpdateHandler(){\r\n    this.forceUpdate();\r\n  };\r\n\r\n  updateShopMetafield = (id, val) => {\r\n    var fetchUrl = `/api/insertMeta/${id}/${val}`;\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        console.log(\"UPDATED\")\r\n        console.log(json)\r\n        // this.setState({tkMetaId: json.data})\r\n        return json.data\r\n      });\r\n  };\r\n\r\n  makeShopMetafield = (val) => {\r\n    var fetchUrl;\r\n    if (val == 'undefined'){\r\n      fetchUrl = \"/api/makeMeta/\";\r\n    } else{\r\n      fetchUrl = \"/api/makeMeta/\" + val;\r\n    }\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        // console.log(json);\r\n        // console.log(json.data.metafields[\"threekitItems\"])\r\n      });\r\n  };\r\n  \r\n\r\n  // End testing functions\r\n\r\n  componentDidMount() {\r\n    this.getShopMetafield();\r\n    console.log(this.state)\r\n    // this.setState({tkMetaId: this.getShopMetafield()})\r\n    // this.makeShopMetafield(['1234-345-646', '2234-4535-346', '3345-3457-5456']);\r\n    // this.getScripts();\r\n    // this.initializeSrc();\r\n    // this.deleteSrc();\r\n  }\r\n\r\n  render() {\r\n    // This retrieves any locally stored items\r\n    const emptyState = !store.get(\"ids\");\r\n\r\n    return (\r\n      <Page>\r\n        <TitleBar\r\n          primaryAction={{\r\n            content: \"Select products\",\r\n            onAction: () => this.setState({ open: true })\r\n          }}\r\n        />\r\n        <ResourcePicker\r\n          resourceType=\"Product\"\r\n          showVariants={false}\r\n          open={this.state.open}\r\n          onSelection={resources => this.handleSelection(resources)}\r\n          onCancel={() => this.setState({ open: false })}\r\n        />\r\n        {emptyState ? (\r\n          <Layout>\r\n            <EmptyState\r\n              heading=\"Associate a Shopify product with a Threekit item.\"\r\n              action={{\r\n                content: \"Select products\",\r\n                onAction: () => this.setState({ open: true })\r\n              }}\r\n              image={\r\n                \"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\r\n              }\r\n            >\r\n              <p>Select products to associate it with a Threekit item.</p>\r\n            </EmptyState>\r\n          </Layout>\r\n        ) : (\r\n          <div>\r\n            <Query query={GET_TK_METAFIELD} onCompleted={data => this._queryMe(data)}>\r\n              {() => {\r\n                return (\r\n                  <div>\r\n                    <p>{JSON.stringify(this.state)}</p>\r\n                    \r\n                    <Button onClick={() => console.log(\"Clicked\")}>Button</Button>\r\n                  </div>\r\n                );\r\n              }}\r\n            </Query>\r\n          <ResourceListWithProducts />\r\n\r\n          </div>\r\n        )}\r\n      </Page>\r\n    );\r\n  }\r\n  handleSelection = resources => {\r\n    const idsFromResources = resources.selection.map(product => product.id);\r\n    this.setState({ open: false });\r\n    console.log(idsFromResources)\r\n    console.log(this._formatProductID(idsFromResources))\r\n    this.makeShopMetafield(idsFromResources.map(x => x.split('Product/')[1]))\r\n    store.set(\"ids\", idsFromResources);\r\n    this.forceUpdateHandler();\r\n    this.getShopMetafield();\r\n  };\r\n}\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}