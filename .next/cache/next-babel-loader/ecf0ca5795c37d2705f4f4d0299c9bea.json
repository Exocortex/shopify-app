{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport { Query, Mutation, useQuery } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Banner, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Card, Stack, TextStyle, Checkbox, Button } from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const {\n    0: value,\n    1: setValue\n  } = useState(\"\");\n  const {\n    0: tkMetaId,\n    1: setTkMetaId\n  } = useState();\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n  return __jsx(\"div\", null, __jsx(Query, {\n    query: GET_META_ID,\n    onCompleted: data => setTkMetaId(data)\n  }, () => {\n    return __jsx(\"div\", null, \"\");\n  }), __jsx(Query, {\n    query: props.query,\n    variables: props.id // skip={!breed}\n\n  }, ({\n    loading,\n    error,\n    data,\n    refetch\n  }) => {\n    if (loading) return null;\n    if (error) return `Error! ${error}`;\n    return __jsx(\"div\", null, __jsx(Stack, null, __jsx(Stack.Item, {\n      fill: true\n    }, __jsx(\"h3\", null, __jsx(TextStyle, {\n      variation: \"strong\"\n    }, props.title))), __jsx(Stack.Item, null, __jsx(Mutation, {\n      mutation: UPDATE_TK_ID\n    }, (handleSubmit, {\n      err,\n      res\n    }) => {\n      const showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      const showToast = res && res.productVariantUpdate && __jsx(Toast, {\n        content: \"Sucessfully updated\",\n        onDismiss: () => console.log(\"UPDATED\")\n      });\n\n      return __jsx(\"div\", null, showToast, __jsx(Form, null, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        value: value,\n        onChange: handleChange // onFocus={getID(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value)}\n        ,\n        id: data.product.id,\n        ariaControls: data.product.id,\n        placeholder: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n        connectedRight: __jsx(Button, {\n          onClick: () => {\n            let productVariableInput;\n\n            if (!data.product.metafield) {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\"\n                }]\n              };\n            } else {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\",\n                  id: tkMetaId\n                }]\n              };\n            }\n\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            });\n          }\n        }, \"Save\")\n      }))), __jsx(PageActions, {\n        primaryAction: [{\n          content: \"Save\",\n          onAction: () => {\n            let productVariableInput;\n\n            if (!data.product.metafield) {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\"\n                }]\n              };\n            } else {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\",\n                  id: tkMetaId\n                }]\n              };\n            }\n\n            console.log(productVariableInput); // handleSubmit({\n            //   variables: {\n            //     input: productVariableInput\n            //   }\n            // });\n          }\n        }]\n      })));\n    }))));\n  }));\n}\n\nexport default ThreekitForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ThreekitForm.js"],"names":["React","useState","useCallback","Query","Mutation","useQuery","gql","Banner","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Card","Stack","TextStyle","Checkbox","Button","ThreekitForm","props","value","setValue","tkMetaId","setTkMetaId","UPDATE_TK_ID","GET_META_ID","handleChange","newValue","data","query","id","loading","error","refetch","title","handleSubmit","err","res","showError","message","showToast","productVariantUpdate","console","log","product","metafield","productVariableInput","metafields","namespace","key","valueType","variables","input","content","onAction"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Query, Mutation, useQuery } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  DisplayText,\n  Form,\n  FormLayout,\n  Frame,\n  Layout,\n  Page,\n  PageActions,\n  TextField,\n  Card,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button\n} from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [tkMetaId, setTkMetaId] = useState();\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n  return (\n    <div>\n      <Query\n        query={GET_META_ID}\n        onCompleted={(data) => setTkMetaId(data)}\n      >\n        {() => {\n          return <div>{\"\"}</div>;\n        }}\n      </Query>\n      <Query\n        query={props.query}\n        variables={props.id}\n        // skip={!breed}\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n\n          return (\n            <div>\n              {/* <Card title={props.title}> */}\n              {/* {console.log(data)} */}\n\n              <Stack>\n                <Stack.Item fill>\n                  <h3>\n                    <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                  </h3>\n                </Stack.Item>\n                <Stack.Item>\n                  <Mutation mutation={UPDATE_TK_ID}>\n                    {(handleSubmit, { err, res }) => {\n                      const showError = err && (\n                        <Banner status=\"critical\">{err.message}</Banner>\n                      );\n                      const showToast = res && res.productVariantUpdate && (\n                        <Toast\n                          content=\"Sucessfully updated\"\n                          onDismiss={() => console.log(\"UPDATED\")}\n                        />\n                      );\n\n                      return (\n                        <div>\n                          {/* <Frame> */}\n                          {/* <Page> */}\n                          {/* <Layout> */}\n                          {showToast}\n                          {/* <Layout.Section>{showError}</Layout.Section> */}\n                          {/* <Layout.Section> */}\n\n                          <Form>\n                            <FormLayout>\n                              <FormLayout.Group>\n                                <TextField\n                                  value={value}\n                                  onChange={handleChange}\n                                  // onFocus={getID(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value)}\n                                  id={data.product.id}\n                                  ariaControls={data.product.id}\n                                  placeholder={\n                                    !data.product.metafield\n                                      ? \"No Threekit ID\"\n                                      : data.product.metafield.value\n                                  }\n                                  connectedRight={\n                                    <Button\n                                      onClick={() => {\n                                        let productVariableInput;\n                                        if (!data.product.metafield) {\n                                          productVariableInput = {\n                                            id: props.id.id,\n                                            metafields: [\n                                              {\n                                                namespace: \"threekit\",\n                                                key: \"assetid\",\n                                                value: value,\n                                                valueType: \"STRING\"\n                                              }\n                                            ]\n                                          };\n                                        } else {\n                                          productVariableInput = {\n                                            id: props.id.id,\n                                            metafields: [\n                                              {\n                                                namespace: \"threekit\",\n                                                key: \"assetid\",\n                                                value: value,\n                                                valueType: \"STRING\",\n                                                id: tkMetaId\n                                              }\n                                            ]\n                                          };\n                                        }\n\n                                        handleSubmit({\n                                          variables: {\n                                            input: productVariableInput\n                                          }\n                                        });\n                                      }}\n                                    >\n                                      Save\n                                    </Button>\n                                  }\n                                ></TextField>\n                              </FormLayout.Group>\n                            </FormLayout>\n\n                            <PageActions\n                              primaryAction={[\n                                {\n                                  content: \"Save\",\n                                  onAction: () => {\n                                    let productVariableInput;\n                                    if (!data.product.metafield) {\n                                      productVariableInput = {\n                                        id: props.id.id,\n                                        metafields: [\n                                          {\n                                            namespace: \"threekit\",\n                                            key: \"assetid\",\n                                            value: value,\n                                            valueType: \"STRING\"\n                                          }\n                                        ]\n                                      };\n                                    } else {\n                                      productVariableInput = {\n                                        id: props.id.id,\n                                        metafields: [\n                                          {\n                                            namespace: \"threekit\",\n                                            key: \"assetid\",\n                                            value: value,\n                                            valueType: \"STRING\",\n                                            id: tkMetaId\n                                          }\n                                        ]\n                                      };\n                                    }\n                                    console.log(productVariableInput);\n\n                                    // handleSubmit({\n                                    //   variables: {\n                                    //     input: productVariableInput\n                                    //   }\n                                    // });\n                                  }\n                                }\n                              ]}\n                            />\n                          </Form>\n                          {/* </Layout.Section> */}\n                          {/* </Layout> */}\n                          {/* </Page> */}\n                          {/* </Frame> */}\n                        </div>\n                      );\n                    }}\n                  </Mutation>\n                </Stack.Item>\n              </Stack>\n              {/* Catch the error for no IDS */}\n\n              {/* <button onClick={() => refetch()}>Refetch!</button> */}\n              {/* </Card> */}\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"]},"metadata":{},"sourceType":"module"}