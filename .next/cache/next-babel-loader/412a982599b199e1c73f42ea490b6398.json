{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from \"graphql-tag\";\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from \"@shopify/polaris\";\nimport store from \"store-js\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport { Context } from \"@shopify/app-bridge-react\";\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GET_TK_PRODUCT_IDS = gql`\n  query {\n    shop {\n      metafield(namespace: \"threekit\", key: \"items\") {\n        id\n        value\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      ids: [],\n      prod\n    });\n\n    _defineProperty(this, \"_queryMe\", data => {\n      if (data.shop.metafield == null) {\n        return null;\n      } else {\n        const str = JSON.parse(data.shop.metafield.value);\n        let arr;\n        arr = str.ids.split(\",\");\n        this.setState({\n          ids: arr.map(id => \"gid://shopify/Product/\" + id)\n        });\n      }\n    });\n\n    _defineProperty(this, \"onProductsFetched\", data => this.setState({\n      prod: data\n    }));\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\n    };\n\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_TK_PRODUCT_IDS,\n      onCompleted: data => this._queryMe(data)\n    }, () => {\n      return __jsx(\"div\", null, __jsx(\"p\", null, \"NEW STATE\"), __jsx(\"p\", null, JSON.stringify(this.state)));\n    }), __jsx(\"p\", null, \"HEllo, world\"), __jsx(ApolloConsumer, null, client => __jsx(\"div\", null, this.state.prod && __jsx(\"p\", null, \"Product\"), __jsx(\"button\", {\n      onClick: async () => {\n        const {\n          data\n        } = await client.query({\n          query: GET_TK_PRODUCT_IDS\n        });\n        this.onProductsFetched(data);\n        console.log(data);\n      }\n    }, \"Click me!\"))));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ResourceList.js"],"names":["gql","Query","ApolloConsumer","Card","ResourceList","Stack","TextStyle","Thumbnail","store","Redirect","Context","GET_PRODUCTS_BY_ID","GET_TK_PRODUCT_IDS","ResourceListWithProducts","React","Component","ids","prod","data","shop","metafield","str","JSON","parse","value","arr","split","setState","map","id","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","twoWeeksFromNow","Date","now","toDateString","_queryMe","stringify","state","client","query","onProductsFetched","console","log"],"mappings":";;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,EAAgBC,cAAhB,QAAsC,cAAtC;AACA,SACEC,IADF,EAEEC,YAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,SALF,QAMO,kBANP;AAOA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,MAAMC,kBAAkB,GAAGX,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA/B;AA6BA,MAAMY,kBAAkB,GAAGZ,GAAI;;;;;;;;;CAA/B;;AAWA,MAAMa,wBAAN,SAAuCC,KAAK,CAACC,SAA7C,CAAuD;AAAA;AAAA;;AAAA,mCAC7C;AACNC,MAAAA,GAAG,EAAE,EADC;AAENC,MAAAA;AAFM,KAD6C;;AAAA,sCAM1CC,IAAI,IAAI;AACjB,UAAIA,IAAI,CAACC,IAAL,CAAUC,SAAV,IAAuB,IAA3B,EAAiC;AAC/B,eAAO,IAAP;AACD,OAFD,MAEO;AACL,cAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACC,IAAL,CAAUC,SAAV,CAAoBI,KAA/B,CAAZ;AACA,YAAIC,GAAJ;AACAA,QAAAA,GAAG,GAAGJ,GAAG,CAACL,GAAJ,CAAQU,KAAR,CAAc,GAAd,CAAN;AAEA,aAAKC,QAAL,CAAc;AACZX,UAAAA,GAAG,EAAES,GAAG,CAACG,GAAJ,CAAQC,EAAE,IAAI,2BAA2BA,EAAzC;AADO,SAAd;AAGD;AACF,KAlBoD;;AAAA,+CAoBjCX,IAAI,IAAI,KAAKS,QAAL,CAAc;AAACV,MAAAA,IAAI,EAAEC;AAAP,KAAd,CApByB;AAAA;;AAuBrDY,EAAAA,MAAM,GAAG;AACP,UAAMC,GAAG,GAAG,KAAKC,OAAjB;;AACA,UAAMC,iBAAiB,GAAG,MAAM;AAC9B,YAAMC,QAAQ,GAAGzB,QAAQ,CAAC0B,MAAT,CAAgBJ,GAAhB,CAAjB;AACAG,MAAAA,QAAQ,CAACE,QAAT,CAAkB3B,QAAQ,CAAC4B,MAAT,CAAgBC,GAAlC,EAAuC,gBAAvC;AACD,KAHD;;AAIA,UAAMC,eAAe,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,OAAtB,EAA+BC,YAA/B,EAAxB;AAEA,WACE,mBACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAE9B,kBADT;AAEE,MAAA,WAAW,EAAEM,IAAI,IAAI,KAAKyB,QAAL,CAAczB,IAAd;AAFvB,OAIG,MAAM;AACL,aACE,mBACE,6BADF,EAEE,iBAAII,IAAI,CAACsB,SAAL,CAAe,KAAKC,KAApB,CAAJ,CAFF,CADF;AAMD,KAXH,CADF,EAcE,gCAdF,EAeE,MAAC,cAAD,QACCC,MAAM,IACL,mBACG,KAAKD,KAAL,CAAW5B,IAAX,IAAmB,2BADtB,EAEE;AACE,MAAA,OAAO,EAAE,YAAY;AACnB,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAM4B,MAAM,CAACC,KAAP,CAAa;AAClCA,UAAAA,KAAK,EAAEnC;AAD2B,SAAb,CAAvB;AAGA,aAAKoC,iBAAL,CAAuB9B,IAAvB;AACA+B,QAAAA,OAAO,CAACC,GAAR,CAAYhC,IAAZ;AACD;AAPH,mBAFF,CAFF,CAfF,CADF;AAoCD;;AAnEoD;;gBAAjDL,wB,iBAsBiBH,O;;AAgDvB,eAAeG,wBAAf","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { Query, ApolloConsumer } from \"react-apollo\";\r\nimport {\r\n  Card,\r\n  ResourceList,\r\n  Stack,\r\n  TextStyle,\r\n  Thumbnail\r\n} from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport { Redirect } from \"@shopify/app-bridge/actions\";\r\nimport { Context } from \"@shopify/app-bridge-react\";\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!) {\r\n    nodes(ids: $ids) {\r\n      ... on Product {\r\n        title\r\n        handle\r\n        descriptionHtml\r\n        id\r\n        images(first: 1) {\r\n          edges {\r\n            node {\r\n              originalSrc\r\n              altText\r\n            }\r\n          }\r\n        }\r\n        variants(first: 1) {\r\n          edges {\r\n            node {\r\n              price\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_PRODUCT_IDS = gql`\r\n  query {\r\n    shop {\r\n      metafield(namespace: \"threekit\", key: \"items\") {\r\n        id\r\n        value\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass ResourceListWithProducts extends React.Component {\r\n  state = {\r\n    ids: [],\r\n    prod\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null) {\r\n      return null;\r\n    } else {\r\n      const str = JSON.parse(data.shop.metafield.value);\r\n      let arr;\r\n      arr = str.ids.split(\",\");\r\n\r\n      this.setState({\r\n        ids: arr.map(id => \"gid://shopify/Product/\" + id)\r\n      });\r\n    }\r\n  };\r\n\r\n  onProductsFetched = data => this.setState({prod: data});\r\n\r\n  static contextType = Context;\r\n  render() {\r\n    const app = this.context;\r\n    const redirectToProduct = () => {\r\n      const redirect = Redirect.create(app);\r\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\r\n    };\r\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\r\n\r\n    return (\r\n      <div>\r\n        <Query\r\n          query={GET_TK_PRODUCT_IDS}\r\n          onCompleted={data => this._queryMe(data)}\r\n        >\r\n          {() => {\r\n            return (\r\n              <div>\r\n                <p>NEW STATE</p>\r\n                <p>{JSON.stringify(this.state)}</p>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n        <p>HEllo, world</p>\r\n        <ApolloConsumer>\r\n        {client => (\r\n          <div>\r\n            {this.state.prod && <p>Product</p>}\r\n            <button\r\n              onClick={async () => {\r\n                const { data } = await client.query({\r\n                  query: GET_TK_PRODUCT_IDS,\r\n                });\r\n                this.onProductsFetched(data);\r\n                console.log(data)\r\n              }}\r\n            >\r\n              Click me!\r\n            </button>\r\n          </div>\r\n        )}\r\n      </ApolloConsumer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceListWithProducts;\r\n"]},"metadata":{},"sourceType":"module"}