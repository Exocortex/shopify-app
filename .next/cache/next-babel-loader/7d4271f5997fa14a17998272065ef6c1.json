{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query($id: ID!) {\\n      product(id: $id) {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"assetid\\\") {\\n          value\\n          id\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation($input: ProductInput!) {\\n      productUpdate(input: $input) {\\n        product {\\n          metafields(first: 100) {\\n            edges {\\n              node {\\n                id\\n                namespace\\n                key\\n                value\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Banner, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Card, Stack, TextStyle, Checkbox, Button, Toast } from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  var _useState = useState(\"\"),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(),\n      tkMetaId = _useState2[0],\n      setTkMetaId = _useState2[1];\n\n  var _useState3 = useState(false),\n      isSaved = _useState3[0],\n      setIsSaved = _useState3[1];\n\n  var _useState4 = useState(false),\n      isPdp = _useState4[0],\n      setIsPdp = _useState4[1];\n\n  var _useState5 = useState({}),\n      prodImg = _useState5[0],\n      setProdImg = _useState5[1];\n\n  var UPDATE_TK_ID = gql(_templateObject());\n  var GET_META_ID = gql(_templateObject2());\n  var handleChange = useCallback(function (newValue) {\n    return setValue(newValue);\n  }, []);\n\n  var _createTKimage = function _createTKimage(id) {\n    var formatId = function formatId(id) {\n      return id.split(\"Product/\")[1];\n    };\n\n    var getImgObj = function getImgObj(id) {\n      var fetchUrl = \"/api/images/\" + formatId(id);\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        // console.log(json.data.metafields)\n        // this.setState({tkMetaId: json.data})\n        // console.log(json)\n        setProdImg(json.data);\n      });\n    };\n\n    getImgObj(id);\n    console.log(prodImg);\n  };\n\n  return __jsx(\"div\", null, __jsx(Query, {\n    query: props.query,\n    variables: props.id\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data,\n        refetch = _ref.refetch;\n    if (loading) return null;\n    if (error) return \"Error! \".concat(error);\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_META_ID,\n      variables: props.id,\n      onCompleted: function onCompleted(data) {\n        return setTkMetaId(data);\n      }\n    }, function (_ref2) {\n      var loading = _ref2.loading,\n          error = _ref2.error,\n          data = _ref2.data,\n          refetch = _ref2.refetch;\n      if (loading) return null;\n      if (error) return \"Error! \".concat(error);\n      return null;\n    }), __jsx(Stack, null, __jsx(Stack.Item, {\n      fill: true\n    }, __jsx(\"h3\", null, __jsx(TextStyle, {\n      variation: \"strong\"\n    }, props.title))), __jsx(Stack.Item, null, __jsx(Mutation, {\n      mutation: UPDATE_TK_ID\n    }, function (handleSubmit, _ref3) {\n      var err = _ref3.err,\n          res = _ref3.res;\n\n      var showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      return __jsx(\"div\", null, __jsx(Page, null, !isSaved ? __jsx(\"div\", null) : __jsx(Banner, {\n        title: \"Saved\",\n        onDismiss: function onDismiss() {\n          return setIsSaved(false);\n        }\n      }, __jsx(\"p\", null, \"Saving your new TK ID.\")), __jsx(Layout.Section, null, showError), __jsx(Form, null, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        value: value,\n        onFocus: function onFocus() {\n          return setValue(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value);\n        },\n        onChange: handleChange,\n        id: data.product.id,\n        ariaControls: data.product.id,\n        placeholder: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n        connectedRight: __jsx(Button, {\n          onClick: function onClick() {\n            var productVariableInput;\n\n            if (!data.product.metafield) {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\"\n                }]\n              };\n            } else {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\",\n                  id: tkMetaId.product.metafield.id\n                }]\n              };\n            }\n\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            }, setIsSaved(true));\n          }\n        }, \"Save\")\n      }))))));\n    })), __jsx(Stack.Item, null, __jsx(Checkbox, {\n      label: \"Display on PDP\",\n      checked: isPdp,\n      onChange: function onChange() {\n        return !isPdp ? setIsPdp(true) : setIsPdp(false);\n      } // \n      // onFocus={_createTKimage(props.id.id)}\n\n    }))));\n  }));\n}\n\nexport default ThreekitForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ThreekitForm.js"],"names":["React","useState","useCallback","Query","Mutation","gql","Banner","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Card","Stack","TextStyle","Checkbox","Button","Toast","ThreekitForm","props","value","setValue","tkMetaId","setTkMetaId","isSaved","setIsSaved","isPdp","setIsPdp","prodImg","setProdImg","UPDATE_TK_ID","GET_META_ID","handleChange","newValue","_createTKimage","id","formatId","split","getImgObj","fetchUrl","method","fetch","then","response","json","data","console","log","query","loading","error","refetch","title","handleSubmit","err","res","showError","message","product","metafield","productVariableInput","metafields","namespace","key","valueType","variables","input"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  DisplayText,\n  Form,\n  FormLayout,\n  Frame,\n  Layout,\n  Page,\n  PageActions,\n  TextField,\n  Card,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button,\n  Toast\n} from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [tkMetaId, setTkMetaId] = useState();\n  const [isSaved, setIsSaved] = useState(false);\n  const [isPdp, setIsPdp] = useState(false);\n  const [prodImg, setProdImg] = useState({})\n\n\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n  const _createTKimage = (id) =>{\n    \n    const formatId = (id) => id.split(\"Product/\")[1];\n\n    const getImgObj = (id) => {\n      var fetchUrl = \"/api/images/\" + formatId(id);\n      var method = \"GET\";\n      fetch(fetchUrl, { method: method })\n        .then(response => response.json())\n        .then(json => {\n          // console.log(json.data.metafields)\n          // this.setState({tkMetaId: json.data})\n          // console.log(json)\n          setProdImg(json.data)\n        });\n    }\n    getImgObj(id);\n    console.log(prodImg)\n  }\n  return (\n    <div>\n      <Query query={props.query} variables={props.id}>\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n\n          return (\n            <div>\n              <Query\n                query={GET_META_ID}\n                variables={props.id}\n                onCompleted={data => setTkMetaId(data)}\n              >\n                {({ loading, error, data, refetch }) => {\n                  if (loading) return null;\n                  if (error) return `Error! ${error}`;\n\n                  return null;\n                }}\n              </Query>\n\n              <Stack>\n                <Stack.Item fill>\n                  <h3>\n                    <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                  </h3>\n                </Stack.Item>\n  \n                <Stack.Item>\n                  <Mutation mutation={UPDATE_TK_ID}>\n                    {(handleSubmit, { err, res }) => {\n                      const showError = err && (\n                        <Banner status=\"critical\">{err.message}</Banner>\n                      );\n\n                      return (\n                        <div>\n                          {/* <Frame> */}\n                          <Page>\n                            {/* <Layout> */}\n                            {!isSaved ? (\n                              <div></div>\n                            ) : (\n                              <Banner\n                                title=\"Saved\"\n                                onDismiss={() => setIsSaved(false)}\n                              >\n                                <p>Saving your new TK ID.</p>\n                              </Banner>\n                            )}\n\n                            <Layout.Section>{showError}</Layout.Section>\n                            {/* <Layout.Section> */}\n\n                            <Form>\n                              <FormLayout>\n                                <FormLayout.Group>\n                                  <TextField\n                                    value={value}\n                                    onFocus={() =>\n                                      setValue(\n                                        !data.product.metafield\n                                          ? \"No Threekit ID\"\n                                          : data.product.metafield.value\n                                      )\n                                    }\n                                    onChange={handleChange}\n                                    id={data.product.id}\n                                    ariaControls={data.product.id}\n                                    placeholder={\n                                      !data.product.metafield\n                                        ? \"No Threekit ID\"\n                                        : data.product.metafield.value\n                                    }\n                                    connectedRight={\n                                      <Button\n                                        onClick={() => {\n                                          let productVariableInput;\n                                          if (!data.product.metafield) {\n                                            productVariableInput = {\n                                              id: props.id.id,\n                                              metafields: [\n                                                {\n                                                  namespace: \"threekit\",\n                                                  key: \"assetid\",\n                                                  value: value,\n                                                  valueType: \"STRING\"\n                                                }\n                                              ]\n                                            };\n                                          } else {\n                                            productVariableInput = {\n                                              id: props.id.id,\n                                              metafields: [\n                                                {\n                                                  namespace: \"threekit\",\n                                                  key: \"assetid\",\n                                                  value: value,\n                                                  valueType: \"STRING\",\n                                                  id:\n                                                    tkMetaId.product.metafield\n                                                      .id\n                                                }\n                                              ]\n                                            };\n                                          }\n\n                                          handleSubmit(\n                                            {\n                                              variables: {\n                                                input: productVariableInput\n                                              }\n                                            },\n                                            setIsSaved(true)\n                                          );\n                                        }}\n                                      >\n                                        Save\n                                      </Button>\n                                    }\n                                  ></TextField>\n                                </FormLayout.Group>\n                              </FormLayout>\n                            </Form>\n                          </Page>\n                        </div>\n                      );\n                    }}\n                  </Mutation>\n                </Stack.Item>\n                <Stack.Item>\n                  <Checkbox\n                    label=\"Display on PDP\"\n                    checked={isPdp}\n                    onChange={() => !isPdp ? setIsPdp(true) : setIsPdp(false)}\n                    // \n                    // onFocus={_createTKimage(props.id.id)}\n                  />\n                 \n                </Stack.Item>\n              </Stack>\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"]},"metadata":{},"sourceType":"module"}