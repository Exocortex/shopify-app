{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast } from \"@shopify/polaris\";\nimport store from \"store-js\";\nimport gql from \"graphql-tag\";\nimport { Mutation, Query, useQuery } from \"react-apollo\";\nconst UPDATE_PRICE = gql`\n  mutation($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        metafields(first: 100) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GET_META_ID = gql`\nquery($id: ID!) {\n  product(id: $id) {\n    metafield(namespace: \"threekit1\", key: \"assetid\") {\n      value\n      id\n    }\n  }\n}\n`;\n\nclass EditProduct extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      discount: \"\",\n      price: \"\",\n      variantId: \"\",\n      showToast: false,\n      metaId: \"\"\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      this.setState({\n        metaId: getMeta(this.state.variantId)\n      });\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"itemToBeConsumed\", () => {\n      const item = store.get(\"item\");\n      console.log(item);\n      const price = item.handle;\n      const variantId = item.id;\n      const discounter = price;\n      this.setState({\n        price,\n        variantId\n      });\n      return discounter;\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      discount: this.itemToBeConsumed()\n    });\n    console.log(\"variant id: \", this.state.variantId);\n  }\n\n  render() {\n    const {\n      name,\n      price,\n      discount,\n      variantId\n    } = this.state;\n\n    function getMeta(proId) {\n      const {\n        loading,\n        error,\n        data\n      } = useQuery(GET_META_ID, {\n        variables: {\n          id: proId\n        }\n      });\n      if (loading) return null;\n      if (error) return `Error! ${error}`;\n      console.log(data);\n      return data.product.metafield.id;\n    }\n\n    console.log(this.state);\n    return __jsx(Mutation, {\n      mutation: UPDATE_PRICE\n    }, (handleSubmit, {\n      error,\n      data\n    }) => {\n      const showError = error && __jsx(Banner, {\n        status: \"critical\"\n      }, error.message);\n\n      const showToast = data && data.productVariantUpdate && __jsx(Toast, {\n        content: \"Sucessfully updated\",\n        onDismiss: () => this.setState({\n          showToast: false\n        })\n      });\n\n      return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, showError), __jsx(Layout.Section, null, __jsx(DisplayText, {\n        size: \"large\"\n      }, name), __jsx(Form, null, __jsx(Card, {\n        sectioned: true\n      }, __jsx(\"p\", null, JSON.stringify(getMeta(this.state.variantId))), __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        prefix: \"$\",\n        value: price,\n        disabled: true,\n        label: \"Original price\",\n        type: \"price\"\n      }), __jsx(TextField, {\n        id: \"sendText\",\n        prefix: \"TKID\",\n        value: discount,\n        onChange: this.handleChange(\"discount\"),\n        label: \"Discounted price\",\n        type: \"text\"\n      })), __jsx(\"p\", null, \"This sale price will expire in two weeks\"))), __jsx(PageActions, {\n        primaryAction: [{\n          content: \"Save\",\n          onAction: () => {\n            const productVariableInput = {\n              id: \"gid://shopify/Product/4713627418669\",\n              metafields: [{\n                namespace: \"threekit1\",\n                key: \"assetid\",\n                value: this.state.discount,\n                valueType: \"STRING\",\n                id: this.state.metaId\n              }]\n            };\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            });\n          }\n        }],\n        secondaryActions: [{\n          content: \"Remove discount\"\n        }]\n      }))))));\n    });\n  }\n\n}\n\nexport default EditProduct;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/pages/edit-products.js"],"names":["Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","store","gql","Mutation","Query","useQuery","UPDATE_PRICE","GET_META_ID","EditProduct","React","Component","discount","price","variantId","showToast","metaId","field","setState","getMeta","state","value","item","get","console","log","handle","id","discounter","componentDidMount","itemToBeConsumed","render","name","proId","loading","error","data","variables","product","metafield","handleSubmit","showError","message","productVariantUpdate","JSON","stringify","handleChange","content","onAction","productVariableInput","metafields","namespace","key","valueType","input"],"mappings":"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","sourcesContent":["import {\r\n  Banner,\r\n  Card,\r\n  DisplayText,\r\n  Form,\r\n  FormLayout,\r\n  Frame,\r\n  Layout,\r\n  Page,\r\n  PageActions,\r\n  TextField,\r\n  Toast\r\n} from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation, Query, useQuery } from \"react-apollo\";\r\n\r\nconst UPDATE_PRICE = gql`\r\n  mutation($input: ProductInput!) {\r\n    productUpdate(input: $input) {\r\n      product {\r\n        metafields(first: 100) {\r\n          edges {\r\n            node {\r\n              id\r\n              namespace\r\n              key\r\n              value\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_META_ID = gql`\r\nquery($id: ID!) {\r\n  product(id: $id) {\r\n    metafield(namespace: \"threekit1\", key: \"assetid\") {\r\n      value\r\n      id\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nclass EditProduct extends React.Component {\r\n  state = {\r\n    discount: \"\",\r\n    price: \"\",\r\n    variantId: \"\",\r\n    showToast: false,\r\n    metaId: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ discount: this.itemToBeConsumed() });\r\n    console.log(\"variant id: \", this.state.variantId);\r\n  }\r\n  \r\n\r\n  render() {\r\n    const { name, price, discount, variantId } = this.state;\r\n\r\n\r\n    function getMeta(proId) {\r\n      const { loading, error, data } = useQuery(GET_META_ID, {\r\n        variables: {id: proId}\r\n      });\r\n\r\n      if (loading) return null;\r\n      if (error) return `Error! ${error}`;\r\n      console.log(data)\r\n      return data.product.metafield.id;\r\n    }\r\n    console.log(this.state)\r\n\r\n    return (\r\n      \r\n      <Mutation mutation={UPDATE_PRICE}>\r\n        {(handleSubmit, { error, data }) => {\r\n          const showError = error && (\r\n            <Banner status=\"critical\">{error.message}</Banner>\r\n          );\r\n          const showToast = data && data.productVariantUpdate && (\r\n            <Toast\r\n              content=\"Sucessfully updated\"\r\n              onDismiss={() => this.setState({ showToast: false })}\r\n            />\r\n          );\r\n\r\n\r\n          return (\r\n            <Frame>\r\n              <Page>\r\n                <Layout>\r\n                  {showToast}\r\n                  <Layout.Section>{showError}</Layout.Section>\r\n                  <Layout.Section>\r\n                    <DisplayText size=\"large\">{name}</DisplayText>\r\n                    <Form>\r\n                      <Card sectioned>\r\n                        <p>{JSON.stringify(getMeta(this.state.variantId))}</p>\r\n                        <FormLayout>\r\n                          <FormLayout.Group>\r\n                            <TextField\r\n                              prefix=\"$\"\r\n                              value={price}\r\n                              disabled\r\n                              label=\"Original price\"\r\n                              type=\"price\"\r\n                            />\r\n                            <TextField\r\n                              id=\"sendText\"\r\n                              prefix=\"TKID\"\r\n                              value={discount}\r\n                              onChange={this.handleChange(\"discount\")}\r\n                              label=\"Discounted price\"\r\n                              type=\"text\"\r\n                            />\r\n                          </FormLayout.Group>\r\n                          <p>This sale price will expire in two weeks</p>\r\n                        </FormLayout>\r\n                      </Card>\r\n                      <PageActions\r\n                        primaryAction={[\r\n                          {\r\n                            content: \"Save\",\r\n                            onAction: () => {\r\n                              const productVariableInput = {\r\n                                id: \"gid://shopify/Product/4713627418669\",\r\n                                metafields: [\r\n                                  {\r\n                                    namespace: \"threekit1\",\r\n                                    key: \"assetid\",\r\n                                    value: this.state.discount,\r\n                                    valueType: \"STRING\",\r\n                                    id: this.state.metaId\r\n                                  }\r\n                                ]\r\n                              };\r\n                              handleSubmit({\r\n                                variables: { input: productVariableInput }\r\n                              });\r\n                            }\r\n                          }\r\n                        ]}\r\n                        secondaryActions={[\r\n                          {\r\n                            content: \"Remove discount\"\r\n                          }\r\n                        ]}\r\n                      />\r\n                    </Form>\r\n                  </Layout.Section>\r\n                </Layout>\r\n              </Page>\r\n            </Frame>\r\n          );\r\n        }}\r\n      </Mutation>\r\n    );\r\n  }\r\n\r\n  handleChange = field => {\r\n    this.setState({metaId: getMeta(this.state.variantId)})\r\n    return value => this.setState({ [field]: value });\r\n  };\r\n\r\n  itemToBeConsumed = () => {\r\n    const item = store.get(\"item\");\r\n    console.log(item);\r\n\r\n    const price = item.handle;\r\n    const variantId = item.id;\r\n    const discounter = price;\r\n    this.setState({ price, variantId });\r\n    return discounter;\r\n  };\r\n}\r\n\r\nexport default EditProduct;\r\n"]},"metadata":{},"sourceType":"module"}