{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport { Query } from \"react-apollo\";\nimport { TextField, Card, Stack, TextStyle, Checkbox, Button } from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  var _useState = useState(''),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var handleChange = useCallback(function (newValue) {\n    return setValue(newValue);\n  }, []);\n\n  var getID = function getID(id) {\n    return setValue(id);\n  };\n\n  return __jsx(\"div\", null, __jsx(Query, {\n    query: props.query,\n    variables: props.id // skip={!breed}\n\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data,\n        refetch = _ref.refetch;\n    if (loading) return null;\n    if (error) return \"Error! \".concat(error);\n    return __jsx(\"div\", null, __jsx(Stack, null, __jsx(Stack.Item, {\n      fill: true\n    }, __jsx(\"h3\", null, __jsx(TextStyle, {\n      variation: \"strong\"\n    }, props.title)))), __jsx(TextField, {\n      value: value,\n      onChange: handleChange // onFocus={getID(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value)}\n      ,\n      id: data.product.id,\n      ariaControls: data.product.id,\n      placeholder: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n      connectedRight: __jsx(Button, {\n        onClick: function onClick() {\n          return console.log(\"Saved\");\n        }\n      }, \"Save\")\n    }));\n  }));\n}\n\nexport default ThreekitForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ThreekitForm.js"],"names":["React","useState","useCallback","Query","TextField","Card","Stack","TextStyle","Checkbox","Button","ThreekitForm","props","value","setValue","handleChange","newValue","getID","id","query","loading","error","data","refetch","title","product","metafield","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,SAAjC,EAA4CC,QAA5C,EAAsDC,MAAtD,QAAoE,kBAApE;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B;AAD2B,kBAEDV,QAAQ,CAAC,EAAD,CAFP;AAAA,MAEpBW,KAFoB;AAAA,MAEbC,QAFa;;AAI3B,MAAMC,YAAY,GAAGZ,WAAW,CAAC,UAACa,QAAD;AAAA,WAAcF,QAAQ,CAACE,QAAD,CAAtB;AAAA,GAAD,EAAmC,EAAnC,CAAhC;;AACA,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,EAAD;AAAA,WAAQJ,QAAQ,CAACI,EAAD,CAAhB;AAAA,GAAd;;AACA,SACE,mBACE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEN,KAAK,CAACO,KADf;AAEE,IAAA,SAAS,EAAEP,KAAK,CAACM,EAFnB,CAGE;;AAHF,KAKG,gBAAuC;AAAA,QAApCE,OAAoC,QAApCA,OAAoC;AAAA,QAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,QAApBC,IAAoB,QAApBA,IAAoB;AAAA,QAAdC,OAAc,QAAdA,OAAc;AACtC,QAAIH,OAAJ,EAAa,OAAO,IAAP;AACb,QAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AAEX,WACE,mBAIE,MAAC,KAAD,QACE,MAAC,KAAD,CAAO,IAAP;AAAY,MAAA,IAAI;AAAhB,OACE,kBACE,MAAC,SAAD;AAAW,MAAA,SAAS,EAAC;AAArB,OAA+BT,KAAK,CAACY,KAArC,CADF,CADF,CADF,CAJF,EAeI,MAAC,SAAD;AACE,MAAA,KAAK,EAAEX,KADT;AAEE,MAAA,QAAQ,EAAEE,YAFZ,CAGE;AAHF;AAIE,MAAA,EAAE,EAAEO,IAAI,CAACG,OAAL,CAAaP,EAJnB;AAKE,MAAA,YAAY,EAAEI,IAAI,CAACG,OAAL,CAAaP,EAL7B;AAME,MAAA,WAAW,EACT,CAACI,IAAI,CAACG,OAAL,CAAaC,SAAd,GACI,gBADJ,GAEIJ,IAAI,CAACG,OAAL,CAAaC,SAAb,CAAuBb,KAT/B;AAWE,MAAA,cAAc,EAAE,MAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAIc,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAJ;AAAA;AAAjB;AAXlB,MAfJ,CADF;AAmCD,GA5CH,CADF,CADF;AAkDD;;AAED,eAAejB,YAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Query } from \"react-apollo\";\nimport { TextField, Card, Stack, TextStyle, Checkbox, Button } from \"@shopify/polaris\";\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState('');\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n  const getID = (id) => setValue(id);\n  return (\n    <div>\n      <Query\n        query={props.query}\n        variables={props.id}\n        // skip={!breed}\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n          \n          return (\n            <div>\n              {/* <Card title={props.title}> */}\n              {/* {console.log(data)} */}\n        \n              <Stack>\n                <Stack.Item fill>\n                  <h3>\n                    <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                  </h3>\n             \n  \n                </Stack.Item>\n              </Stack>\n              {/* Catch the error for no IDS */}\n             \n                <TextField\n                  value={value} \n                  onChange={handleChange}\n                  // onFocus={getID(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value)}\n                  id={data.product.id}\n                  ariaControls={data.product.id}\n                  placeholder={\n                    !data.product.metafield\n                      ? \"No Threekit ID\"\n                      : data.product.metafield.value\n                  }\n                  connectedRight={<Button onClick={()=>console.log(\"Saved\")}>Save</Button>}\n                ></TextField>\n             \n\n              {/* <button onClick={() => refetch()}>Refetch!</button> */}\n              {/* </Card> */}\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"]},"metadata":{},"sourceType":"module"}