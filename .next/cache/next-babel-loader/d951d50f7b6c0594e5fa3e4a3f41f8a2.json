{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from \"graphql-tag\";\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail, TextField, Button, Collapsible, TextContainer } from \"@shopify/polaris\";\nimport store from \"store-js\";\nimport ThreekitForm from './ThreekitForm';\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport { Context } from \"@shopify/app-bridge-react\";\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GET_TK_PRODUCT_IDS = gql`\n  query {\n    shop {\n      metafield(namespace: \"threekit\", key: \"items\") {\n        id\n        value\n      }\n    }\n  }\n`;\nconst GET_TK_ASSET_ID = gql`\n  query($id: ID!) {\n    product(id: $id) {\n      metafield(namespace: \"threekit\", key: \"assetid\") {\n        value\n        id\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      ids: [],\n      tkId: {},\n      field: \"\",\n      active: false,\n      setActive: true\n    });\n\n    _defineProperty(this, \"_queryMe\", data => {\n      if (data.shop.metafield == null) {\n        return null;\n      } else {\n        const str = JSON.parse(data.shop.metafield.value);\n        let arr;\n        arr = str.ids.split(\",\");\n        this.setState({\n          ids: arr.map(id => \"gid://shopify/Product/\" + id)\n        });\n      }\n    });\n\n    _defineProperty(this, \"_setTkID\", data => {\n      this.setState({\n        tkId: data\n      });\n      console.log(data);\n    });\n\n    _defineProperty(this, \"getTkAsset\", () => {\n      return __jsx(Query, {\n        query: GET_TK_ASSET_ID,\n        onCompleted: data => this._setTkID(data)\n      }, () => {\n        console.log(\"set\");\n        console.log(this.state);\n        return null;\n      });\n    });\n\n    _defineProperty(this, \"handleTKChange\", e => {\n      this.setState({\n        field: e\n      });\n      console.log(this.state); // console.log(e.target)\n    });\n\n    _defineProperty(this, \"handleToggle\", () => !this.state.active ? this.setState({\n      active: true\n    }) : this.setState({\n      active: false\n    }));\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\n    };\n\n    const TkEditForm = ({\n      id\n    }) => __jsx(Query, {\n      query: GET_TK_ASSET_ID,\n      variables: {\n        id\n      } // skip={!breed}\n\n    }, ({\n      loading,\n      error,\n      data,\n      refetch\n    }) => {\n      if (loading) return null;\n      if (error) return `Error! ${error}`;\n      return __jsx(\"div\", null, console.log(data), __jsx(TextField, {\n        value: this.state.field,\n        id: data.product.id,\n        ariaControls: data.product.id,\n        placeholder: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n        onChange: this.handleTKChange\n      }), __jsx(\"button\", {\n        onClick: () => refetch()\n      }, \"Refetch!\"));\n    });\n\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_TK_PRODUCT_IDS,\n      onCompleted: data => this._queryMe(data)\n    }, () => {\n      return __jsx(\"div\", null, \"\");\n    }), \" \", __jsx(Query, {\n      query: GET_PRODUCTS_BY_ID,\n      variables: {\n        ids: store.get(\"ids\")\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n      if (error) return __jsx(\"div\", null, error.message);\n      console.log(data);\n      return __jsx(Card, {\n        sectioned: true\n      }, __jsx(ResourceList, {\n        showHeader: true,\n        resourceName: {\n          singular: \"Product\",\n          plural: \"Products\"\n        },\n        items: data.nodes,\n        renderItem: item => {\n          const media = __jsx(Thumbnail, {\n            source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : \"\",\n            alt: item.images.edges[0] ? item.images.edges[0].node.altText : \"\"\n          });\n\n          const price = item.variants.edges[0].node.price;\n          return __jsx(ResourceList.Item, {\n            id: item.id,\n            media: media,\n            accessibilityLabel: `View details for ${item.title}`,\n            onClick: () => {\n              console.log(item);\n            }\n          }, __jsx(Stack, {\n            vertical: true\n          }, __jsx(Stack.Item, {\n            fill: true\n          }, __jsx(\"h3\", null, __jsx(TextStyle, {\n            variation: \"strong\"\n          }, item.title))), __jsx(Button, {\n            onClick: this.handleToggle,\n            ariaExpanded: this.state.active,\n            ariaControls: item.id\n          }, \"Toggle\"), __jsx(Collapsible, {\n            open: this.state.active,\n            id: item.id,\n            transition: {\n              duration: \"150ms\",\n              timingFunction: \"ease\"\n            }\n          }, __jsx(Stack.Item, null, __jsx(ThreekitForm, null), __jsx(TkEditForm, {\n            id: item.id\n          })), __jsx(Stack.Item, null, __jsx(Button, null, \"Save\")))));\n        }\n      }));\n    }));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ResourceList.js"],"names":["gql","Query","ApolloConsumer","Card","ResourceList","Stack","TextStyle","Thumbnail","TextField","Button","Collapsible","TextContainer","store","ThreekitForm","Redirect","Context","GET_PRODUCTS_BY_ID","GET_TK_PRODUCT_IDS","GET_TK_ASSET_ID","ResourceListWithProducts","React","Component","ids","tkId","field","active","setActive","data","shop","metafield","str","JSON","parse","value","arr","split","setState","map","id","console","log","_setTkID","state","e","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","TkEditForm","loading","error","refetch","product","handleTKChange","_queryMe","get","message","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","title","handleToggle","duration","timingFunction"],"mappings":"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","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { Query, ApolloConsumer } from \"react-apollo\";\r\nimport {\r\n  Card,\r\n  ResourceList,\r\n  Stack,\r\n  TextStyle,\r\n  Thumbnail,\r\n  TextField,\r\n  Button,\r\n  Collapsible,\r\n  TextContainer\r\n} from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport ThreekitForm from './ThreekitForm'\r\nimport { Redirect } from \"@shopify/app-bridge/actions\";\r\nimport { Context } from \"@shopify/app-bridge-react\";\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!) {\r\n    nodes(ids: $ids) {\r\n      ... on Product {\r\n        title\r\n        handle\r\n        descriptionHtml\r\n        id\r\n        images(first: 1) {\r\n          edges {\r\n            node {\r\n              originalSrc\r\n              altText\r\n            }\r\n          }\r\n        }\r\n        variants(first: 1) {\r\n          edges {\r\n            node {\r\n              price\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_PRODUCT_IDS = gql`\r\n  query {\r\n    shop {\r\n      metafield(namespace: \"threekit\", key: \"items\") {\r\n        id\r\n        value\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_ASSET_ID = gql`\r\n  query($id: ID!) {\r\n    product(id: $id) {\r\n      metafield(namespace: \"threekit\", key: \"assetid\") {\r\n        value\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass ResourceListWithProducts extends React.Component {\r\n  state = {\r\n    ids: [],\r\n    tkId: {},\r\n    field: \"\",\r\n    active: false,\r\n    setActive: true\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null) {\r\n      return null;\r\n    } else {\r\n      const str = JSON.parse(data.shop.metafield.value);\r\n      let arr;\r\n      arr = str.ids.split(\",\");\r\n\r\n      this.setState({\r\n        ids: arr.map(id => \"gid://shopify/Product/\" + id)\r\n      });\r\n    }\r\n  };\r\n\r\n  _setTkID = data => {\r\n    this.setState({\r\n      tkId: data\r\n    });\r\n    console.log(data);\r\n  };\r\n\r\n  getTkAsset = () => {\r\n    return (\r\n      <Query query={GET_TK_ASSET_ID} onCompleted={data => this._setTkID(data)}>\r\n        {() => {\r\n          console.log(\"set\");\r\n          console.log(this.state);\r\n          return null;\r\n        }}\r\n      </Query>\r\n    );\r\n  };\r\n\r\n  handleTKChange = e => {\r\n    this.setState({\r\n      field: e\r\n    });\r\n    console.log(this.state)\r\n    // console.log(e.target)\r\n  };\r\n\r\n  handleToggle = () =>\r\n    !this.state.active\r\n      ? this.setState({ active: true })\r\n      : this.setState({ active: false });\r\n\r\n  static contextType = Context;\r\n  render() {\r\n    const app = this.context;\r\n    const redirectToProduct = () => {\r\n      const redirect = Redirect.create(app);\r\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\r\n    };\r\n\r\n    const TkEditForm = ({ id }) => (\r\n      <Query\r\n        query={GET_TK_ASSET_ID}\r\n        variables={{ id }}\r\n        // skip={!breed}\r\n      >\r\n        {({ loading, error, data, refetch }) => {\r\n          if (loading) return null;\r\n          if (error) return `Error! ${error}`;\r\n\r\n          return (\r\n            <div>\r\n              {console.log(data)}\r\n\r\n              {/* Catch the error for no IDS */}\r\n              <TextField\r\n                value={this.state.field}\r\n                id={data.product.id}\r\n                ariaControls={data.product.id}\r\n                placeholder={\r\n                  !data.product.metafield\r\n                    ? \"No Threekit ID\"\r\n                    : data.product.metafield.value\r\n                }\r\n                onChange={this.handleTKChange}\r\n              ></TextField>\r\n              <button onClick={() => refetch()}>Refetch!</button>\r\n            </div>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Query\r\n          query={GET_TK_PRODUCT_IDS}\r\n          onCompleted={data => this._queryMe(data)}\r\n        >\r\n          {() => {\r\n            return <div>{\"\"}</div>;\r\n          }}\r\n        </Query>{\" \"}\r\n        {/* this.state.ids */}\r\n        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get(\"ids\") }}>\r\n          {({ data, loading, error }) => {\r\n            if (loading) return <div>Loading…</div>;\r\n            if (error) return <div>{error.message}</div>;\r\n            console.log(data);\r\n            return (\r\n              <Card sectioned>\r\n                <ResourceList\r\n                  showHeader\r\n                  resourceName={{\r\n                    singular: \"Product\",\r\n                    plural: \"Products\"\r\n                  }}\r\n                  items={data.nodes}\r\n                  renderItem={item => {\r\n                    const media = (\r\n                      <Thumbnail\r\n                        source={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.originalSrc\r\n                            : \"\"\r\n                        }\r\n                        alt={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.altText\r\n                            : \"\"\r\n                        }\r\n                      />\r\n                    );\r\n                    const price = item.variants.edges[0].node.price;\r\n                    return (\r\n                      <ResourceList.Item\r\n                        id={item.id}\r\n                        media={media}\r\n                        accessibilityLabel={`View details for ${item.title}`}\r\n                        onClick={() => {\r\n                          console.log(item);\r\n                        }}\r\n                      >\r\n                        <Stack vertical>\r\n                          <Stack.Item fill>\r\n                            <h3>\r\n                              <TextStyle variation=\"strong\">\r\n                                {item.title}\r\n                              </TextStyle>\r\n                            </h3>\r\n                          </Stack.Item>\r\n                          <Button\r\n                            onClick={this.handleToggle}\r\n                            ariaExpanded={this.state.active}\r\n                            ariaControls={item.id}\r\n                          >\r\n                            Toggle\r\n                          </Button>\r\n                          <Collapsible\r\n                            open={this.state.active}\r\n                            id={item.id}\r\n                            transition={{\r\n                              duration: \"150ms\",\r\n                              timingFunction: \"ease\"\r\n                            }}\r\n                          >\r\n                            <Stack.Item>\r\n                            <ThreekitForm/>\r\n                              <TkEditForm id={item.id} />\r\n                            </Stack.Item>\r\n                            <Stack.Item>\r\n                              <Button>Save</Button>\r\n                            </Stack.Item>\r\n                          </Collapsible>\r\n                        </Stack>\r\n                      </ResourceList.Item>\r\n                    );\r\n                  }}\r\n                />\r\n              </Card>\r\n            );\r\n          }}\r\n        </Query>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceListWithProducts;\r\n"]},"metadata":{},"sourceType":"module"}