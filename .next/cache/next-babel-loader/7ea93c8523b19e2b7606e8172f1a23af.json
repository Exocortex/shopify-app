{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Banner, Card, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Toast } from \"@shopify/polaris\";\nimport store from \"store-js\";\nimport gql from \"graphql-tag\";\nimport { Mutation, Query, useQuery } from \"react-apollo\";\nlet metaId = \"\";\nlet tktempid = \"\";\nconst UPDATE_PRICE = gql`\n  mutation($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        metafields(first: 100) {\n          edges {\n            node {\n              id\n              namespace\n              key\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GET_META_ID = gql`\nquery($id: ID!) {\n  product(id: $id) {\n    metafield(namespace: \"threekit\", key: \"assetid\") {\n      value\n      id\n    }\n  }\n}\n`;\n\nclass EditProduct extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      tkid: \"\",\n      price: \"\",\n      variantId: \"\",\n      showToast: false,\n      metaId: \"\"\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"itemToBeConsumed\", () => {\n      const item = store.get(\"item\");\n      console.log(item);\n      const price = item.handle;\n      const variantId = item.id;\n      const discounter = price;\n      this.setState({\n        price,\n        variantId\n      });\n      return discounter;\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      tkid: this.itemToBeConsumed()\n    });\n  }\n\n  render() {\n    const {\n      name,\n      price,\n      tkid,\n      variantId\n    } = this.state;\n\n    function getMeta(proId) {\n      const {\n        loading,\n        error,\n        data\n      } = useQuery(GET_META_ID, {\n        variables: {\n          id: proId\n        }\n      });\n      if (loading) return null;\n      if (error) return `Error! ${error}`;\n      console.log(data);\n\n      if (data.product.metafield == null) {\n        return null;\n      } else {\n        metaId = data.product.metafield.id;\n        tktempid = data.product.metafield.value;\n        return data;\n      }\n\n      ;\n    }\n\n    return __jsx(Mutation, {\n      mutation: UPDATE_PRICE\n    }, (handleSubmit, {\n      error,\n      data\n    }) => {\n      const showError = error && __jsx(Banner, {\n        status: \"critical\"\n      }, error.message);\n\n      const showToast = data && data.productVariantUpdate && __jsx(Toast, {\n        content: \"Sucessfully updated\",\n        onDismiss: () => this.setState({\n          showToast: false\n        })\n      });\n\n      return __jsx(Frame, null, __jsx(Page, null, __jsx(Layout, null, showToast, __jsx(Layout.Section, null, showError), __jsx(Layout.Section, null, __jsx(DisplayText, {\n        size: \"large\"\n      }, name), __jsx(Form, null, __jsx(Card, {\n        sectioned: true\n      }, __jsx(\"p\", null, JSON.stringify(getMeta(this.state.variantId))), __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        prefix: \"Threekit Asset ID\",\n        value: tkid,\n        onChange: this.handleChange(\"tkid\"),\n        label: \"Enter your Threekit Asset ID\",\n        type: \"text\"\n      })), __jsx(\"p\", null, \"This sale price will expire in two weeks\"))), __jsx(PageActions, {\n        primaryAction: [{\n          content: \"Save\",\n          onAction: () => {\n            let productVariableInput;\n\n            if (metaId == \"\") {\n              productVariableInput = {\n                id: this.state.variantId,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: this.state.tkid,\n                  valueType: \"STRING\"\n                }]\n              };\n            } else {\n              productVariableInput = {\n                id: this.state.variantId,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: this.state.tkid,\n                  valueType: \"STRING\",\n                  id: metaId\n                }]\n              };\n            }\n\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            });\n          }\n        }],\n        secondaryActions: [{\n          content: \"Remove discount\"\n        }]\n      }))))));\n    });\n  }\n\n}\n\nexport default EditProduct;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/pages/edit-products.js"],"names":["Banner","Card","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Toast","store","gql","Mutation","Query","useQuery","metaId","tktempid","UPDATE_PRICE","GET_META_ID","EditProduct","React","Component","tkid","price","variantId","showToast","field","value","setState","item","get","console","log","handle","id","discounter","componentDidMount","itemToBeConsumed","render","name","state","getMeta","proId","loading","error","data","variables","product","metafield","handleSubmit","showError","message","productVariantUpdate","JSON","stringify","handleChange","content","onAction","productVariableInput","metafields","namespace","key","valueType","input"],"mappings":"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","sourcesContent":["import {\r\n  Banner,\r\n  Card,\r\n  DisplayText,\r\n  Form,\r\n  FormLayout,\r\n  Frame,\r\n  Layout,\r\n  Page,\r\n  PageActions,\r\n  TextField,\r\n  Toast\r\n} from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation, Query, useQuery } from \"react-apollo\";\r\n\r\nlet metaId = \"\";\r\nlet tktempid = \"\";\r\n\r\nconst UPDATE_PRICE = gql`\r\n  mutation($input: ProductInput!) {\r\n    productUpdate(input: $input) {\r\n      product {\r\n        metafields(first: 100) {\r\n          edges {\r\n            node {\r\n              id\r\n              namespace\r\n              key\r\n              value\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_META_ID = gql`\r\nquery($id: ID!) {\r\n  product(id: $id) {\r\n    metafield(namespace: \"threekit\", key: \"assetid\") {\r\n      value\r\n      id\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\n\r\n\r\nclass EditProduct extends React.Component {\r\n  \r\n  state = {\r\n    tkid: \"\",\r\n    price: \"\",\r\n    variantId: \"\",\r\n    showToast: false,\r\n    metaId: \"\"\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.setState({ tkid: this.itemToBeConsumed() });\r\n  }\r\n  \r\n\r\n  render() {\r\n    const { name, price, tkid, variantId } = this.state;\r\n\r\n\r\n    function getMeta(proId) {\r\n      const { loading, error, data } = useQuery(GET_META_ID, {\r\n        variables: {id: proId}\r\n      });\r\n\r\n      if (loading) return null;\r\n      if (error) return `Error! ${error}`;\r\n      console.log(data)\r\n      if(data.product.metafield == null) {return null} else{\r\n        metaId = data.product.metafield.id;\r\n        tktempid = data.product.metafield.value;\r\n        return data;\r\n      };\r\n    }\r\n\r\n \r\n\r\n\r\n    return (\r\n      \r\n      <Mutation mutation={UPDATE_PRICE}>\r\n        {(handleSubmit, { error, data }) => {\r\n          const showError = error && (\r\n            <Banner status=\"critical\">{error.message}</Banner>\r\n          );\r\n          const showToast = data && data.productVariantUpdate && (\r\n            <Toast\r\n              content=\"Sucessfully updated\"\r\n              onDismiss={() => this.setState({ showToast: false })}\r\n            />\r\n          );\r\n\r\n\r\n          return (\r\n            <Frame>\r\n              <Page>\r\n                <Layout>\r\n                  {showToast}\r\n                  <Layout.Section>{showError}</Layout.Section>\r\n                  <Layout.Section>\r\n                    <DisplayText size=\"large\">{name}</DisplayText>\r\n                    <Form>\r\n                      <Card sectioned>\r\n                        <p>{JSON.stringify(getMeta(this.state.variantId))}</p>\r\n                        <FormLayout>\r\n                          <FormLayout.Group>\r\n                            <TextField\r\n                              prefix=\"Threekit Asset ID\"\r\n                              value={tkid}\r\n                              onChange={this.handleChange(\"tkid\")}\r\n                              label=\"Enter your Threekit Asset ID\"\r\n                              type=\"text\"\r\n                            />\r\n                          </FormLayout.Group>\r\n                          <p>This sale price will expire in two weeks</p>\r\n                        </FormLayout>\r\n                      </Card>\r\n                      <PageActions\r\n                        primaryAction={[\r\n                          {\r\n                            content: \"Save\",\r\n                            onAction: () => {\r\n                              let productVariableInput;\r\n                              if (metaId == \"\"){\r\n                                productVariableInput = {\r\n                                  id: this.state.variantId,\r\n                                  metafields: [\r\n                                    {\r\n                                      namespace: \"threekit\",\r\n                                      key: \"assetid\",\r\n                                      value: this.state.tkid,\r\n                                      valueType: \"STRING\"\r\n                                    }\r\n                                  ]\r\n                                };\r\n                              } else {\r\n                                productVariableInput = {\r\n                                  id: this.state.variantId,\r\n                                  metafields: [\r\n                                    {\r\n                                      namespace: \"threekit\",\r\n                                      key: \"assetid\",\r\n                                      value: this.state.tkid,\r\n                                      valueType: \"STRING\",\r\n                                      id: metaId\r\n                                    }\r\n                                  ]\r\n                                };\r\n                              }\r\n                              \r\n                              handleSubmit({\r\n                                variables: { input: productVariableInput }\r\n                              });\r\n                            }\r\n                          }\r\n                        ]}\r\n                        secondaryActions={[\r\n                          {\r\n                            content: \"Remove discount\"\r\n                          }\r\n                        ]}\r\n                      />\r\n                    </Form>\r\n                  </Layout.Section>\r\n                </Layout>\r\n              </Page>\r\n            </Frame>\r\n          );\r\n        }}\r\n      </Mutation>\r\n    );\r\n  }\r\n\r\n  handleChange = field => {\r\n    return value => this.setState({ [field]: value });\r\n  };\r\n\r\n  itemToBeConsumed = () => {\r\n    const item = store.get(\"item\");\r\n    console.log(item);\r\n\r\n    const price = item.handle;\r\n    const variantId = item.id;\r\n    const discounter = price;\r\n    this.setState({ price, variantId });\r\n    return discounter;\r\n  };\r\n}\r\n\r\nexport default EditProduct;\r\n"]},"metadata":{},"sourceType":"module"}