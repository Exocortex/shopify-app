{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation($input: ProductInput!) {\\n      productUpdate(input: $input) {\\n        product {\\n          metafields(first: 100) {\\n            edges {\\n              node {\\n                id\\n                namespace\\n                key\\n                value\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    query($id: ID!) {\\n      product(id: $id) {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"ARen\\\") {\\n          value\\n          id\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query($id: ID!) {\\n      product(id: $id) {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"pdp\\\") {\\n          value\\n          id\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query($id: ID!) {\\n      product(id: $id) {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"assetid\\\") {\\n          value\\n          id\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation($input: ProductInput!) {\\n      productUpdate(input: $input) {\\n        product {\\n          metafields(first: 100) {\\n            edges {\\n              node {\\n                id\\n                namespace\\n                key\\n                value\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Banner, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Card, Stack, TextStyle, Checkbox, Button, Toast, SkeletonPage, SkeletonBodyText, Spinner, Loading } from \"@shopify/polaris\";\nimport { LoadingText } from \"../components/Loading\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  var _useState = useState(\"\"),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(),\n      tkMetaId = _useState2[0],\n      setTkMetaId = _useState2[1];\n\n  var _useState3 = useState(false),\n      isSaved = _useState3[0],\n      setIsSaved = _useState3[1];\n\n  var _useState4 = useState({}),\n      isPdp = _useState4[0],\n      setIsPdp = _useState4[1];\n\n  var _useState5 = useState(false),\n      isChecked = _useState5[0],\n      setIsChecked = _useState5[1];\n\n  var _useState6 = useState({}),\n      isAr = _useState6[0],\n      setIsAr = _useState6[1];\n\n  var _useState7 = useState(false),\n      arChecked = _useState7[0],\n      setArChecked = _useState7[1];\n\n  var UPDATE_TK_ID = gql(_templateObject());\n  var GET_META_ID = gql(_templateObject2());\n  var IS_PLAYER_PDP = gql(_templateObject3());\n  var IS_AR_ENABLED = gql(_templateObject4());\n  var UPDATE_TK_ATTR = gql(_templateObject5());\n  var handleChange = useCallback(function (newValue) {\n    return setValue(newValue);\n  }, []);\n\n  var setCheck = function setCheck(val) {\n    return setIsChecked(val);\n  };\n\n  var setArCheck = function setArCheck(val) {\n    return setArChecked(val);\n  }; // const LoadingScreen = function() {\n  //   return (\n  //     <SkeletonPage primaryAction>\n  //       <SkeletonBodyText />\n  //     </SkeletonPage>\n  //   );\n  // };\n\n\n  var _createTKimage = function _createTKimage(id) {\n    var formatId = function formatId(id) {\n      return id.split(\"Product/\")[1];\n    };\n\n    var getImgObj = function getImgObj(id) {\n      var fetchUrl = \"/api/images/\" + formatId(id);\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        // console.log(json.data.metafields)\n        // this.setState({tkMetaId: json.data})\n        console.log(json); // setProdImg(json.data);\n      });\n    };\n\n    getImgObj(id); // isPdp ? console.log(\"Yes this is a PDP tk item\") : console.log(\"No this is not a PDP item\");\n  };\n\n  var updateMeta = function updateMeta(data, bool, namespace, key, obj, action) {\n    var productVariableInput;\n\n    if (!data.product.metafield) {\n      bool ? productVariableInput = {\n        id: props.id.id,\n        metafields: [{\n          namespace: namespace,\n          key: key,\n          value: \"false\",\n          valueType: \"STRING\"\n        }]\n      } : productVariableInput = {\n        id: props.id.id,\n        metafields: [{\n          namespace: namespace,\n          key: key,\n          value: \"true\",\n          valueType: \"STRING\"\n        }]\n      };\n    } else {\n      bool ? productVariableInput = {\n        id: props.id.id,\n        metafields: [{\n          namespace: namespace,\n          key: key,\n          value: \"false\",\n          valueType: \"STRING\",\n          id: obj.product.metafield.id\n        }]\n      } : productVariableInput = {\n        id: props.id.id,\n        metafields: [{\n          namespace: namespace,\n          key: key,\n          value: \"true\",\n          valueType: \"STRING\",\n          id: obj.product.metafield.id\n        }]\n      };\n    }\n\n    action({\n      variables: {\n        input: productVariableInput\n      }\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(Stack, null, __jsx(Query, {\n    query: props.query,\n    variables: props.id\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data,\n        refetch = _ref.refetch;\n    if (loading) return __jsx(LoadingText, null);\n    if (error) return \"Error! \".concat(error);\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_META_ID,\n      variables: props.id,\n      onCompleted: function onCompleted(data) {\n        return setTkMetaId(data);\n      }\n    }, function (_ref2) {\n      var loading = _ref2.loading,\n          error = _ref2.error,\n          data = _ref2.data,\n          refetch = _ref2.refetch;\n      if (loading) return null;\n      if (error) return \"Error! \".concat(error);\n      return null;\n    }), __jsx(Stack.Item, null, __jsx(\"h3\", null, __jsx(TextStyle, {\n      variation: \"strong\"\n    }, props.title))), __jsx(Stack.Item, null, __jsx(Mutation, {\n      mutation: UPDATE_TK_ID,\n      onCompleted: function onCompleted() {\n        return setIsSaved(true);\n      }\n    }, function (handleSubmit, _ref3) {\n      var err = _ref3.err,\n          res = _ref3.res;\n\n      var showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      return __jsx(\"div\", null, !isSaved ? __jsx(\"div\", null) : __jsx(Toast, {\n        content: \"Saved\",\n        onDismiss: function onDismiss() {\n          return setIsSaved(false);\n        }\n      }), __jsx(Layout.Section, null, showError), __jsx(Form, null, __jsx(FormLayout, null, __jsx(TextField, {\n        value: value,\n        onFocus: function onFocus() {\n          return setValue(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value);\n        },\n        onChange: handleChange,\n        id: data.product.id,\n        ariaControls: data.product.id,\n        placeholder: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n        connectedRight: __jsx(\"div\", null, __jsx(Button, {\n          onClick: function onClick() {\n            var productVariableInput;\n\n            if (!data.product.metafield) {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\"\n                }]\n              };\n            } else {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\",\n                  id: tkMetaId.product.metafield.id\n                }]\n              };\n            }\n\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            } // _createTKimage(props.id.id)\n            );\n          }\n        }, \"Save\"))\n      }))));\n    })));\n  }), __jsx(Stack.Item, null, __jsx(Query, {\n    query: IS_PLAYER_PDP,\n    variables: props.id,\n    onCompleted: function onCompleted(data) {\n      return setIsPdp(data);\n    }\n  }, function (_ref4) {\n    var loading = _ref4.loading,\n        error = _ref4.error,\n        data = _ref4.data,\n        refetch = _ref4.refetch;\n    if (loading) return __jsx(LoadingText, null);\n    if (error) return \"Error! \".concat(error);\n    console.log(data);\n    return __jsx(Mutation, {\n      mutation: UPDATE_TK_ATTR,\n      onCompleted: function onCompleted() {\n        return setIsSaved(true);\n      }\n    }, function (handleSubmit, _ref5) {\n      var err = _ref5.err,\n          res = _ref5.res;\n\n      var showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      if (!data.product.metafield || data.product.metafield.value == \"false\") {\n        useEffect(function () {\n          setIsChecked(false);\n        }, [setIsChecked]);\n      } else {\n        useEffect(function () {\n          setIsChecked(true);\n        }, [setIsChecked]);\n      }\n\n      return __jsx(\"div\", null, __jsx(Checkbox, {\n        label: \"Display on PDP\",\n        checked: isChecked,\n        onChange: function onChange() {\n          return updateMeta(data, isChecked, \"threekit\", \"pdp\", isPdp, handleSubmit);\n        },\n        onFocus: function onFocus() {\n          return isChecked ? setCheck(false) : setCheck(true);\n        }\n      }));\n    });\n  })), __jsx(Stack.Item, null, __jsx(Query, {\n    query: IS_AR_ENABLED,\n    variables: props.id,\n    onCompleted: function onCompleted(data) {\n      return setIsAr(data);\n    }\n  }, function (_ref6) {\n    var loading = _ref6.loading,\n        error = _ref6.error,\n        data = _ref6.data,\n        refetch = _ref6.refetch;\n    if (loading) return __jsx(LoadingText, null);\n    if (error) return \"Error! \".concat(error);\n    console.log(data);\n    return (// <div>hi</div>\n      __jsx(Mutation, {\n        mutation: UPDATE_TK_ATTR,\n        onCompleted: function onCompleted() {\n          return setIsSaved(true);\n        }\n      }, function (handleArSubmit, _ref7) {\n        var err = _ref7.err,\n            res = _ref7.res;\n\n        var showError = err && __jsx(Banner, {\n          status: \"critical\"\n        }, err.message);\n\n        if (!data.product.metafield || data.product.metafield.value == \"false\") {\n          useEffect(function () {\n            setArChecked(false);\n          }, [setArChecked]);\n        } else {\n          useEffect(function () {\n            setArChecked(true);\n          }, [setArChecked]);\n        }\n\n        return __jsx(\"div\", null, __jsx(Checkbox, {\n          label: \"AR Enabled\",\n          checked: arChecked,\n          onChange: function onChange() {\n            return updateMeta(data, arChecked, \"threekit\", \"ARen\", isAr, handleArSubmit);\n          },\n          onFocus: function onFocus() {\n            return arChecked ? setArCheck(false) : setArCheck(true);\n          }\n        }));\n      })\n    );\n  }))));\n}\n\nexport default ThreekitForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ThreekitForm.js"],"names":["React","useState","useCallback","useEffect","Query","Mutation","gql","Banner","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Card","Stack","TextStyle","Checkbox","Button","Toast","SkeletonPage","SkeletonBodyText","Spinner","Loading","LoadingText","ThreekitForm","props","value","setValue","tkMetaId","setTkMetaId","isSaved","setIsSaved","isPdp","setIsPdp","isChecked","setIsChecked","isAr","setIsAr","arChecked","setArChecked","UPDATE_TK_ID","GET_META_ID","IS_PLAYER_PDP","IS_AR_ENABLED","UPDATE_TK_ATTR","handleChange","newValue","setCheck","val","setArCheck","_createTKimage","id","formatId","split","getImgObj","fetchUrl","method","fetch","then","response","json","console","log","updateMeta","data","bool","namespace","key","obj","action","productVariableInput","product","metafield","metafields","valueType","variables","input","query","loading","error","refetch","title","handleSubmit","err","res","showError","message","handleArSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  DisplayText,\n  Form,\n  FormLayout,\n  Frame,\n  Layout,\n  Page,\n  PageActions,\n  TextField,\n  Card,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button,\n  Toast,\n  SkeletonPage,\n  SkeletonBodyText,\n  Spinner,\n  Loading\n} from \"@shopify/polaris\";\nimport { LoadingText } from \"../components/Loading\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [tkMetaId, setTkMetaId] = useState();\n  const [isSaved, setIsSaved] = useState(false);\n\n  const [isPdp, setIsPdp] = useState({});\n  const [isChecked, setIsChecked] = useState(false);\n\n  const [isAr, setIsAr] = useState({});\n  const [arChecked, setArChecked] = useState(false);\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_PLAYER_PDP = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"pdp\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_AR_ENABLED = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"ARen\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const UPDATE_TK_ATTR = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n\n  const setCheck = val => setIsChecked(val);\n  const setArCheck = val => setArChecked(val);\n\n  // const LoadingScreen = function() {\n  //   return (\n  //     <SkeletonPage primaryAction>\n  //       <SkeletonBodyText />\n  //     </SkeletonPage>\n  //   );\n  // };\n\n  const _createTKimage = id => {\n    const formatId = id => id.split(\"Product/\")[1];\n\n    const getImgObj = id => {\n      var fetchUrl = \"/api/images/\" + formatId(id);\n      var method = \"GET\";\n      fetch(fetchUrl, { method: method })\n        .then(response => response.json())\n        .then(json => {\n          // console.log(json.data.metafields)\n          // this.setState({tkMetaId: json.data})\n          console.log(json);\n          // setProdImg(json.data);\n        });\n    };\n    getImgObj(id);\n    // isPdp ? console.log(\"Yes this is a PDP tk item\") : console.log(\"No this is not a PDP item\");\n  };\n\n  const updateMeta = (data, bool, namespace, key, obj, action) => {\n    let productVariableInput;\n    if (!data.product.metafield) {\n      bool\n        ? (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"false\",\n                valueType: \"STRING\"\n              }\n            ]\n          })\n        : (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"true\",\n                valueType: \"STRING\"\n              }\n            ]\n          });\n    } else {\n      bool\n        ? (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"false\",\n                valueType: \"STRING\",\n                id: obj.product.metafield.id\n              }\n            ]\n          })\n        : (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"true\",\n                valueType: \"STRING\",\n                id: obj.product.metafield.id\n              }\n            ]\n          });\n    }\n\n    action({\n      variables: {\n        input: productVariableInput\n      }\n    });\n  };\n  return (\n    <div>\n      <Stack>\n        <Query query={props.query} variables={props.id}>\n          {({ loading, error, data, refetch }) => {\n            if (loading) return <LoadingText />;\n            if (error) return `Error! ${error}`;\n\n            return (\n              <div>\n                <Query\n                  query={GET_META_ID}\n                  variables={props.id}\n                  onCompleted={data => setTkMetaId(data)}\n                >\n                  {({ loading, error, data, refetch }) => {\n                    if (loading) return null;\n                    if (error) return `Error! ${error}`;\n\n                    return null;\n                  }}\n                </Query>\n\n                <Stack.Item>\n                  <h3>\n                    <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                  </h3>\n                </Stack.Item>\n\n                <Stack.Item>\n                  <Mutation\n                    mutation={UPDATE_TK_ID}\n                    onCompleted={() => setIsSaved(true)}\n                  >\n                    {(handleSubmit, { err, res }) => {\n                      const showError = err && (\n                        <Banner status=\"critical\">{err.message}</Banner>\n                      );\n\n                      return (\n                        <div>\n                          {/* <Frame> */}\n                          {/* <Page> */}\n                            {/* <Layout> */}\n                            {!isSaved ? (\n                              <div></div>\n                            ) : (\n                              <Toast\n                                content=\"Saved\"\n                                onDismiss={() => setIsSaved(false)}\n                              ></Toast>\n                            )}\n\n                            <Layout.Section>{showError}</Layout.Section>\n                            {/* <Layout.Section> */}\n\n                            <Form>\n                              <FormLayout>\n                                {/* <FormLayout.Group> */}\n                                  <TextField\n                                    value={value}\n                                    onFocus={() =>\n                                      setValue(\n                                        !data.product.metafield\n                                          ? \"No Threekit ID\"\n                                          : data.product.metafield.value\n                                      )\n                                    }\n                                    onChange={handleChange}\n                                    id={data.product.id}\n                                    ariaControls={data.product.id}\n                                    placeholder={\n                                      !data.product.metafield\n                                        ? \"No Threekit ID\"\n                                        : data.product.metafield.value\n                                    }\n                                    connectedRight={\n                                      <div>\n                                        <Button\n                                          onClick={() => {\n                                            let productVariableInput;\n                                            if (!data.product.metafield) {\n                                              productVariableInput = {\n                                                id: props.id.id,\n                                                metafields: [\n                                                  {\n                                                    namespace: \"threekit\",\n                                                    key: \"assetid\",\n                                                    value: value,\n                                                    valueType: \"STRING\"\n                                                  }\n                                                ]\n                                              };\n                                            } else {\n                                              productVariableInput = {\n                                                id: props.id.id,\n                                                metafields: [\n                                                  {\n                                                    namespace: \"threekit\",\n                                                    key: \"assetid\",\n                                                    value: value,\n                                                    valueType: \"STRING\",\n                                                    id:\n                                                      tkMetaId.product.metafield\n                                                        .id\n                                                  }\n                                                ]\n                                              };\n                                            }\n\n                                            handleSubmit(\n                                              {\n                                                variables: {\n                                                  input: productVariableInput\n                                                }\n                                              }\n\n                                              // _createTKimage(props.id.id)\n                                            );\n                                          }}\n                                        >\n                                          Save\n                                        </Button>\n                                      </div>\n                                    }\n                                  ></TextField>\n                                {/* </FormLayout.Group> */}\n                              </FormLayout>\n                            </Form>\n                          {/* </Page> */}\n                          {/* </Frame> */}\n                        </div>\n                      );\n                    }}\n                  </Mutation>\n                </Stack.Item>\n              </div>\n            );\n          }}\n        </Query>\n        <Stack.Item>\n          <Query\n            query={IS_PLAYER_PDP}\n            variables={props.id}\n            onCompleted={data => setIsPdp(data)}\n          >\n            {({ loading, error, data, refetch }) => {\n              if (loading) return <LoadingText />;\n              if (error) return `Error! ${error}`;\n              console.log(data);\n              return (\n                <Mutation\n                  mutation={UPDATE_TK_ATTR}\n                  onCompleted={() => setIsSaved(true)}\n                >\n                  {(handleSubmit, { err, res }) => {\n                    const showError = err && (\n                      <Banner status=\"critical\">{err.message}</Banner>\n                    );\n                    if (\n                      !data.product.metafield ||\n                      data.product.metafield.value == \"false\"\n                    ) {\n                      useEffect(() => {\n                        setIsChecked(false);\n                      }, [setIsChecked]);\n                    } else {\n                      useEffect(() => {\n                        setIsChecked(true);\n                      }, [setIsChecked]);\n                    }\n\n                    return (\n                      <div>\n                        <Checkbox\n                          label=\"Display on PDP\"\n                          checked={isChecked}\n                          onChange={() =>\n                            updateMeta(\n                              data,\n                              isChecked,\n                              \"threekit\",\n                              \"pdp\",\n                              isPdp,\n                              handleSubmit\n                            )\n                          }\n                          onFocus={() =>\n                            isChecked ? setCheck(false) : setCheck(true)\n                          }\n                        />\n                      </div>\n                    );\n                  }}\n                </Mutation>\n              );\n            }}\n          </Query>\n        </Stack.Item>\n        <Stack.Item>\n          <Query\n            query={IS_AR_ENABLED}\n            variables={props.id}\n            onCompleted={data => setIsAr(data)}\n          >\n            {({ loading, error, data, refetch }) => {\n              if (loading) return <LoadingText />;\n              if (error) return `Error! ${error}`;\n              console.log(data);\n              return (\n                // <div>hi</div>\n                <Mutation\n                  mutation={UPDATE_TK_ATTR}\n                  onCompleted={() => setIsSaved(true)}\n                >\n                  {(handleArSubmit, { err, res }) => {\n                    const showError = err && (\n                      <Banner status=\"critical\">{err.message}</Banner>\n                    );\n                    if (\n                      !data.product.metafield ||\n                      data.product.metafield.value == \"false\"\n                    ) {\n                      useEffect(() => {\n                        setArChecked(false);\n                      }, [setArChecked]);\n                    } else {\n                      useEffect(() => {\n                        setArChecked(true);\n                      }, [setArChecked]);\n                    }\n\n                    return (\n                      <div>\n                        <Checkbox\n                          label=\"AR Enabled\"\n                          checked={arChecked}\n                          onChange={() =>\n                            updateMeta(\n                              data,\n                              arChecked,\n                              \"threekit\",\n                              \"ARen\",\n                              isAr,\n                              handleArSubmit\n                            )\n                          }\n                          onFocus={() =>\n                            arChecked ? setArCheck(false) : setArCheck(true)\n                          }\n                        />\n                      </div>\n                    );\n                  }}\n                </Mutation>\n              );\n            }}\n          </Query>\n        </Stack.Item>\n      </Stack>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"]},"metadata":{},"sourceType":"module"}