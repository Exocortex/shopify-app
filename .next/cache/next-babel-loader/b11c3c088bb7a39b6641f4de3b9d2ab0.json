{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query($id: ID!) {\\n      product(id: $id) {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"assetid\\\") {\\n          value\\n          id\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation($input: ProductInput!) {\\n      productUpdate(input: $input) {\\n        product {\\n          metafields(first: 100) {\\n            edges {\\n              node {\\n                id\\n                namespace\\n                key\\n                value\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback } from \"react\";\nimport { Query, Mutation, useQuery } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Banner, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Card, Stack, TextStyle, Checkbox, Button, Toast } from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  var _useState = useState(\"\"),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(),\n      tkMetaId = _useState2[0],\n      setTkMetaId = _useState2[1];\n\n  var _useState3 = useState(false),\n      showToast = _useState3[0],\n      setToast = _useState3[1];\n\n  var toggleToast = useCallback(function () {\n    return setToast(function (active) {\n      return !active;\n    });\n  }, []);\n  var UPDATE_TK_ID = gql(_templateObject());\n  var GET_META_ID = gql(_templateObject2());\n  var handleChange = useCallback(function (newValue) {\n    return setValue(newValue);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Query, {\n    query: props.query,\n    variables: props.id // skip={!breed}\n\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data,\n        refetch = _ref.refetch;\n    if (loading) return null;\n    if (error) return \"Error! \".concat(error);\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_META_ID,\n      variables: props.id // skip={!breed}\n      ,\n      onCompleted: function onCompleted(data) {\n        return setTkMetaId(data);\n      }\n    }, function (_ref2) {\n      var loading = _ref2.loading,\n          error = _ref2.error,\n          data = _ref2.data,\n          refetch = _ref2.refetch;\n      if (loading) return null;\n      if (error) return \"Error! \".concat(error);\n      return null;\n    }), __jsx(Stack, null, __jsx(Stack.Item, {\n      fill: true\n    }, __jsx(\"h3\", null, __jsx(TextStyle, {\n      variation: \"strong\"\n    }, props.title))), __jsx(Stack.Item, null, __jsx(Mutation, {\n      mutation: UPDATE_TK_ID\n    }, function (handleSubmit, _ref3) {\n      var err = _ref3.err,\n          res = _ref3.res;\n\n      var showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      var showToast = data && __jsx(Toast, {\n        content: \"Sucessfully updated\",\n        onDismiss: function onDismiss() {\n          return console.log('Closing');\n        }\n      });\n\n      return __jsx(\"div\", null, showToast, __jsx(Form, null, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        value: value,\n        onChange: handleChange // onFocus={getID(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value)}\n        ,\n        id: data.product.id,\n        ariaControls: data.product.id,\n        placeholder: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n        connectedRight: __jsx(Button, {\n          onClick: function onClick() {\n            var productVariableInput;\n\n            if (!data.product.metafield) {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\"\n                }]\n              };\n            } else {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\",\n                  id: tkMetaId.product.metafield.id\n                }]\n              };\n            }\n\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            });\n          }\n        }, \"Save\")\n      })))));\n    }))));\n  }));\n}\n\nexport default ThreekitForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ThreekitForm.js"],"names":["React","useState","useCallback","Query","Mutation","useQuery","gql","Banner","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Card","Stack","TextStyle","Checkbox","Button","Toast","ThreekitForm","props","value","setValue","tkMetaId","setTkMetaId","showToast","setToast","toggleToast","active","UPDATE_TK_ID","GET_META_ID","handleChange","newValue","query","id","loading","error","data","refetch","title","handleSubmit","err","res","showError","message","console","log","product","metafield","productVariableInput","metafields","namespace","key","valueType","variables","input"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Query, Mutation, useQuery } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  DisplayText,\n  Form,\n  FormLayout,\n  Frame,\n  Layout,\n  Page,\n  PageActions,\n  TextField,\n  Card,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button,\n  Toast\n} from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [tkMetaId, setTkMetaId] = useState();\n  const [showToast, setToast] = useState(false);\n  const toggleToast = useCallback(() => setToast(active => !active), []);\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n  return (\n    <div>\n      <Query\n        query={props.query}\n        variables={props.id}\n        // skip={!breed}\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n\n          return (\n            <div>\n              <Query\n                query={GET_META_ID}\n                variables={props.id}\n                // skip={!breed}\n                onCompleted={data => setTkMetaId(data)}\n              >\n                {({ loading, error, data, refetch }) => {\n                  if (loading) return null;\n                  if (error) return `Error! ${error}`;\n\n                  return null;\n                }}\n              </Query>\n              {/* <Card title={props.title}> */}\n              {/* {console.log(data)} */}\n\n              <Stack>\n                <Stack.Item fill>\n                  <h3>\n                    <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                  </h3>\n                </Stack.Item>\n                <Stack.Item>\n                  <Mutation mutation={UPDATE_TK_ID}>\n                    {(handleSubmit, { err, res }) => {\n                      const showError = err && (\n                        <Banner status=\"critical\">{err.message}</Banner>\n                      );\n                      const showToast = data && (\n                        <Toast\n                          content=\"Sucessfully updated\"\n                          onDismiss={() => console.log('Closing')}\n                        />\n                      );\n\n                      return (\n                        <div>\n                          {/* <Frame> */}\n                          {/* <Page> */}\n                          {/* <Layout> */}\n                          {showToast}\n                          {/* <Layout.Section>{showError}</Layout.Section> */}\n                          {/* <Layout.Section> */}\n\n                          <Form>\n                            <FormLayout>\n                              <FormLayout.Group>\n                         \n\n                                <TextField\n                                  value={value}\n                                  onChange={handleChange}\n                                  // onFocus={getID(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value)}\n                                  id={data.product.id}\n                                  ariaControls={data.product.id}\n                                  placeholder={\n                                    !data.product.metafield\n                                      ? \"No Threekit ID\"\n                                      : data.product.metafield.value\n                                  }\n                                  connectedRight={\n                                    <Button\n                                      onClick={() => {\n                                        let productVariableInput;\n                                        if (!data.product.metafield) {\n                                          productVariableInput = {\n                                            id: props.id.id,\n                                            metafields: [\n                                              {\n                                                namespace: \"threekit\",\n                                                key: \"assetid\",\n                                                value: value,\n                                                valueType: \"STRING\"\n                                              }\n                                            ]\n                                          };\n                                        } else {\n                                          productVariableInput = {\n                                            id: props.id.id,\n                                            metafields: [\n                                              {\n                                                namespace: \"threekit\",\n                                                key: \"assetid\",\n                                                value: value,\n                                                valueType: \"STRING\",\n                                                id:\n                                                  tkMetaId.product.metafield.id\n                                              }\n                                            ]\n                                          };\n                                        }\n\n                                        handleSubmit({\n                                          variables: {\n                                            input: productVariableInput\n                                          }\n                                        });\n                                      }}\n                                    >\n                                      Save\n                                    </Button>\n                                  }\n                                ></TextField>\n                              </FormLayout.Group>\n                            </FormLayout>\n                          </Form>\n                          {/* </Layout.Section> */}\n                          {/* </Layout> */}\n                          {/* </Page> */}\n                          {/* </Frame> */}\n                        </div>\n                      );\n                    }}\n                  </Mutation>\n                </Stack.Item>\n              </Stack>\n              {/* Catch the error for no IDS */}\n\n              {/* <button onClick={() => refetch()}>Refetch!</button> */}\n              {/* </Card> */}\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"]},"metadata":{},"sourceType":"module"}