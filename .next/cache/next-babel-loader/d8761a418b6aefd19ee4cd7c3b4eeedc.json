{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from \"@shopify/polaris\";\nimport store from \"store-js\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport { Context } from \"@shopify/app-bridge-react\";\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GET_TK_PRODUCT_IDS = gql`\n  query {\n    shop {\n      metafield(namespace: \"threekit\", key: \"items\") {\n        id\n        value\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      ids: []\n    });\n\n    _defineProperty(this, \"_queryMe\", data => {\n      if (data.shop.metafield == null) {\n        return null;\n      } else {\n        this.setState({\n          ids: JSON.parse(data.shop.metafield.value)\n        });\n      }\n    });\n\n    _defineProperty(this, \"makeIds\", arr => arr.map(id => \"gid://shopify/Product/\" + id));\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\n    };\n\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString(); //Test\n\n    let idString = \"\";\n    let idArr = \"\";\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_TK_PRODUCT_IDS,\n      onCompleted: data => this._queryMe(data)\n    }, () => {\n      return __jsx(\"div\", null, __jsx(\"p\", null, \"NEW STATE\"), __jsx(\"p\", null, JSON.stringify(this.state)), console.log(Object.values(this.state)), __jsx(Query, {\n        query: GET_PRODUCTS_BY_ID,\n        variables: {\n          ids: store.get(\"ids\")\n        }\n      }, ({\n        data,\n        loading,\n        error\n      }) => {\n        if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n        if (error) return __jsx(\"div\", null, error.message);\n        console.log(data);\n        return __jsx(Card, null, __jsx(ResourceList, {\n          showHeader: true,\n          resourceName: {\n            singular: \"Product\",\n            plural: \"Products\"\n          },\n          items: data.nodes,\n          renderItem: item => {\n            const media = __jsx(Thumbnail, {\n              source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : \"\",\n              alt: item.images.edges[0] ? item.images.edges[0].node.altText : \"\"\n            });\n\n            const price = item.variants.edges[0].node.price;\n            return __jsx(ResourceList.Item, {\n              id: item.id,\n              media: media,\n              accessibilityLabel: `View details for ${item.title}`,\n              onClick: () => {\n                store.set(\"item\", item);\n                redirectToProduct();\n              }\n            }, __jsx(Stack, null, __jsx(Stack.Item, {\n              fill: true\n            }, __jsx(\"h3\", null, __jsx(TextStyle, {\n              variation: \"strong\"\n            }, item.title))), __jsx(Stack.Item, null, __jsx(\"p\", null, \"$\", price)), __jsx(Stack.Item, null, __jsx(\"p\", null, \"Expires on \", twoWeeksFromNow, \" \"))));\n          }\n        }));\n      }));\n    }));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ResourceList.js"],"names":["gql","Query","Card","ResourceList","Stack","TextStyle","Thumbnail","store","Redirect","Context","GET_PRODUCTS_BY_ID","GET_TK_PRODUCT_IDS","ResourceListWithProducts","React","Component","ids","data","shop","metafield","setState","JSON","parse","value","arr","map","id","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","twoWeeksFromNow","Date","now","toDateString","idString","idArr","_queryMe","stringify","state","console","log","Object","values","get","loading","error","message","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","title","set"],"mappings":"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","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport {\r\n  Card,\r\n  ResourceList,\r\n  Stack,\r\n  TextStyle,\r\n  Thumbnail\r\n} from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport { Redirect } from \"@shopify/app-bridge/actions\";\r\nimport { Context } from \"@shopify/app-bridge-react\";\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!) {\r\n    nodes(ids: $ids) {\r\n      ... on Product {\r\n        title\r\n        handle\r\n        descriptionHtml\r\n        id\r\n        images(first: 1) {\r\n          edges {\r\n            node {\r\n              originalSrc\r\n              altText\r\n            }\r\n          }\r\n        }\r\n        variants(first: 1) {\r\n          edges {\r\n            node {\r\n              price\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_PRODUCT_IDS = gql`\r\n  query {\r\n    shop {\r\n      metafield(namespace: \"threekit\", key: \"items\") {\r\n        id\r\n        value\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass ResourceListWithProducts extends React.Component {\r\n  state = {\r\n    ids: []\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null) {\r\n      return null;\r\n    } else {\r\n      this.setState({\r\n        ids: JSON.parse(data.shop.metafield.value)\r\n      });\r\n    }\r\n  };\r\n\r\n  makeIds = arr => arr.map(id => \"gid://shopify/Product/\" + id)\r\n\r\n  // _formatIDs = (src) => {\r\n  //   const ids = src.split(',');\r\n  //   ids.map(id => \"gid://shopify/Product/\" + id);\r\n  // }\r\n\r\n  static contextType = Context;\r\n  render() {\r\n    const app = this.context;\r\n    const redirectToProduct = () => {\r\n      const redirect = Redirect.create(app);\r\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\r\n    };\r\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\r\n\r\n    //Test\r\n    let idString = \"\";\r\n    let idArr = \"\";\r\n\r\n    return (\r\n      <div>\r\n        <Query\r\n          query={GET_TK_PRODUCT_IDS}\r\n          onCompleted={data => this._queryMe(data)}\r\n        >\r\n          {() => {\r\n            return (\r\n              <div>\r\n                <p>NEW STATE</p>\r\n                <p>{JSON.stringify(this.state)}</p>\r\n                {/* {console.log(this.state['ids']['ids'])} */}\r\n                {/* {console.log(typeof(this.state['ids']['ids']))} */}\r\n                {console.log(Object.values(this.state))}\r\n\r\n                <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get(\"ids\") }}>\r\n          {({ data, loading, error }) => {\r\n            if (loading) return <div>Loading…</div>;\r\n            if (error) return <div>{error.message}</div>;\r\n            console.log(data);\r\n            return (\r\n              <Card>\r\n                <ResourceList\r\n                  showHeader\r\n                  resourceName={{ singular: \"Product\", plural: \"Products\" }}\r\n                  items={data.nodes}\r\n                  renderItem={item => {\r\n                    const media = (\r\n                      <Thumbnail\r\n                        source={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.originalSrc\r\n                            : \"\"\r\n                        }\r\n                        alt={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.altText\r\n                            : \"\"\r\n                        }\r\n                      />\r\n                    );\r\n                    const price = item.variants.edges[0].node.price;\r\n                    return (\r\n                      <ResourceList.Item\r\n                        id={item.id}\r\n                        media={media}\r\n                        accessibilityLabel={`View details for ${item.title}`}\r\n                        onClick={() => {\r\n                          store.set(\"item\", item);\r\n                          redirectToProduct();\r\n                        }}\r\n                      >\r\n                        <Stack>\r\n                          <Stack.Item fill>\r\n                            <h3>\r\n                              <TextStyle variation=\"strong\">\r\n                                {item.title}\r\n                              </TextStyle>\r\n                            </h3>\r\n                          </Stack.Item>\r\n                          <Stack.Item>\r\n                            <p>${price}</p>\r\n                          </Stack.Item>\r\n                          <Stack.Item>\r\n                            <p>Expires on {twoWeeksFromNow} </p>\r\n                          </Stack.Item>\r\n                        </Stack>\r\n                      </ResourceList.Item>\r\n                    );\r\n                  }}\r\n                />\r\n              </Card>\r\n            );\r\n          }}\r\n        </Query>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceListWithProducts;\r\n"]},"metadata":{},"sourceType":"module"}