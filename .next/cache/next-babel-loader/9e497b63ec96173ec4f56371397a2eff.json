{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation($input: ProductInput!) {\\n      productUpdate(input: $input) {\\n        product {\\n          metafields(first: 100) {\\n            edges {\\n              node {\\n                id\\n                namespace\\n                key\\n                value\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  query($id: ID!) {\\n    product(id: $id) {\\n      metafield(namespace: \\\"threekit\\\", key: \\\"pdp\\\") {\\n        value\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query($id: ID!) {\\n      product(id: $id) {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"pdp\\\") {\\n          value\\n          id\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query($id: ID!) {\\n      product(id: $id) {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"assetid\\\") {\\n          value\\n          id\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation($input: ProductInput!) {\\n      productUpdate(input: $input) {\\n        product {\\n          metafields(first: 100) {\\n            edges {\\n              node {\\n                id\\n                namespace\\n                key\\n                value\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Banner, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Card, Stack, TextStyle, Checkbox, Button, Toast } from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  var _useState = useState(\"\"),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(),\n      tkMetaId = _useState2[0],\n      setTkMetaId = _useState2[1];\n\n  var _useState3 = useState(false),\n      isSaved = _useState3[0],\n      setIsSaved = _useState3[1];\n\n  var _useState4 = useState({}),\n      isPdp = _useState4[0],\n      setIsPdp = _useState4[1];\n\n  var _useState5 = useState(false),\n      isPdpChecked = _useState5[0],\n      setisPdpChecked = _useState5[1];\n\n  var _useState6 = useState({}),\n      isAr = _useState6[0],\n      setisAr = _useState6[1];\n\n  var _useState7 = useState(false),\n      isArChecked = _useState7[0],\n      setIsArChecked = _useState7[1];\n\n  var UPDATE_TK_ID = gql(_templateObject());\n  var GET_META_ID = gql(_templateObject2());\n  var IS_PLAYER_PDP = gql(_templateObject3());\n  var IS_AR_ENABLED = gql(_templateObject4());\n  var UPDATE_TK_ATTR = gql(_templateObject5());\n  var handleChange = useCallback(function (newValue) {\n    return setValue(newValue);\n  }, []);\n\n  var setPdpCheck = function setPdpCheck(val) {\n    return setisPdpChecked(val);\n  };\n\n  var setArCheck = function setArCheck(val) {\n    return setisAr(val);\n  };\n\n  var _createTKimage = function _createTKimage(id) {\n    var formatId = function formatId(id) {\n      return id.split(\"Product/\")[1];\n    };\n\n    var getImgObj = function getImgObj(id) {\n      var fetchUrl = \"/api/images/\" + formatId(id);\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        // console.log(json.res.metafields)\n        // this.setState({tkMetaId: json.data})\n        console.log(json); // setProdImg(json.data);\n      });\n    };\n\n    getImgObj(id); // isPdp ? console.log(\"Yes this is a PDP tk item\") : console.log(\"No this is not a PDP item\");\n  };\n\n  return __jsx(\"div\", null, __jsx(Stack, null, __jsx(Query, {\n    query: props.query,\n    variables: props.id\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data,\n        refetch = _ref.refetch;\n    if (loading) return null;\n    if (error) return \"Error! \".concat(error);\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_META_ID,\n      variables: props.id,\n      onCompleted: function onCompleted(data) {\n        return setTkMetaId(data);\n      }\n    }, function (_ref2) {\n      var loading = _ref2.loading,\n          error = _ref2.error,\n          data = _ref2.data,\n          refetch = _ref2.refetch;\n      if (loading) return null;\n      if (error) return \"Error! \".concat(error);\n      return null;\n    }), __jsx(Stack.Item, {\n      fill: true\n    }, __jsx(\"h3\", null, __jsx(TextStyle, {\n      variation: \"strong\"\n    }, props.title))), __jsx(Stack.Item, null, __jsx(Mutation, {\n      mutation: UPDATE_TK_ID,\n      onCompleted: function onCompleted() {\n        return setIsSaved(true);\n      }\n    }, function (handleSubmit, _ref3) {\n      var err = _ref3.err,\n          res = _ref3.res;\n\n      var showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      return __jsx(\"div\", null, __jsx(Page, null, !isSaved ? __jsx(\"div\", null) : __jsx(Toast, {\n        content: \"Saved\",\n        onDismiss: function onDismiss() {\n          return setIsSaved(false);\n        }\n      }), __jsx(Layout.Section, null, showError), __jsx(Form, null, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        value: value,\n        onFocus: function onFocus() {\n          return setValue(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value);\n        },\n        onChange: handleChange,\n        id: data.product.id,\n        ariaControls: data.product.id,\n        placeholder: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n        connectedRight: __jsx(Button, {\n          onClick: function onClick() {\n            var productVariableInput;\n\n            if (!data.product.metafield) {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\"\n                }]\n              };\n            } else {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\",\n                  id: tkMetaId.product.metafield.id\n                }]\n              };\n            }\n\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            } // _createTKimage(props.id.id)\n            );\n          }\n        }, \"Save\")\n      }))))));\n    })));\n  }), __jsx(Stack.Item, null, __jsx(Query, {\n    query: IS_PLAYER_PDP,\n    variables: props.id,\n    onCompleted: function onCompleted(data) {\n      return setIsPdp(data);\n    }\n  }, function (_ref4) {\n    var loading = _ref4.loading,\n        error = _ref4.error,\n        data = _ref4.data,\n        refetch = _ref4.refetch;\n    if (loading) return null;\n    if (error) return \"Error! \".concat(error);\n    console.log(data);\n    return __jsx(Mutation, {\n      mutation: UPDATE_TK_ATTR,\n      onCompleted: function onCompleted() {\n        return setIsSaved(true);\n      }\n    }, function (handleSubmit, _ref5) {\n      var err = _ref5.err,\n          res = _ref5.res;\n\n      var showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      if (!data.product.metafield || data.product.metafield.value == \"false\") {\n        useEffect(function () {\n          setisPdpChecked(false);\n        }, [setisPdpChecked]);\n      } else {\n        useEffect(function () {\n          setisPdpChecked(true);\n        }, [setisPdpChecked]);\n      }\n\n      return __jsx(\"div\", null, __jsx(Checkbox, {\n        label: \"Display on PDP\",\n        checked: isPdpChecked,\n        onChange: function onChange() {\n          var productVariableInput;\n\n          if (!data.product.metafield) {\n            isPdpChecked ? productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"pdp\",\n                value: \"false\",\n                valueType: \"STRING\"\n              }]\n            } : productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"pdp\",\n                value: \"true\",\n                valueType: \"STRING\"\n              }]\n            };\n          } else {\n            isPdpChecked ? productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"pdp\",\n                value: \"false\",\n                valueType: \"STRING\",\n                id: isPdp.product.metafield.id\n              }]\n            } : productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"pdp\",\n                value: \"true\",\n                valueType: \"STRING\",\n                id: isPdp.product.metafield.id\n              }]\n            };\n          }\n\n          handleSubmit({\n            variables: {\n              input: productVariableInput\n            }\n          });\n        } //\n        ,\n        onFocus: function onFocus() {\n          return isPdpChecked ? setPdpCheck(false) : setPdpCheck(true);\n        }\n      }));\n    });\n  })), __jsx(Stack.Item, null, isPdpChecked ? __jsx(Stack.Item, null, __jsx(Query, {\n    query: IS_AR_ENABLED,\n    variables: props.id,\n    onCompleted: function onCompleted(res) {\n      return setisAr(res);\n    }\n  }, function (_ref6) {\n    var loading = _ref6.loading,\n        error = _ref6.error,\n        res = _ref6.res,\n        refetch = _ref6.refetch;\n    if (loading) return null;\n    if (error) return \"Error! \".concat(error);\n    console.log(res);\n    return __jsx(Mutation, {\n      mutation: UPDATE_TK_ATTR,\n      onCompleted: function onCompleted() {\n        return setIsSaved(true);\n      }\n    }, function (handleSubmit, _ref7) {\n      var err = _ref7.err,\n          res = _ref7.res;\n\n      var showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      if (!res.product.metafield || res.product.metafield.value == \"false\") {\n        useEffect(function () {\n          setIsArChecked(false);\n        }, [setIsArChecked]);\n      } else {\n        useEffect(function () {\n          setIsArChecked(true);\n        }, [setIsArChecked]);\n      }\n\n      return __jsx(\"div\", null, __jsx(Checkbox, {\n        label: \"Enable AR\",\n        checked: isArChecked,\n        onChange: function onChange() {\n          var productVariableInput;\n\n          if (!res.product.metafield) {\n            isArChecked ? productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"ar\",\n                value: \"false\",\n                valueType: \"STRING\"\n              }]\n            } : productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"ar\",\n                value: \"true\",\n                valueType: \"STRING\"\n              }]\n            };\n          } else {\n            isArChecked ? productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"ar\",\n                value: \"false\",\n                valueType: \"STRING\",\n                id: isAr.product.metafield.id\n              }]\n            } : productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"ar\",\n                value: \"true\",\n                valueType: \"STRING\",\n                id: isAr.product.metafield.id\n              }]\n            };\n          }\n\n          handleSubmit({\n            variables: {\n              input: productVariableInput\n            }\n          });\n        } //\n        ,\n        onFocus: function onFocus() {\n          return isArChecked ? setArCheck(false) : setArCheck(true);\n        }\n      }));\n    });\n  })) : \"\")));\n}\n\nexport default ThreekitForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ThreekitForm.js"],"names":["React","useState","useCallback","useEffect","Query","Mutation","gql","Banner","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Card","Stack","TextStyle","Checkbox","Button","Toast","ThreekitForm","props","value","setValue","tkMetaId","setTkMetaId","isSaved","setIsSaved","isPdp","setIsPdp","isPdpChecked","setisPdpChecked","isAr","setisAr","isArChecked","setIsArChecked","UPDATE_TK_ID","GET_META_ID","IS_PLAYER_PDP","IS_AR_ENABLED","UPDATE_TK_ATTR","handleChange","newValue","setPdpCheck","val","setArCheck","_createTKimage","id","formatId","split","getImgObj","fetchUrl","method","fetch","then","response","json","console","log","query","loading","error","data","refetch","title","handleSubmit","err","res","showError","message","product","metafield","productVariableInput","metafields","namespace","key","valueType","variables","input"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,cAAhC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SACEC,MADF,EAEEC,WAFF,EAGEC,IAHF,EAIEC,UAJF,EAKEC,KALF,EAMEC,MANF,EAOEC,IAPF,EAQEC,WARF,EASEC,SATF,EAUEC,IAVF,EAWEC,KAXF,EAYEC,SAZF,EAaEC,QAbF,EAcEC,MAdF,EAeEC,KAfF,QAgBO,kBAhBP;;AAkBA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B;AAD2B,kBAEDtB,QAAQ,CAAC,EAAD,CAFP;AAAA,MAEpBuB,KAFoB;AAAA,MAEbC,QAFa;;AAAA,mBAGKxB,QAAQ,EAHb;AAAA,MAGpByB,QAHoB;AAAA,MAGVC,WAHU;;AAAA,mBAKG1B,QAAQ,CAAC,KAAD,CALX;AAAA,MAKpB2B,OALoB;AAAA,MAKXC,UALW;;AAAA,mBAOD5B,QAAQ,CAAC,EAAD,CAPP;AAAA,MAOpB6B,KAPoB;AAAA,MAObC,QAPa;;AAAA,mBAQa9B,QAAQ,CAAC,KAAD,CARrB;AAAA,MAQpB+B,YARoB;AAAA,MAQNC,eARM;;AAAA,mBAUHhC,QAAQ,CAAC,EAAD,CAVL;AAAA,MAUpBiC,IAVoB;AAAA,MAUdC,OAVc;;AAAA,mBAWWlC,QAAQ,CAAC,KAAD,CAXnB;AAAA,MAWpBmC,WAXoB;AAAA,MAWPC,cAXO;;AAc3B,MAAMC,YAAY,GAAGhC,GAAH,mBAAlB;AAoBA,MAAMiC,WAAW,GAAGjC,GAAH,oBAAjB;AAWA,MAAMkC,aAAa,GAAGlC,GAAH,oBAAnB;AAWA,MAAMmC,aAAa,GAAGnC,GAAH,oBAAnB;AAWA,MAAMoC,cAAc,GAAGpC,GAAH,oBAApB;AAmBA,MAAMqC,YAAY,GAAGzC,WAAW,CAAC,UAAA0C,QAAQ;AAAA,WAAInB,QAAQ,CAACmB,QAAD,CAAZ;AAAA,GAAT,EAAiC,EAAjC,CAAhC;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,GAAG;AAAA,WAAIb,eAAe,CAACa,GAAD,CAAnB;AAAA,GAAvB;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAD,GAAG;AAAA,WAAIX,OAAO,CAACW,GAAD,CAAX;AAAA,GAAtB;;AAGA,MAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,EAAE,EAAI;AAC3B,QAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAD,EAAE;AAAA,aAAIA,EAAE,CAACE,KAAH,CAAS,UAAT,EAAqB,CAArB,CAAJ;AAAA,KAAnB;;AAEA,QAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAH,EAAE,EAAI;AACtB,UAAII,QAAQ,GAAG,iBAAiBH,QAAQ,CAACD,EAAD,CAAxC;AACA,UAAIK,MAAM,GAAG,KAAb;AACAC,MAAAA,KAAK,CAACF,QAAD,EAAW;AAAEC,QAAAA,MAAM,EAAEA;AAAV,OAAX,CAAL,CACGE,IADH,CACQ,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OADhB,EAEGF,IAFH,CAEQ,UAAAE,IAAI,EAAI;AACZ;AACA;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAHY,CAIZ;AACD,OAPH;AAQD,KAXD;;AAYAN,IAAAA,SAAS,CAACH,EAAD,CAAT,CAf2B,CAgB3B;AACD,GAjBD;;AAmBA,SACE,mBACE,MAAC,KAAD,QACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAE1B,KAAK,CAACsC,KAApB;AAA2B,IAAA,SAAS,EAAEtC,KAAK,CAAC0B;AAA5C,KACG,gBAAuC;AAAA,QAApCa,OAAoC,QAApCA,OAAoC;AAAA,QAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,QAApBC,IAAoB,QAApBA,IAAoB;AAAA,QAAdC,OAAc,QAAdA,OAAc;AACtC,QAAIH,OAAJ,EAAa,OAAO,IAAP;AACb,QAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AAEX,WACE,mBACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAExB,WADT;AAEE,MAAA,SAAS,EAAEhB,KAAK,CAAC0B,EAFnB;AAGE,MAAA,WAAW,EAAE,qBAAAe,IAAI;AAAA,eAAIrC,WAAW,CAACqC,IAAD,CAAf;AAAA;AAHnB,OAKG,iBAAuC;AAAA,UAApCF,OAAoC,SAApCA,OAAoC;AAAA,UAA3BC,KAA2B,SAA3BA,KAA2B;AAAA,UAApBC,IAAoB,SAApBA,IAAoB;AAAA,UAAdC,OAAc,SAAdA,OAAc;AACtC,UAAIH,OAAJ,EAAa,OAAO,IAAP;AACb,UAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AAEX,aAAO,IAAP;AACD,KAVH,CADF,EAcE,MAAC,KAAD,CAAO,IAAP;AAAY,MAAA,IAAI;AAAhB,OACE,kBACE,MAAC,SAAD;AAAW,MAAA,SAAS,EAAC;AAArB,OAA+BxC,KAAK,CAAC2C,KAArC,CADF,CADF,CAdF,EAoBE,MAAC,KAAD,CAAO,IAAP,QACE,MAAC,QAAD;AAAU,MAAA,QAAQ,EAAE5B,YAApB;AAAkC,MAAA,WAAW,EAAE;AAAA,eAAMT,UAAU,CAAC,IAAD,CAAhB;AAAA;AAA/C,OACG,UAACsC,YAAD,SAAgC;AAAA,UAAfC,GAAe,SAAfA,GAAe;AAAA,UAAVC,GAAU,SAAVA,GAAU;;AAC/B,UAAMC,SAAS,GAAGF,GAAG,IACnB,MAAC,MAAD;AAAQ,QAAA,MAAM,EAAC;AAAf,SAA2BA,GAAG,CAACG,OAA/B,CADF;;AAIA,aACE,mBAEE,MAAC,IAAD,QAEG,CAAC3C,OAAD,GACC,kBADD,GAGC,MAAC,KAAD;AACE,QAAA,OAAO,EAAC,OADV;AAEE,QAAA,SAAS,EAAE;AAAA,iBAAMC,UAAU,CAAC,KAAD,CAAhB;AAAA;AAFb,QALJ,EAaE,MAAC,MAAD,CAAQ,OAAR,QAAiByC,SAAjB,CAbF,EAgBE,MAAC,IAAD,QACE,MAAC,UAAD,QACE,MAAC,UAAD,CAAY,KAAZ,QACE,MAAC,SAAD;AACE,QAAA,KAAK,EAAE9C,KADT;AAEE,QAAA,OAAO,EAAE;AAAA,iBACPC,QAAQ,CACN,CAACuC,IAAI,CAACQ,OAAL,CAAaC,SAAd,GACI,gBADJ,GAEIT,IAAI,CAACQ,OAAL,CAAaC,SAAb,CAAuBjD,KAHrB,CADD;AAAA,SAFX;AASE,QAAA,QAAQ,EAAEmB,YATZ;AAUE,QAAA,EAAE,EAAEqB,IAAI,CAACQ,OAAL,CAAavB,EAVnB;AAWE,QAAA,YAAY,EAAEe,IAAI,CAACQ,OAAL,CAAavB,EAX7B;AAYE,QAAA,WAAW,EACT,CAACe,IAAI,CAACQ,OAAL,CAAaC,SAAd,GACI,gBADJ,GAEIT,IAAI,CAACQ,OAAL,CAAaC,SAAb,CAAuBjD,KAf/B;AAiBE,QAAA,cAAc,EACZ,MAAC,MAAD;AACE,UAAA,OAAO,EAAE,mBAAM;AACb,gBAAIkD,oBAAJ;;AACA,gBAAI,CAACV,IAAI,CAACQ,OAAL,CAAaC,SAAlB,EAA6B;AAC3BC,cAAAA,oBAAoB,GAAG;AACrBzB,gBAAAA,EAAE,EAAE1B,KAAK,CAAC0B,EAAN,CAASA,EADQ;AAErB0B,gBAAAA,UAAU,EAAE,CACV;AACEC,kBAAAA,SAAS,EAAE,UADb;AAEEC,kBAAAA,GAAG,EAAE,SAFP;AAGErD,kBAAAA,KAAK,EAAEA,KAHT;AAIEsD,kBAAAA,SAAS,EAAE;AAJb,iBADU;AAFS,eAAvB;AAWD,aAZD,MAYO;AACLJ,cAAAA,oBAAoB,GAAG;AACrBzB,gBAAAA,EAAE,EAAE1B,KAAK,CAAC0B,EAAN,CAASA,EADQ;AAErB0B,gBAAAA,UAAU,EAAE,CACV;AACEC,kBAAAA,SAAS,EAAE,UADb;AAEEC,kBAAAA,GAAG,EAAE,SAFP;AAGErD,kBAAAA,KAAK,EAAEA,KAHT;AAIEsD,kBAAAA,SAAS,EAAE,QAJb;AAKE7B,kBAAAA,EAAE,EACAvB,QAAQ,CAAC8C,OAAT,CAAiBC,SAAjB,CACGxB;AAPP,iBADU;AAFS,eAAvB;AAcD;;AAEDkB,YAAAA,YAAY,CACV;AACEY,cAAAA,SAAS,EAAE;AACTC,gBAAAA,KAAK,EAAEN;AADE;AADb,aADU,CAOV;AAPU,aAAZ;AASD;AAzCH;AAlBJ,QADF,CADF,CADF,CAhBF,CAFF,CADF;AA8FD,KApGH,CADF,CApBF,CADF;AA+HD,GApIH,CADF,EAuIE,MAAC,KAAD,CAAO,IAAP,QACE,MAAC,KAAD;AACE,IAAA,KAAK,EAAElC,aADT;AAEE,IAAA,SAAS,EAAEjB,KAAK,CAAC0B,EAFnB;AAGE,IAAA,WAAW,EAAE,qBAAAe,IAAI;AAAA,aAAIjC,QAAQ,CAACiC,IAAD,CAAZ;AAAA;AAHnB,KAKG,iBAAuC;AAAA,QAApCF,OAAoC,SAApCA,OAAoC;AAAA,QAA3BC,KAA2B,SAA3BA,KAA2B;AAAA,QAApBC,IAAoB,SAApBA,IAAoB;AAAA,QAAdC,OAAc,SAAdA,OAAc;AACtC,QAAIH,OAAJ,EAAa,OAAO,IAAP;AACb,QAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACA,WACE,MAAC,QAAD;AAAU,MAAA,QAAQ,EAAEtB,cAApB;AAAoC,MAAA,WAAW,EAAE;AAAA,eAAMb,UAAU,CAAC,IAAD,CAAhB;AAAA;AAAjD,OACG,UAACsC,YAAD,SAAgC;AAAA,UAAfC,GAAe,SAAfA,GAAe;AAAA,UAAVC,GAAU,SAAVA,GAAU;;AAC/B,UAAMC,SAAS,GAAGF,GAAG,IACnB,MAAC,MAAD;AAAQ,QAAA,MAAM,EAAC;AAAf,SAA2BA,GAAG,CAACG,OAA/B,CADF;;AAGA,UACE,CAACP,IAAI,CAACQ,OAAL,CAAaC,SAAd,IACAT,IAAI,CAACQ,OAAL,CAAaC,SAAb,CAAuBjD,KAAvB,IAAgC,OAFlC,EAGE;AACArB,QAAAA,SAAS,CAAC,YAAM;AACd8B,UAAAA,eAAe,CAAC,KAAD,CAAf;AACD,SAFQ,EAEN,CAACA,eAAD,CAFM,CAAT;AAGD,OAPD,MAOO;AACL9B,QAAAA,SAAS,CAAC,YAAM;AACd8B,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD,SAFQ,EAEN,CAACA,eAAD,CAFM,CAAT;AAGD;;AAED,aACE,mBAEE,MAAC,QAAD;AACE,QAAA,KAAK,EAAC,gBADR;AAEE,QAAA,OAAO,EAAED,YAFX;AAGE,QAAA,QAAQ,EAAE,oBAAM;AACd,cAAI0C,oBAAJ;;AACA,cAAI,CAACV,IAAI,CAACQ,OAAL,CAAaC,SAAlB,EAA6B;AAC3BzC,YAAAA,YAAY,GACP0C,oBAAoB,GAAG;AACtBzB,cAAAA,EAAE,EAAE1B,KAAK,CAAC0B,EAAN,CAASA,EADS;AAEtB0B,cAAAA,UAAU,EAAE,CACV;AACEC,gBAAAA,SAAS,EAAE,UADb;AAEEC,gBAAAA,GAAG,EAAE,KAFP;AAGErD,gBAAAA,KAAK,EAAE,OAHT;AAIEsD,gBAAAA,SAAS,EAAE;AAJb,eADU;AAFU,aADhB,GAYPJ,oBAAoB,GAAG;AACtBzB,cAAAA,EAAE,EAAE1B,KAAK,CAAC0B,EAAN,CAASA,EADS;AAEtB0B,cAAAA,UAAU,EAAE,CACV;AACEC,gBAAAA,SAAS,EAAE,UADb;AAEEC,gBAAAA,GAAG,EAAE,KAFP;AAGErD,gBAAAA,KAAK,EAAE,MAHT;AAIEsD,gBAAAA,SAAS,EAAE;AAJb,eADU;AAFU,aAZ5B;AAuBD,WAxBD,MAwBO;AACL9C,YAAAA,YAAY,GACP0C,oBAAoB,GAAG;AACtBzB,cAAAA,EAAE,EAAE1B,KAAK,CAAC0B,EAAN,CAASA,EADS;AAEtB0B,cAAAA,UAAU,EAAE,CACV;AACEC,gBAAAA,SAAS,EAAE,UADb;AAEEC,gBAAAA,GAAG,EAAE,KAFP;AAGErD,gBAAAA,KAAK,EAAE,OAHT;AAIEsD,gBAAAA,SAAS,EAAE,QAJb;AAKE7B,gBAAAA,EAAE,EAAEnB,KAAK,CAAC0C,OAAN,CAAcC,SAAd,CAAwBxB;AAL9B,eADU;AAFU,aADhB,GAaPyB,oBAAoB,GAAG;AACtBzB,cAAAA,EAAE,EAAE1B,KAAK,CAAC0B,EAAN,CAASA,EADS;AAEtB0B,cAAAA,UAAU,EAAE,CACV;AACEC,gBAAAA,SAAS,EAAE,UADb;AAEEC,gBAAAA,GAAG,EAAE,KAFP;AAGErD,gBAAAA,KAAK,EAAE,MAHT;AAIEsD,gBAAAA,SAAS,EAAE,QAJb;AAKE7B,gBAAAA,EAAE,EAAEnB,KAAK,CAAC0C,OAAN,CAAcC,SAAd,CAAwBxB;AAL9B,eADU;AAFU,aAb5B;AAyBD;;AAEDkB,UAAAA,YAAY,CAAC;AACXY,YAAAA,SAAS,EAAE;AACTC,cAAAA,KAAK,EAAEN;AADE;AADA,WAAD,CAAZ;AAKD,SA9DH,CA+DE;AA/DF;AAgEE,QAAA,OAAO,EAAE;AAAA,iBACP1C,YAAY,GAAGa,WAAW,CAAC,KAAD,CAAd,GAAwBA,WAAW,CAAC,IAAD,CADxC;AAAA;AAhEX,QAFF,CADF;AAyED,KA3FH,CADF;AA+FD,GAxGH,CADF,CAvIF,EAmPE,MAAC,KAAD,CAAO,IAAP,QACGb,YAAY,GACX,MAAC,KAAD,CAAO,IAAP,QACK,MAAC,KAAD;AACL,IAAA,KAAK,EAAES,aADF;AAEL,IAAA,SAAS,EAAElB,KAAK,CAAC0B,EAFZ;AAGL,IAAA,WAAW,EAAE,qBAAAoB,GAAG;AAAA,aAAIlC,OAAO,CAACkC,GAAD,CAAX;AAAA;AAHX,KAKJ,iBAAsC;AAAA,QAAnCP,OAAmC,SAAnCA,OAAmC;AAAA,QAA1BC,KAA0B,SAA1BA,KAA0B;AAAA,QAAnBM,GAAmB,SAAnBA,GAAmB;AAAA,QAAdJ,OAAc,SAAdA,OAAc;AACrC,QAAIH,OAAJ,EAAa,OAAO,IAAP;AACb,QAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACA,WACE,MAAC,QAAD;AAAU,MAAA,QAAQ,EAAE3B,cAApB;AAAoC,MAAA,WAAW,EAAE;AAAA,eAAMb,UAAU,CAAC,IAAD,CAAhB;AAAA;AAAjD,OACG,UAACsC,YAAD,SAAgC;AAAA,UAAfC,GAAe,SAAfA,GAAe;AAAA,UAAVC,GAAU,SAAVA,GAAU;;AAC/B,UAAMC,SAAS,GAAGF,GAAG,IACnB,MAAC,MAAD;AAAQ,QAAA,MAAM,EAAC;AAAf,SAA2BA,GAAG,CAACG,OAA/B,CADF;;AAGA,UACE,CAACF,GAAG,CAACG,OAAJ,CAAYC,SAAb,IACAJ,GAAG,CAACG,OAAJ,CAAYC,SAAZ,CAAsBjD,KAAtB,IAA+B,OAFjC,EAGE;AACArB,QAAAA,SAAS,CAAC,YAAM;AACdkC,UAAAA,cAAc,CAAC,KAAD,CAAd;AACD,SAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAGD,OAPD,MAOO;AACLlC,QAAAA,SAAS,CAAC,YAAM;AACdkC,UAAAA,cAAc,CAAC,IAAD,CAAd;AACD,SAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAGD;;AAED,aACE,mBAEE,MAAC,QAAD;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,OAAO,EAAED,WAFX;AAGE,QAAA,QAAQ,EAAE,oBAAM;AACd,cAAIsC,oBAAJ;;AACA,cAAI,CAACL,GAAG,CAACG,OAAJ,CAAYC,SAAjB,EAA4B;AAC1BrC,YAAAA,WAAW,GACNsC,oBAAoB,GAAG;AACtBzB,cAAAA,EAAE,EAAE1B,KAAK,CAAC0B,EAAN,CAASA,EADS;AAEtB0B,cAAAA,UAAU,EAAE,CACV;AACEC,gBAAAA,SAAS,EAAE,UADb;AAEEC,gBAAAA,GAAG,EAAE,IAFP;AAGErD,gBAAAA,KAAK,EAAE,OAHT;AAIEsD,gBAAAA,SAAS,EAAE;AAJb,eADU;AAFU,aADjB,GAYNJ,oBAAoB,GAAG;AACtBzB,cAAAA,EAAE,EAAE1B,KAAK,CAAC0B,EAAN,CAASA,EADS;AAEtB0B,cAAAA,UAAU,EAAE,CACV;AACEC,gBAAAA,SAAS,EAAE,UADb;AAEEC,gBAAAA,GAAG,EAAE,IAFP;AAGErD,gBAAAA,KAAK,EAAE,MAHT;AAIEsD,gBAAAA,SAAS,EAAE;AAJb,eADU;AAFU,aAZ5B;AAuBD,WAxBD,MAwBO;AACL1C,YAAAA,WAAW,GACNsC,oBAAoB,GAAG;AACtBzB,cAAAA,EAAE,EAAE1B,KAAK,CAAC0B,EAAN,CAASA,EADS;AAEtB0B,cAAAA,UAAU,EAAE,CACV;AACEC,gBAAAA,SAAS,EAAE,UADb;AAEEC,gBAAAA,GAAG,EAAE,IAFP;AAGErD,gBAAAA,KAAK,EAAE,OAHT;AAIEsD,gBAAAA,SAAS,EAAE,QAJb;AAKE7B,gBAAAA,EAAE,EAAEf,IAAI,CAACsC,OAAL,CAAaC,SAAb,CAAuBxB;AAL7B,eADU;AAFU,aADjB,GAaNyB,oBAAoB,GAAG;AACtBzB,cAAAA,EAAE,EAAE1B,KAAK,CAAC0B,EAAN,CAASA,EADS;AAEtB0B,cAAAA,UAAU,EAAE,CACV;AACEC,gBAAAA,SAAS,EAAE,UADb;AAEEC,gBAAAA,GAAG,EAAE,IAFP;AAGErD,gBAAAA,KAAK,EAAE,MAHT;AAIEsD,gBAAAA,SAAS,EAAE,QAJb;AAKE7B,gBAAAA,EAAE,EAAEf,IAAI,CAACsC,OAAL,CAAaC,SAAb,CAAuBxB;AAL7B,eADU;AAFU,aAb5B;AAyBD;;AAEDkB,UAAAA,YAAY,CAAC;AACXY,YAAAA,SAAS,EAAE;AACTC,cAAAA,KAAK,EAAEN;AADE;AADA,WAAD,CAAZ;AAKD,SA9DH,CA+DE;AA/DF;AAgEE,QAAA,OAAO,EAAE;AAAA,iBACPtC,WAAW,GAAGW,UAAU,CAAC,KAAD,CAAb,GAAuBA,UAAU,CAAC,IAAD,CADrC;AAAA;AAhEX,QAFF,CADF;AAyED,KA3FH,CADF;AA+FD,GAxGI,CADL,CADW,GA6GT,EA9GN,CAnPF,CADF,CADF;AAwWD;;AAED,eAAezB,YAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  DisplayText,\n  Form,\n  FormLayout,\n  Frame,\n  Layout,\n  Page,\n  PageActions,\n  TextField,\n  Card,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button,\n  Toast\n} from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [tkMetaId, setTkMetaId] = useState();\n\n  const [isSaved, setIsSaved] = useState(false);\n\n  const [isPdp, setIsPdp] = useState({});\n  const [isPdpChecked, setisPdpChecked] = useState(false);\n\n  const [isAr, setisAr] = useState({});\n  const [isArChecked, setIsArChecked] = useState(false);\n\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n \n\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_PLAYER_PDP = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"pdp\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_AR_ENABLED = gql`\n  query($id: ID!) {\n    product(id: $id) {\n      metafield(namespace: \"threekit\", key: \"pdp\") {\n        value\n        id\n      }\n    }\n  }\n`;\n\n  const UPDATE_TK_ATTR = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n\n  const setPdpCheck = val => setisPdpChecked(val);\n  const setArCheck = val => setisAr(val);\n\n\n  const _createTKimage = id => {\n    const formatId = id => id.split(\"Product/\")[1];\n\n    const getImgObj = id => {\n      var fetchUrl = \"/api/images/\" + formatId(id);\n      var method = \"GET\";\n      fetch(fetchUrl, { method: method })\n        .then(response => response.json())\n        .then(json => {\n          // console.log(json.res.metafields)\n          // this.setState({tkMetaId: json.data})\n          console.log(json);\n          // setProdImg(json.data);\n        });\n    };\n    getImgObj(id);\n    // isPdp ? console.log(\"Yes this is a PDP tk item\") : console.log(\"No this is not a PDP item\");\n  };\n\n  return (\n    <div>\n      <Stack>\n        <Query query={props.query} variables={props.id}>\n          {({ loading, error, data, refetch }) => {\n            if (loading) return null;\n            if (error) return `Error! ${error}`;\n\n            return (\n              <div>\n                <Query\n                  query={GET_META_ID}\n                  variables={props.id}\n                  onCompleted={data => setTkMetaId(data)}\n                >\n                  {({ loading, error, data, refetch }) => {\n                    if (loading) return null;\n                    if (error) return `Error! ${error}`;\n\n                    return null;\n                  }}\n                </Query>\n\n                <Stack.Item fill>\n                  <h3>\n                    <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                  </h3>\n                </Stack.Item>\n\n                <Stack.Item>\n                  <Mutation mutation={UPDATE_TK_ID} onCompleted={() => setIsSaved(true)}>\n                    {(handleSubmit, { err, res }) => {\n                      const showError = err && (\n                        <Banner status=\"critical\">{err.message}</Banner>\n                      );\n\n                      return (\n                        <div>\n                          {/* <Frame> */}\n                          <Page>\n                            {/* <Layout> */}\n                            {!isSaved ? (\n                              <div></div>\n                            ) : (\n                              <Toast\n                                content=\"Saved\"\n                                onDismiss={() => setIsSaved(false)}\n                              >\n       \n                              </Toast>\n                            )}\n\n                            <Layout.Section>{showError}</Layout.Section>\n                            {/* <Layout.Section> */}\n\n                            <Form>\n                              <FormLayout>\n                                <FormLayout.Group>\n                                  <TextField\n                                    value={value}\n                                    onFocus={() =>\n                                      setValue(\n                                        !data.product.metafield\n                                          ? \"No Threekit ID\"\n                                          : data.product.metafield.value\n                                      )\n                                    }\n                                    onChange={handleChange}\n                                    id={data.product.id}\n                                    ariaControls={data.product.id}\n                                    placeholder={\n                                      !data.product.metafield\n                                        ? \"No Threekit ID\"\n                                        : data.product.metafield.value\n                                    }\n                                    connectedRight={\n                                      <Button\n                                        onClick={() => {\n                                          let productVariableInput;\n                                          if (!data.product.metafield) {\n                                            productVariableInput = {\n                                              id: props.id.id,\n                                              metafields: [\n                                                {\n                                                  namespace: \"threekit\",\n                                                  key: \"assetid\",\n                                                  value: value,\n                                                  valueType: \"STRING\"\n                                                }\n                                              ]\n                                            };\n                                          } else {\n                                            productVariableInput = {\n                                              id: props.id.id,\n                                              metafields: [\n                                                {\n                                                  namespace: \"threekit\",\n                                                  key: \"assetid\",\n                                                  value: value,\n                                                  valueType: \"STRING\",\n                                                  id:\n                                                    tkMetaId.product.metafield\n                                                      .id\n                                                }\n                                              ]\n                                            };\n                                          }\n\n                                          handleSubmit(\n                                            {\n                                              variables: {\n                                                input: productVariableInput\n                                              }\n                                            },\n                                            \n                                            // _createTKimage(props.id.id)\n                                          );\n                                        }}\n                                      >\n                                        Save\n                                      </Button>\n                                    }\n                                  ></TextField>\n                                </FormLayout.Group>\n                              </FormLayout>\n                            </Form>\n                          </Page>\n                          {/* </Frame> */}\n                        </div>\n                      );\n                    }}\n                  </Mutation>\n                </Stack.Item>\n              </div>\n            );\n          }}\n        </Query>\n        <Stack.Item>\n          <Query\n            query={IS_PLAYER_PDP}\n            variables={props.id}\n            onCompleted={data => setIsPdp(data)}\n          >\n            {({ loading, error, data, refetch }) => {\n              if (loading) return null;\n              if (error) return `Error! ${error}`;\n              console.log(data);\n              return (\n                <Mutation mutation={UPDATE_TK_ATTR} onCompleted={() => setIsSaved(true)}>\n                  {(handleSubmit, { err, res }) => {\n                    const showError = err && (\n                      <Banner status=\"critical\">{err.message}</Banner>\n                    );\n                    if (\n                      !data.product.metafield ||\n                      data.product.metafield.value == \"false\"\n                    ) {\n                      useEffect(() => {\n                        setisPdpChecked(false);\n                      }, [setisPdpChecked]);\n                    } else {\n                      useEffect(() => {\n                        setisPdpChecked(true);\n                      }, [setisPdpChecked]);\n                    }\n\n                    return (\n                      <div>\n                      \n                        <Checkbox\n                          label=\"Display on PDP\"\n                          checked={isPdpChecked}\n                          onChange={() => {\n                            let productVariableInput;\n                            if (!data.product.metafield) {\n                              isPdpChecked\n                                ? (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"pdp\",\n                                        value: \"false\",\n                                        valueType: \"STRING\"\n                                      }\n                                    ]\n                                  })\n                                : (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"pdp\",\n                                        value: \"true\",\n                                        valueType: \"STRING\"\n                                      }\n                                    ]\n                                  });\n                            } else {\n                              isPdpChecked\n                                ? (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"pdp\",\n                                        value: \"false\",\n                                        valueType: \"STRING\",\n                                        id: isPdp.product.metafield.id\n                                      }\n                                    ]\n                                  })\n                                : (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"pdp\",\n                                        value: \"true\",\n                                        valueType: \"STRING\",\n                                        id: isPdp.product.metafield.id\n                                      }\n                                    ]\n                                  });\n                            }\n\n                            handleSubmit({\n                              variables: {\n                                input: productVariableInput\n                              }\n                            });\n                          }}\n                          //\n                          onFocus={() =>\n                            isPdpChecked ? setPdpCheck(false) : setPdpCheck(true)\n                          }\n                        />\n                      </div>\n                    );\n                  }}\n                </Mutation>\n              );\n            }}\n          </Query>\n        </Stack.Item>\n        <Stack.Item>\n          {isPdpChecked ? (\n            <Stack.Item>\n                 <Query\n            query={IS_AR_ENABLED}\n            variables={props.id}\n            onCompleted={res => setisAr(res)}\n          >\n            {({ loading, error, res, refetch }) => {\n              if (loading) return null;\n              if (error) return `Error! ${error}`;\n              console.log(res);\n              return (\n                <Mutation mutation={UPDATE_TK_ATTR} onCompleted={() => setIsSaved(true)}>\n                  {(handleSubmit, { err, res }) => {\n                    const showError = err && (\n                      <Banner status=\"critical\">{err.message}</Banner>\n                    );\n                    if (\n                      !res.product.metafield ||\n                      res.product.metafield.value == \"false\"\n                    ) {\n                      useEffect(() => {\n                        setIsArChecked(false);\n                      }, [setIsArChecked]);\n                    } else {\n                      useEffect(() => {\n                        setIsArChecked(true);\n                      }, [setIsArChecked]);\n                    }\n\n                    return (\n                      <div>\n                      \n                        <Checkbox\n                          label=\"Enable AR\"\n                          checked={isArChecked}\n                          onChange={() => {\n                            let productVariableInput;\n                            if (!res.product.metafield) {\n                              isArChecked\n                                ? (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"ar\",\n                                        value: \"false\",\n                                        valueType: \"STRING\"\n                                      }\n                                    ]\n                                  })\n                                : (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"ar\",\n                                        value: \"true\",\n                                        valueType: \"STRING\"\n                                      }\n                                    ]\n                                  });\n                            } else {\n                              isArChecked\n                                ? (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"ar\",\n                                        value: \"false\",\n                                        valueType: \"STRING\",\n                                        id: isAr.product.metafield.id\n                                      }\n                                    ]\n                                  })\n                                : (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"ar\",\n                                        value: \"true\",\n                                        valueType: \"STRING\",\n                                        id: isAr.product.metafield.id\n                                      }\n                                    ]\n                                  });\n                            }\n\n                            handleSubmit({\n                              variables: {\n                                input: productVariableInput\n                              }\n                            });\n                          }}\n                          //\n                          onFocus={() =>\n                            isArChecked ? setArCheck(false) : setArCheck(true)\n                          }\n                        />\n                      </div>\n                    );\n                  }}\n                </Mutation>\n              );\n            }}\n          </Query>\n          </Stack.Item>\n          ) : \"\"}\n        </Stack.Item>\n      </Stack>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"]},"metadata":{},"sourceType":"module"}