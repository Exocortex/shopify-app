{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery {\\n  shop{\\n    metafield(namespace: \\\"threekit\\\", key: \\\"items\\\") {\\n      value\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Layout, Page, TextStyle, EmptyState } from \"@shopify/polaris\";\nimport { ResourcePicker, TitleBar } from \"@shopify/app-bridge-react\";\nimport store from \"store-js\";\nimport ResourceListWithProducts from \"../components/ResourceList\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\n/*\r\n\r\nWhat needs to happen:\r\n  - Page Loads\r\n    - If there are products with Threekit Asset IDs, list them\r\n    - If not, load the empty state\r\n  - From the main page, display TK ID & if AR is enabled\r\n*/\n\nvar GET_TK_METAFIELD = gql(_templateObject());\n\nvar Index = /*#__PURE__*/function (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Index)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      open: false,\n      hasSrc: false,\n      shop: \"\",\n      tkMetaId: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_queryMe\", function (data) {\n      _this.setState({\n        tkMetaId: data\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getShopMetafield\", function () {\n      var fetchUrl = \"/api/shopMeta\";\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        // console.log(json.data.metafields)\n        // this.setState({tkMetaId: json.data})\n        return json.data;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateShopMetafield\", function (id, val) {\n      var fetchUrl = \"/api/insertMeta/\".concat(id, \"/\").concat(val);\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        console.log(json); // this.setState({tkMetaId: json.data})\n\n        return json.data;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeShopMetafield\", function () {\n      var fetchUrl = \"/api/makeMeta\";\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {// console.log(json);\n        // console.log(json.data.metafields[\"threekitItems\"])\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initializeSrc\", function () {\n      var fetchUrl = \"/make/script_tags\";\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        var fetchUrl = \"/make/script_tags\";\n        var method = \"GET\";\n        fetch(fetchUrl, {\n          method: method\n        });\n        console.log(json);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deleteSrc\", function () {\n      var fetchUrl = \"/delete/script_tags/118167273517\";\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        console.log(json);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getScripts\", function () {\n      var fetchUrl = \"/api/script_tags\";\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(function (response) {\n        return response.json();\n      }).then(function (json) {\n        return console.log(json);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelection\", function (resources) {\n      var idsFromResources = resources.selection.map(function (product) {\n        return product.id;\n      });\n\n      _this.setState({\n        open: false\n      });\n\n      store.set(\"ids\", idsFromResources);\n    });\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    // End testing functions\n    value: function componentDidMount() {\n      this.getShopMetafield();\n      this.setState({\n        tkMetaId: this.getShopMetafield()\n      });\n      console.log(this.state); // this.makeShopMetafield();\n      // this.getScripts();\n      // this.initializeSrc();\n      // this.deleteSrc();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // This retrieves any locally stored items\n      var emptyState = !store.get(\"ids\");\n      return __jsx(Page, null, __jsx(TitleBar, {\n        primaryAction: {\n          content: \"Select products\",\n          onAction: function onAction() {\n            return _this2.setState({\n              open: true\n            });\n          }\n        }\n      }), __jsx(ResourcePicker, {\n        resourceType: \"Product\",\n        showVariants: false,\n        open: this.state.open,\n        onSelection: function onSelection(resources) {\n          return _this2.handleSelection(resources);\n        },\n        onCancel: function onCancel() {\n          return _this2.setState({\n            open: false\n          });\n        }\n      }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n        heading: \"Associate a Shopify product with a Threekit item.\",\n        action: {\n          content: \"Select products\",\n          onAction: function onAction() {\n            return _this2.setState({\n              open: true\n            });\n          }\n        },\n        image: \"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\n      }, __jsx(\"p\", null, \"Select products to associate it with a Threekit item.\"))) : __jsx(\"div\", null, __jsx(Query, {\n        query: GET_TK_METAFIELD,\n        onCompleted: function onCompleted(data) {\n          return _this2._queryMe(data);\n        }\n      }, function () {\n        console.log(_this2.state.tkMetaId);\n        return null;\n      }), __jsx(ResourceListWithProducts, null)));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/pages/index.js"],"names":["Layout","Page","TextStyle","EmptyState","ResourcePicker","TitleBar","store","ResourceListWithProducts","gql","Query","GET_TK_METAFIELD","Index","open","hasSrc","shop","tkMetaId","data","setState","fetchUrl","method","fetch","then","response","json","id","val","console","log","resources","idsFromResources","selection","map","product","set","getShopMetafield","state","emptyState","get","content","onAction","handleSelection","_queryMe","React","Component"],"mappings":"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","sourcesContent":["import { Layout, Page, TextStyle, EmptyState } from \"@shopify/polaris\";\r\nimport { ResourcePicker, TitleBar } from \"@shopify/app-bridge-react\";\r\nimport store from \"store-js\";\r\nimport ResourceListWithProducts from \"../components/ResourceList\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\n\r\n/*\r\n\r\nWhat needs to happen:\r\n  - Page Loads\r\n    - If there are products with Threekit Asset IDs, list them\r\n    - If not, load the empty state\r\n  - From the main page, display TK ID & if AR is enabled\r\n*/\r\n\r\nconst GET_TK_METAFIELD = gql`\r\nquery {\r\n  shop{\r\n    metafield(namespace: \"threekit\", key: \"items\") {\r\n      value\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nclass Index extends React.Component {\r\n  state = {\r\n    open: false,\r\n    hasSrc: false,\r\n    shop: \"\",\r\n    tkMetaId: {}\r\n  };\r\n\r\n  _queryMe = data => {\r\n    this.setState({\r\n      tkMetaId: data\r\n    })\r\n  }\r\n\r\n\r\n\r\n  // For testing\r\n  getShopMetafield = () => {\r\n    var fetchUrl = \"/api/shopMeta\";\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        // console.log(json.data.metafields)\r\n        // this.setState({tkMetaId: json.data})\r\n        return json.data\r\n      });\r\n  };\r\n\r\n  updateShopMetafield = (id, val) => {\r\n    var fetchUrl = `/api/insertMeta/${id}/${val}`;\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        console.log(json)\r\n        // this.setState({tkMetaId: json.data})\r\n        return json.data\r\n      });\r\n  };\r\n\r\n  makeShopMetafield = () => {\r\n    var fetchUrl = \"/api/makeMeta\";\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        // console.log(json);\r\n        // console.log(json.data.metafields[\"threekitItems\"])\r\n      });\r\n  };\r\n\r\n  initializeSrc = () => {\r\n    var fetchUrl = \"/make/script_tags\";\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        var fetchUrl = \"/make/script_tags\";\r\n        var method = \"GET\";\r\n        fetch(fetchUrl, { method: method });\r\n        console.log(json);\r\n      });\r\n  };\r\n\r\n  deleteSrc = () => {\r\n    var fetchUrl = \"/delete/script_tags/118167273517\";\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        console.log(json);\r\n      });\r\n  };\r\n\r\n  getScripts = () => {\r\n    var fetchUrl = \"/api/script_tags\";\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => console.log(json));\r\n  };\r\n  // End testing functions\r\n\r\n  componentDidMount() {\r\n    this.getShopMetafield();\r\n    this.setState({tkMetaId: this.getShopMetafield()})\r\n    console.log(this.state)\r\n    // this.makeShopMetafield();\r\n    // this.getScripts();\r\n    // this.initializeSrc();\r\n    // this.deleteSrc();\r\n  }\r\n\r\n  render() {\r\n    // This retrieves any locally stored items\r\n    const emptyState = !store.get(\"ids\");\r\n\r\n    return (\r\n      <Page>\r\n        <TitleBar\r\n          primaryAction={{\r\n            content: \"Select products\",\r\n            onAction: () => this.setState({ open: true })\r\n          }}\r\n        />\r\n        <ResourcePicker\r\n          resourceType=\"Product\"\r\n          showVariants={false}\r\n          open={this.state.open}\r\n          onSelection={resources => this.handleSelection(resources)}\r\n          onCancel={() => this.setState({ open: false })}\r\n        />\r\n        {emptyState ? (\r\n          <Layout>\r\n            <EmptyState\r\n              heading=\"Associate a Shopify product with a Threekit item.\"\r\n              action={{\r\n                content: \"Select products\",\r\n                onAction: () => this.setState({ open: true })\r\n              }}\r\n              image={\r\n                \"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\r\n              }\r\n            >\r\n              <p>Select products to associate it with a Threekit item.</p>\r\n            </EmptyState>\r\n          </Layout>\r\n        ) : (\r\n          <div>\r\n            <Query query={GET_TK_METAFIELD} onCompleted={data => this._queryMe(data)}>\r\n              {() => {\r\n                console.log(this.state.tkMetaId)\r\n                return null;\r\n              }}\r\n            </Query>\r\n          <ResourceListWithProducts />\r\n\r\n          </div>\r\n        )}\r\n      </Page>\r\n    );\r\n  }\r\n  handleSelection = resources => {\r\n    const idsFromResources = resources.selection.map(product => product.id);\r\n    this.setState({ open: false });\r\n    store.set(\"ids\", idsFromResources);\r\n  };\r\n}\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}