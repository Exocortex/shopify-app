{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Banner, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Card, Stack, TextStyle, Checkbox, Button, Toast } from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const {\n    0: value,\n    1: setValue\n  } = useState(\"\");\n  const {\n    0: tkMetaId,\n    1: setTkMetaId\n  } = useState();\n  const {\n    0: isSaved,\n    1: setIsSaved\n  } = useState(false);\n  const {\n    0: isPdp,\n    1: setIsPdp\n  } = useState({});\n  const {\n    0: isPdpChecked,\n    1: setisPdpChecked\n  } = useState(false);\n  const {\n    0: isAr,\n    1: setisAr\n  } = useState({});\n  const {\n    0: isArChecked,\n    1: setIsArChecked\n  } = useState(false);\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n  const IS_PLAYER_PDP = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"pdp\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n  const IS_AR_ENABLED = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"pdp\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n  const UPDATE_TK_ATTR = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n\n  const setPdpCheck = val => setisPdpChecked(val);\n\n  const setArCheck = val => setisAr(val);\n\n  const _createTKimage = id => {\n    const formatId = id => id.split(\"Product/\")[1];\n\n    const getImgObj = id => {\n      var fetchUrl = \"/api/images/\" + formatId(id);\n      var method = \"GET\";\n      fetch(fetchUrl, {\n        method: method\n      }).then(response => response.json()).then(json => {\n        // console.log(json.res.metafields)\n        // this.setState({tkMetaId: json.data})\n        console.log(json); // setProdImg(json.data);\n      });\n    };\n\n    getImgObj(id); // isPdp ? console.log(\"Yes this is a PDP tk item\") : console.log(\"No this is not a PDP item\");\n  };\n\n  return __jsx(\"div\", null, __jsx(Stack, null, __jsx(Query, {\n    query: props.query,\n    variables: props.id\n  }, ({\n    loading,\n    error,\n    data,\n    refetch\n  }) => {\n    if (loading) return null;\n    if (error) return `Error! ${error}`;\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_META_ID,\n      variables: props.id,\n      onCompleted: data => setTkMetaId(data)\n    }, ({\n      loading,\n      error,\n      data,\n      refetch\n    }) => {\n      if (loading) return null;\n      if (error) return `Error! ${error}`;\n      return null;\n    }), __jsx(Stack.Item, {\n      fill: true\n    }, __jsx(\"h3\", null, __jsx(TextStyle, {\n      variation: \"strong\"\n    }, props.title))), __jsx(Stack.Item, null, __jsx(Mutation, {\n      mutation: UPDATE_TK_ID,\n      onCompleted: () => setIsSaved(true)\n    }, (handleSubmit, {\n      err,\n      res\n    }) => {\n      const showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      return __jsx(\"div\", null, __jsx(Page, null, !isSaved ? __jsx(\"div\", null) : __jsx(Toast, {\n        content: \"Saved\",\n        onDismiss: () => setIsSaved(false)\n      }), __jsx(Layout.Section, null, showError), __jsx(Form, null, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(TextField, {\n        value: value,\n        onFocus: () => setValue(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value),\n        onChange: handleChange,\n        id: data.product.id,\n        ariaControls: data.product.id,\n        placeholder: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n        connectedRight: __jsx(Button, {\n          onClick: () => {\n            let productVariableInput;\n\n            if (!data.product.metafield) {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\"\n                }]\n              };\n            } else {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\",\n                  id: tkMetaId.product.metafield.id\n                }]\n              };\n            }\n\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            } // _createTKimage(props.id.id)\n            );\n          }\n        }, \"Save\")\n      }))))));\n    })));\n  }), __jsx(Stack.Item, null, __jsx(Query, {\n    query: IS_PLAYER_PDP,\n    variables: props.id,\n    onCompleted: data => setIsPdp(data)\n  }, ({\n    loading,\n    error,\n    data,\n    refetch\n  }) => {\n    if (loading) return null;\n    if (error) return `Error! ${error}`;\n    console.log(data);\n    return __jsx(Mutation, {\n      mutation: UPDATE_TK_ATTR,\n      onCompleted: () => setIsSaved(true)\n    }, (handleSubmit, {\n      err,\n      res\n    }) => {\n      const showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      if (!data.product.metafield || data.product.metafield.value == \"false\") {\n        useEffect(() => {\n          setisPdpChecked(false);\n        }, [setisPdpChecked]);\n      } else {\n        useEffect(() => {\n          setisPdpChecked(true);\n        }, [setisPdpChecked]);\n      }\n\n      return __jsx(\"div\", null, __jsx(Checkbox, {\n        label: \"Display on PDP\",\n        checked: isPdpChecked,\n        onChange: () => {\n          let productVariableInput;\n\n          if (!data.product.metafield) {\n            isPdpChecked ? productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"pdp\",\n                value: \"false\",\n                valueType: \"STRING\"\n              }]\n            } : productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"pdp\",\n                value: \"true\",\n                valueType: \"STRING\"\n              }]\n            };\n          } else {\n            isPdpChecked ? productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"pdp\",\n                value: \"false\",\n                valueType: \"STRING\",\n                id: isPdp.product.metafield.id\n              }]\n            } : productVariableInput = {\n              id: props.id.id,\n              metafields: [{\n                namespace: \"threekit\",\n                key: \"pdp\",\n                value: \"true\",\n                valueType: \"STRING\",\n                id: isPdp.product.metafield.id\n              }]\n            };\n          }\n\n          handleSubmit({\n            variables: {\n              input: productVariableInput\n            }\n          });\n        } //\n        ,\n        onFocus: () => isPdpChecked ? setPdpCheck(false) : setPdpCheck(true)\n      }));\n    });\n  })), __jsx(Stack.Item, null, isPdpChecked ? __jsx(Stack.Item, null, __jsx(Query, {\n    query: IS_AR_ENABLED,\n    variables: props.id,\n    onCompleted: res => setisAr(res)\n  }, ({\n    loading,\n    error,\n    res,\n    refetch\n  }) => {\n    if (loading) return null;\n    if (error) return `Error! ${error}`;\n    console.log(res); // return (\n    //   <Mutation\n    //     mutation={UPDATE_TK_ATTR}\n    //     onCompleted={() => setIsSaved(true)}\n    //   >\n    //     {(handleSubmit, { err, res }) => {\n    //       const showError = err && (\n    //         <Banner status=\"critical\">{err.message}</Banner>\n    //       );\n    //       if (\n    //         !res.product.metafield ||\n    //         res.product.metafield.value == \"false\"\n    //       ) {\n    //         useEffect(() => {\n    //           setIsArChecked(false);\n    //         }, [setIsArChecked]);\n    //       } else {\n    //         useEffect(() => {\n    //           setIsArChecked(true);\n    //         }, [setIsArChecked]);\n    //       }\n    //       return (\n    //         <div>\n    //           <Checkbox\n    //             label=\"Enable AR\"\n    //             checked={isArChecked}\n    //             onChange={() => {\n    //               let productVariableInput;\n    //               if (!res.product.metafield) {\n    //                 isArChecked\n    //                   ? (productVariableInput = {\n    //                       id: props.id.id,\n    //                       metafields: [\n    //                         {\n    //                           namespace: \"threekit\",\n    //                           key: \"ar\",\n    //                           value: \"false\",\n    //                           valueType: \"STRING\"\n    //                         }\n    //                       ]\n    //                     })\n    //                   : (productVariableInput = {\n    //                       id: props.id.id,\n    //                       metafields: [\n    //                         {\n    //                           namespace: \"threekit\",\n    //                           key: \"ar\",\n    //                           value: \"true\",\n    //                           valueType: \"STRING\"\n    //                         }\n    //                       ]\n    //                     });\n    //               } else {\n    //                 isArChecked\n    //                   ? (productVariableInput = {\n    //                       id: props.id.id,\n    //                       metafields: [\n    //                         {\n    //                           namespace: \"threekit\",\n    //                           key: \"ar\",\n    //                           value: \"false\",\n    //                           valueType: \"STRING\",\n    //                           id: isAr.product.metafield.id\n    //                         }\n    //                       ]\n    //                     })\n    //                   : (productVariableInput = {\n    //                       id: props.id.id,\n    //                       metafields: [\n    //                         {\n    //                           namespace: \"threekit\",\n    //                           key: \"ar\",\n    //                           value: \"true\",\n    //                           valueType: \"STRING\",\n    //                           id: isAr.product.metafield.id\n    //                         }\n    //                       ]\n    //                     });\n    //               }\n    //               handleSubmit({\n    //                 variables: {\n    //                   input: productVariableInput\n    //                 }\n    //               });\n    //             }}\n    //             //\n    //             onFocus={() =>\n    //               isArChecked\n    //                 ? setArCheck(false)\n    //                 : setArCheck(true)\n    //             }\n    //           />\n    //         </div>\n    //       );\n    //     }}\n    //   </Mutation>\n    // );\n  })) : \"\")));\n}\n\nexport default ThreekitForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ThreekitForm.js"],"names":["React","useState","useCallback","useEffect","Query","Mutation","gql","Banner","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Card","Stack","TextStyle","Checkbox","Button","Toast","ThreekitForm","props","value","setValue","tkMetaId","setTkMetaId","isSaved","setIsSaved","isPdp","setIsPdp","isPdpChecked","setisPdpChecked","isAr","setisAr","isArChecked","setIsArChecked","UPDATE_TK_ID","GET_META_ID","IS_PLAYER_PDP","IS_AR_ENABLED","UPDATE_TK_ATTR","handleChange","newValue","setPdpCheck","val","setArCheck","_createTKimage","id","formatId","split","getImgObj","fetchUrl","method","fetch","then","response","json","console","log","query","loading","error","data","refetch","title","handleSubmit","err","res","showError","message","product","metafield","productVariableInput","metafields","namespace","key","valueType","variables","input"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  DisplayText,\n  Form,\n  FormLayout,\n  Frame,\n  Layout,\n  Page,\n  PageActions,\n  TextField,\n  Card,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button,\n  Toast\n} from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [tkMetaId, setTkMetaId] = useState();\n\n  const [isSaved, setIsSaved] = useState(false);\n\n  const [isPdp, setIsPdp] = useState({});\n  const [isPdpChecked, setisPdpChecked] = useState(false);\n\n  const [isAr, setisAr] = useState({});\n  const [isArChecked, setIsArChecked] = useState(false);\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_PLAYER_PDP = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"pdp\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_AR_ENABLED = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"pdp\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const UPDATE_TK_ATTR = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n\n  const setPdpCheck = val => setisPdpChecked(val);\n  const setArCheck = val => setisAr(val);\n\n  const _createTKimage = id => {\n    const formatId = id => id.split(\"Product/\")[1];\n\n    const getImgObj = id => {\n      var fetchUrl = \"/api/images/\" + formatId(id);\n      var method = \"GET\";\n      fetch(fetchUrl, { method: method })\n        .then(response => response.json())\n        .then(json => {\n          // console.log(json.res.metafields)\n          // this.setState({tkMetaId: json.data})\n          console.log(json);\n          // setProdImg(json.data);\n        });\n    };\n    getImgObj(id);\n    // isPdp ? console.log(\"Yes this is a PDP tk item\") : console.log(\"No this is not a PDP item\");\n  };\n\n  return (\n    <div>\n      <Stack>\n        <Query query={props.query} variables={props.id}>\n          {({ loading, error, data, refetch }) => {\n            if (loading) return null;\n            if (error) return `Error! ${error}`;\n\n            return (\n              <div>\n                <Query\n                  query={GET_META_ID}\n                  variables={props.id}\n                  onCompleted={data => setTkMetaId(data)}\n                >\n                  {({ loading, error, data, refetch }) => {\n                    if (loading) return null;\n                    if (error) return `Error! ${error}`;\n\n                    return null;\n                  }}\n                </Query>\n\n                <Stack.Item fill>\n                  <h3>\n                    <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                  </h3>\n                </Stack.Item>\n\n                <Stack.Item>\n                  <Mutation\n                    mutation={UPDATE_TK_ID}\n                    onCompleted={() => setIsSaved(true)}\n                  >\n                    {(handleSubmit, { err, res }) => {\n                      const showError = err && (\n                        <Banner status=\"critical\">{err.message}</Banner>\n                      );\n\n                      return (\n                        <div>\n                          {/* <Frame> */}\n                          <Page>\n                            {/* <Layout> */}\n                            {!isSaved ? (\n                              <div></div>\n                            ) : (\n                              <Toast\n                                content=\"Saved\"\n                                onDismiss={() => setIsSaved(false)}\n                              ></Toast>\n                            )}\n\n                            <Layout.Section>{showError}</Layout.Section>\n                            {/* <Layout.Section> */}\n\n                            <Form>\n                              <FormLayout>\n                                <FormLayout.Group>\n                                  <TextField\n                                    value={value}\n                                    onFocus={() =>\n                                      setValue(\n                                        !data.product.metafield\n                                          ? \"No Threekit ID\"\n                                          : data.product.metafield.value\n                                      )\n                                    }\n                                    onChange={handleChange}\n                                    id={data.product.id}\n                                    ariaControls={data.product.id}\n                                    placeholder={\n                                      !data.product.metafield\n                                        ? \"No Threekit ID\"\n                                        : data.product.metafield.value\n                                    }\n                                    connectedRight={\n                                      <Button\n                                        onClick={() => {\n                                          let productVariableInput;\n                                          if (!data.product.metafield) {\n                                            productVariableInput = {\n                                              id: props.id.id,\n                                              metafields: [\n                                                {\n                                                  namespace: \"threekit\",\n                                                  key: \"assetid\",\n                                                  value: value,\n                                                  valueType: \"STRING\"\n                                                }\n                                              ]\n                                            };\n                                          } else {\n                                            productVariableInput = {\n                                              id: props.id.id,\n                                              metafields: [\n                                                {\n                                                  namespace: \"threekit\",\n                                                  key: \"assetid\",\n                                                  value: value,\n                                                  valueType: \"STRING\",\n                                                  id:\n                                                    tkMetaId.product.metafield\n                                                      .id\n                                                }\n                                              ]\n                                            };\n                                          }\n\n                                          handleSubmit(\n                                            {\n                                              variables: {\n                                                input: productVariableInput\n                                              }\n                                            }\n\n                                            // _createTKimage(props.id.id)\n                                          );\n                                        }}\n                                      >\n                                        Save\n                                      </Button>\n                                    }\n                                  ></TextField>\n                                </FormLayout.Group>\n                              </FormLayout>\n                            </Form>\n                          </Page>\n                          {/* </Frame> */}\n                        </div>\n                      );\n                    }}\n                  </Mutation>\n                </Stack.Item>\n              </div>\n            );\n          }}\n        </Query>\n        <Stack.Item>\n          <Query\n            query={IS_PLAYER_PDP}\n            variables={props.id}\n            onCompleted={data => setIsPdp(data)}\n          >\n            {({ loading, error, data, refetch }) => {\n              if (loading) return null;\n              if (error) return `Error! ${error}`;\n              console.log(data);\n              return (\n                <Mutation\n                  mutation={UPDATE_TK_ATTR}\n                  onCompleted={() => setIsSaved(true)}\n                >\n                  {(handleSubmit, { err, res }) => {\n                    const showError = err && (\n                      <Banner status=\"critical\">{err.message}</Banner>\n                    );\n                    if (\n                      !data.product.metafield ||\n                      data.product.metafield.value == \"false\"\n                    ) {\n                      useEffect(() => {\n                        setisPdpChecked(false);\n                      }, [setisPdpChecked]);\n                    } else {\n                      useEffect(() => {\n                        setisPdpChecked(true);\n                      }, [setisPdpChecked]);\n                    }\n\n                    return (\n                      <div>\n                        <Checkbox\n                          label=\"Display on PDP\"\n                          checked={isPdpChecked}\n                          onChange={() => {\n                            let productVariableInput;\n                            if (!data.product.metafield) {\n                              isPdpChecked\n                                ? (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"pdp\",\n                                        value: \"false\",\n                                        valueType: \"STRING\"\n                                      }\n                                    ]\n                                  })\n                                : (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"pdp\",\n                                        value: \"true\",\n                                        valueType: \"STRING\"\n                                      }\n                                    ]\n                                  });\n                            } else {\n                              isPdpChecked\n                                ? (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"pdp\",\n                                        value: \"false\",\n                                        valueType: \"STRING\",\n                                        id: isPdp.product.metafield.id\n                                      }\n                                    ]\n                                  })\n                                : (productVariableInput = {\n                                    id: props.id.id,\n                                    metafields: [\n                                      {\n                                        namespace: \"threekit\",\n                                        key: \"pdp\",\n                                        value: \"true\",\n                                        valueType: \"STRING\",\n                                        id: isPdp.product.metafield.id\n                                      }\n                                    ]\n                                  });\n                            }\n\n                            handleSubmit({\n                              variables: {\n                                input: productVariableInput\n                              }\n                            });\n                          }}\n                          //\n                          onFocus={() =>\n                            isPdpChecked\n                              ? setPdpCheck(false)\n                              : setPdpCheck(true)\n                          }\n                        />\n                      </div>\n                    );\n                  }}\n                </Mutation>\n              );\n            }}\n          </Query>\n        </Stack.Item>\n        <Stack.Item>\n          {isPdpChecked ? (\n            <Stack.Item>\n              <Query\n                query={IS_AR_ENABLED}\n                variables={props.id}\n                onCompleted={res => setisAr(res)}\n              >\n                {({ loading, error, res, refetch }) => {\n                  if (loading) return null;\n                  if (error) return `Error! ${error}`;\n                  console.log(res);\n                  // return (\n                  //   <Mutation\n                  //     mutation={UPDATE_TK_ATTR}\n                  //     onCompleted={() => setIsSaved(true)}\n                  //   >\n                  //     {(handleSubmit, { err, res }) => {\n                  //       const showError = err && (\n                  //         <Banner status=\"critical\">{err.message}</Banner>\n                  //       );\n                  //       if (\n                  //         !res.product.metafield ||\n                  //         res.product.metafield.value == \"false\"\n                  //       ) {\n                  //         useEffect(() => {\n                  //           setIsArChecked(false);\n                  //         }, [setIsArChecked]);\n                  //       } else {\n                  //         useEffect(() => {\n                  //           setIsArChecked(true);\n                  //         }, [setIsArChecked]);\n                  //       }\n\n                  //       return (\n                  //         <div>\n                  //           <Checkbox\n                  //             label=\"Enable AR\"\n                  //             checked={isArChecked}\n                  //             onChange={() => {\n                  //               let productVariableInput;\n                  //               if (!res.product.metafield) {\n                  //                 isArChecked\n                  //                   ? (productVariableInput = {\n                  //                       id: props.id.id,\n                  //                       metafields: [\n                  //                         {\n                  //                           namespace: \"threekit\",\n                  //                           key: \"ar\",\n                  //                           value: \"false\",\n                  //                           valueType: \"STRING\"\n                  //                         }\n                  //                       ]\n                  //                     })\n                  //                   : (productVariableInput = {\n                  //                       id: props.id.id,\n                  //                       metafields: [\n                  //                         {\n                  //                           namespace: \"threekit\",\n                  //                           key: \"ar\",\n                  //                           value: \"true\",\n                  //                           valueType: \"STRING\"\n                  //                         }\n                  //                       ]\n                  //                     });\n                  //               } else {\n                  //                 isArChecked\n                  //                   ? (productVariableInput = {\n                  //                       id: props.id.id,\n                  //                       metafields: [\n                  //                         {\n                  //                           namespace: \"threekit\",\n                  //                           key: \"ar\",\n                  //                           value: \"false\",\n                  //                           valueType: \"STRING\",\n                  //                           id: isAr.product.metafield.id\n                  //                         }\n                  //                       ]\n                  //                     })\n                  //                   : (productVariableInput = {\n                  //                       id: props.id.id,\n                  //                       metafields: [\n                  //                         {\n                  //                           namespace: \"threekit\",\n                  //                           key: \"ar\",\n                  //                           value: \"true\",\n                  //                           valueType: \"STRING\",\n                  //                           id: isAr.product.metafield.id\n                  //                         }\n                  //                       ]\n                  //                     });\n                  //               }\n\n                  //               handleSubmit({\n                  //                 variables: {\n                  //                   input: productVariableInput\n                  //                 }\n                  //               });\n                  //             }}\n                  //             //\n                  //             onFocus={() =>\n                  //               isArChecked\n                  //                 ? setArCheck(false)\n                  //                 : setArCheck(true)\n                  //             }\n                  //           />\n                  //         </div>\n                  //       );\n                  //     }}\n                  //   </Mutation>\n                  // );\n                }}\n              </Query>\n            </Stack.Item>\n          ) : (\n            \"\"\n          )}\n        </Stack.Item>\n      </Stack>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"]},"metadata":{},"sourceType":"module"}