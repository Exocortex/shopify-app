{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from \"graphql-tag\";\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail, TextField, Button } from \"@shopify/polaris\";\nimport store from \"store-js\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport { Context } from \"@shopify/app-bridge-react\";\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst GET_TK_PRODUCT_IDS = gql`\n  query {\n    shop {\n      metafield(namespace: \"threekit\", key: \"items\") {\n        id\n        value\n      }\n    }\n  }\n`;\nconst GET_TK_ASSET_ID = gql`\n  query($id: ID!) {\n    product(id: $id) {\n      metafield(namespace: \"threekit\", key: \"assetid\") {\n        value\n        id\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      ids: [],\n      tkId: {}\n    });\n\n    _defineProperty(this, \"_queryMe\", data => {\n      if (data.shop.metafield == null) {\n        return null;\n      } else {\n        const str = JSON.parse(data.shop.metafield.value);\n        let arr;\n        arr = str.ids.split(\",\");\n        this.setState({\n          ids: arr.map(id => \"gid://shopify/Product/\" + id)\n        });\n      }\n    });\n\n    _defineProperty(this, \"_setTkID\", data => {\n      this.setState({\n        tkId: data\n      });\n      console.log(data);\n    });\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\n    };\n\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n\n    const getTkAsset = () => {\n      return __jsx(\"div\", null, __jsx(Query, {\n        query: GET_TK_ASSET_ID,\n        onCompleted: data => this._setTkID(data)\n      }, () => {\n        console.log('set');\n        console.log(this.state);\n        return null;\n      }));\n    };\n\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_TK_PRODUCT_IDS,\n      onCompleted: data => this._queryMe(data)\n    }, () => {\n      return __jsx(\"div\", null, __jsx(\"p\", null, \"Resource list\"));\n    }), \" \", __jsx(Query, {\n      query: GET_PRODUCTS_BY_ID,\n      variables: {\n        ids: store.get(\"ids\")\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n      if (error) return __jsx(\"div\", null, error.message);\n      console.log(data);\n      return __jsx(Card, null, __jsx(ResourceList, {\n        showHeader: true,\n        resourceName: {\n          singular: \"Product\",\n          plural: \"Products\"\n        },\n        items: data.nodes,\n        renderItem: item => {\n          const media = __jsx(Thumbnail, {\n            source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : \"\",\n            alt: item.images.edges[0] ? item.images.edges[0].node.altText : \"\"\n          });\n\n          const price = item.variants.edges[0].node.price;\n          return __jsx(ResourceList.Item, {\n            id: item.id,\n            media: media,\n            accessibilityLabel: `View details for ${item.title}`,\n            onClick: () => {\n              getTkAsset;\n              console.log(item);\n            }\n          }, __jsx(Stack, null, __jsx(Stack.Item, {\n            fill: true\n          }, __jsx(\"h3\", null, __jsx(TextStyle, {\n            variation: \"strong\"\n          }, item.title))), __jsx(Stack.Item, null, __jsx(TextField, {\n            label: \"TK ID\",\n            value: \"\"\n          }), __jsx(Button, null, \"Load TK ID\"), __jsx(Button, null, \"Save\")), __jsx(Stack.Item, null)));\n        }\n      }));\n    }));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ResourceList.js"],"names":["gql","Query","ApolloConsumer","Card","ResourceList","Stack","TextStyle","Thumbnail","TextField","Button","store","Redirect","Context","GET_PRODUCTS_BY_ID","GET_TK_PRODUCT_IDS","GET_TK_ASSET_ID","ResourceListWithProducts","React","Component","ids","tkId","data","shop","metafield","str","JSON","parse","value","arr","split","setState","map","id","console","log","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","twoWeeksFromNow","Date","now","toDateString","getTkAsset","_setTkID","state","_queryMe","get","loading","error","message","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","title"],"mappings":"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","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { Query, ApolloConsumer } from \"react-apollo\";\r\nimport {\r\n  Card,\r\n  ResourceList,\r\n  Stack,\r\n  TextStyle,\r\n  Thumbnail,\r\n  TextField,\r\n  Button\r\n} from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport { Redirect } from \"@shopify/app-bridge/actions\";\r\nimport { Context } from \"@shopify/app-bridge-react\";\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!) {\r\n    nodes(ids: $ids) {\r\n      ... on Product {\r\n        title\r\n        handle\r\n        descriptionHtml\r\n        id\r\n        images(first: 1) {\r\n          edges {\r\n            node {\r\n              originalSrc\r\n              altText\r\n            }\r\n          }\r\n        }\r\n        variants(first: 1) {\r\n          edges {\r\n            node {\r\n              price\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_PRODUCT_IDS = gql`\r\n  query {\r\n    shop {\r\n      metafield(namespace: \"threekit\", key: \"items\") {\r\n        id\r\n        value\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_ASSET_ID = gql`\r\n  query($id: ID!) {\r\n    product(id: $id) {\r\n      metafield(namespace: \"threekit\", key: \"assetid\") {\r\n        value\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass ResourceListWithProducts extends React.Component {\r\n  state = {\r\n    ids: [],\r\n    tkId: {}\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null) {\r\n      return null;\r\n    } else {\r\n      const str = JSON.parse(data.shop.metafield.value);\r\n      let arr;\r\n      arr = str.ids.split(\",\");\r\n\r\n      this.setState({\r\n        ids: arr.map(id => \"gid://shopify/Product/\" + id)\r\n      });\r\n    }\r\n  };\r\n\r\n  _setTkID = data => {\r\n      this.setState({\r\n        tkId: data\r\n      });\r\n    console.log(data)\r\n  };\r\n\r\n  static contextType = Context;\r\n  render() {\r\n    const app = this.context;\r\n    const redirectToProduct = () => {\r\n      const redirect = Redirect.create(app);\r\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\r\n    };\r\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\r\n\r\n    const getTkAsset = () => {\r\n      return (\r\n        <div>\r\n          <Query\r\n            query={GET_TK_ASSET_ID}\r\n            onCompleted={data => this._setTkID(data)}\r\n          >\r\n            {() => {\r\n              console.log('set')\r\n              console.log(this.state)\r\n              return null;\r\n            }}\r\n          </Query>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Query\r\n          query={GET_TK_PRODUCT_IDS}\r\n          onCompleted={data => this._queryMe(data)}\r\n        >\r\n          {() => {\r\n            return (\r\n              <div>\r\n                <p>Resource list</p>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>{\" \"}\r\n        {/* this.state.ids */}\r\n        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get(\"ids\") }}>\r\n          {({ data, loading, error }) => {\r\n            if (loading) return <div>Loading…</div>;\r\n            if (error) return <div>{error.message}</div>;\r\n            console.log(data);\r\n            return (\r\n              <Card>\r\n                <ResourceList\r\n                  showHeader\r\n                  resourceName={{\r\n                    singular: \"Product\",\r\n                    plural: \"Products\"\r\n                  }}\r\n                  items={data.nodes}\r\n                  renderItem={item => {\r\n                    const media = (\r\n                      <Thumbnail\r\n                        source={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.originalSrc\r\n                            : \"\"\r\n                        }\r\n                        alt={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.altText\r\n                            : \"\"\r\n                        }\r\n                      />\r\n                    );\r\n                    const price = item.variants.edges[0].node.price;\r\n                    return (\r\n                      <ResourceList.Item\r\n                        id={item.id}\r\n                        media={media}\r\n                        accessibilityLabel={`View details for ${item.title}`}\r\n                        onClick={() => {\r\n                          getTkAsset\r\n                          console.log(item);\r\n                        }}\r\n                      >\r\n                        <Stack>\r\n                          <Stack.Item fill>\r\n                            <h3>\r\n                              <TextStyle variation=\"strong\">\r\n                                {item.title}\r\n                              </TextStyle>\r\n                            </h3>\r\n                          </Stack.Item>\r\n                          <Stack.Item>\r\n                            <TextField label=\"TK ID\" value={\"\"} />\r\n                            <Button>Load TK ID</Button>\r\n\r\n                            <Button>Save</Button>\r\n                          </Stack.Item>\r\n                          <Stack.Item></Stack.Item>\r\n                        </Stack>\r\n                      </ResourceList.Item>\r\n                    );\r\n                  }}\r\n                />\r\n              </Card>\r\n            );\r\n          }}\r\n        </Query>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceListWithProducts;\r\n"]},"metadata":{},"sourceType":"module"}