{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    shop {\\n      metafield(namespace: \\\"threekit\\\", key: \\\"items\\\") {\\n        id\\n        value\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getProducts($ids: [ID!]!) {\\n    nodes(ids: $ids) {\\n      ... on Product {\\n        title\\n        handle\\n        descriptionHtml\\n        id\\n        images(first: 1) {\\n          edges {\\n            node {\\n              originalSrc\\n              altText\\n            }\\n          }\\n        }\\n        variants(first: 1) {\\n          edges {\\n            node {\\n              price\\n              id\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from \"@shopify/polaris\";\nimport store from \"store-js\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport { Context } from \"@shopify/app-bridge-react\";\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());\nvar GET_TK_PRODUCT_IDS = gql(_templateObject2());\n\nvar ResourceListWithProducts = /*#__PURE__*/function (_React$Component) {\n  _inherits(ResourceListWithProducts, _React$Component);\n\n  function ResourceListWithProducts() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ResourceListWithProducts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResourceListWithProducts)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      ids: [],\n      prod: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_queryMe\", function (data) {\n      if (data.shop.metafield == null) {\n        return null;\n      } else {\n        var str = JSON.parse(data.shop.metafield.value);\n        var arr;\n        arr = str.ids.split(\",\");\n\n        _this.setState({\n          ids: arr.map(function (id) {\n            return \"gid://shopify/Product/\" + id;\n          })\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onProductsFetched\", function (data) {\n      return _this.setState({\n        prod: data\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ResourceListWithProducts, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var app = this.context;\n\n      var redirectToProduct = function redirectToProduct() {\n        var redirect = Redirect.create(app);\n        redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\n      };\n\n      var twoWeeksFromNow = new Date(_Date$now() + 12096e5).toDateString();\n      return __jsx(\"div\", null, __jsx(Query, {\n        query: GET_TK_PRODUCT_IDS,\n        onCompleted: function onCompleted(data) {\n          return _this2._queryMe(data);\n        }\n      }, function () {\n        return __jsx(\"div\", null, __jsx(\"p\", null, \"NEW STATE\"), __jsx(\"p\", null, _JSON$stringify(_this2.state)));\n      }), __jsx(\"p\", null, \"HEllo, world\"), __jsx(ApolloConsumer, null, function (client) {\n        return __jsx(\"div\", null, _this2.state.prod && __jsx(\"p\", null, \"Product\"), __jsx(\"button\", {\n          onClick: function _callee() {\n            var _ref, data;\n\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return _regeneratorRuntime.awrap(client.query({\n                      query: GET_TK_PRODUCT_IDS\n                    }));\n\n                  case 2:\n                    _ref = _context.sent;\n                    data = _ref.data;\n\n                    _this2.onProductsFetched(data);\n\n                    console.log(data);\n\n                  case 6:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            });\n          }\n        }, \"Click me!\"));\n      }));\n    }\n  }]);\n\n  return ResourceListWithProducts;\n}(React.Component);\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ResourceList.js"],"names":["gql","Query","ApolloConsumer","Card","ResourceList","Stack","TextStyle","Thumbnail","store","Redirect","Context","GET_PRODUCTS_BY_ID","GET_TK_PRODUCT_IDS","ResourceListWithProducts","ids","prod","data","shop","metafield","str","JSON","parse","value","arr","split","setState","map","id","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","twoWeeksFromNow","Date","toDateString","_queryMe","state","client","query","onProductsFetched","console","log","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,EAAgBC,cAAhB,QAAsC,cAAtC;AACA,SACEC,IADF,EAEEC,YAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,SALF,QAMO,kBANP;AAOA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,IAAMC,kBAAkB,GAAGX,GAAH,mBAAxB;AA6BA,IAAMY,kBAAkB,GAAGZ,GAAH,oBAAxB;;IAWMa,wB;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,GAAG,EAAE,EADC;AAENC,MAAAA,IAAI,EAAE;AAFA,K;;+DAKG,UAAAC,IAAI,EAAI;AACjB,UAAIA,IAAI,CAACC,IAAL,CAAUC,SAAV,IAAuB,IAA3B,EAAiC;AAC/B,eAAO,IAAP;AACD,OAFD,MAEO;AACL,YAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACC,IAAL,CAAUC,SAAV,CAAoBI,KAA/B,CAAZ;AACA,YAAIC,GAAJ;AACAA,QAAAA,GAAG,GAAGJ,GAAG,CAACL,GAAJ,CAAQU,KAAR,CAAc,GAAd,CAAN;;AAEA,cAAKC,QAAL,CAAc;AACZX,UAAAA,GAAG,EAAES,GAAG,CAACG,GAAJ,CAAQ,UAAAC,EAAE;AAAA,mBAAI,2BAA2BA,EAA/B;AAAA,WAAV;AADO,SAAd;AAGD;AACF,K;;wEAEmB,UAAAX,IAAI;AAAA,aAAI,MAAKS,QAAL,CAAc;AAACV,QAAAA,IAAI,EAAEC;AAAP,OAAd,CAAJ;AAAA,K;;;;;;;6BAGf;AAAA;;AACP,UAAMY,GAAG,GAAG,KAAKC,OAAjB;;AACA,UAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,YAAMC,QAAQ,GAAGtB,QAAQ,CAACuB,MAAT,CAAgBJ,GAAhB,CAAjB;AACAG,QAAAA,QAAQ,CAACE,QAAT,CAAkBxB,QAAQ,CAACyB,MAAT,CAAgBC,GAAlC,EAAuC,gBAAvC;AACD,OAHD;;AAIA,UAAMC,eAAe,GAAG,IAAIC,IAAJ,CAAS,cAAa,OAAtB,EAA+BC,YAA/B,EAAxB;AAEA,aACE,mBACE,MAAC,KAAD;AACE,QAAA,KAAK,EAAE1B,kBADT;AAEE,QAAA,WAAW,EAAE,qBAAAI,IAAI;AAAA,iBAAI,MAAI,CAACuB,QAAL,CAAcvB,IAAd,CAAJ;AAAA;AAFnB,SAIG,YAAM;AACL,eACE,mBACE,6BADF,EAEE,iBAAI,gBAAe,MAAI,CAACwB,KAApB,CAAJ,CAFF,CADF;AAMD,OAXH,CADF,EAcE,gCAdF,EAeE,MAAC,cAAD,QACC,UAAAC,MAAM;AAAA,eACL,mBACG,MAAI,CAACD,KAAL,CAAWzB,IAAX,IAAmB,2BADtB,EAEE;AACE,UAAA,OAAO,EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDACgB0B,MAAM,CAACC,KAAP,CAAa;AAClCA,sBAAAA,KAAK,EAAE9B;AAD2B,qBAAb,CADhB;;AAAA;AAAA;AACCI,oBAAAA,IADD,QACCA,IADD;;AAIP,oBAAA,MAAI,CAAC2B,iBAAL,CAAuB3B,IAAvB;;AACA4B,oBAAAA,OAAO,CAACC,GAAR,CAAY7B,IAAZ;;AALO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADX,uBAFF,CADK;AAAA,OADP,CAfF,CADF;AAoCD;;;;EAnEoC8B,KAAK,CAACC,S;;gBAAvClC,wB,iBAsBiBH,O;;AAgDvB,eAAeG,wBAAf","sourcesContent":["import gql from \"graphql-tag\";\r\nimport { Query, ApolloConsumer } from \"react-apollo\";\r\nimport {\r\n  Card,\r\n  ResourceList,\r\n  Stack,\r\n  TextStyle,\r\n  Thumbnail\r\n} from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport { Redirect } from \"@shopify/app-bridge/actions\";\r\nimport { Context } from \"@shopify/app-bridge-react\";\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!) {\r\n    nodes(ids: $ids) {\r\n      ... on Product {\r\n        title\r\n        handle\r\n        descriptionHtml\r\n        id\r\n        images(first: 1) {\r\n          edges {\r\n            node {\r\n              originalSrc\r\n              altText\r\n            }\r\n          }\r\n        }\r\n        variants(first: 1) {\r\n          edges {\r\n            node {\r\n              price\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_PRODUCT_IDS = gql`\r\n  query {\r\n    shop {\r\n      metafield(namespace: \"threekit\", key: \"items\") {\r\n        id\r\n        value\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass ResourceListWithProducts extends React.Component {\r\n  state = {\r\n    ids: [],\r\n    prod: {}\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null) {\r\n      return null;\r\n    } else {\r\n      const str = JSON.parse(data.shop.metafield.value);\r\n      let arr;\r\n      arr = str.ids.split(\",\");\r\n\r\n      this.setState({\r\n        ids: arr.map(id => \"gid://shopify/Product/\" + id)\r\n      });\r\n    }\r\n  };\r\n\r\n  onProductsFetched = data => this.setState({prod: data});\r\n\r\n  static contextType = Context;\r\n  render() {\r\n    const app = this.context;\r\n    const redirectToProduct = () => {\r\n      const redirect = Redirect.create(app);\r\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\r\n    };\r\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\r\n\r\n    return (\r\n      <div>\r\n        <Query\r\n          query={GET_TK_PRODUCT_IDS}\r\n          onCompleted={data => this._queryMe(data)}\r\n        >\r\n          {() => {\r\n            return (\r\n              <div>\r\n                <p>NEW STATE</p>\r\n                <p>{JSON.stringify(this.state)}</p>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n        <p>HEllo, world</p>\r\n        <ApolloConsumer>\r\n        {client => (\r\n          <div>\r\n            {this.state.prod && <p>Product</p>}\r\n            <button\r\n              onClick={async () => {\r\n                const { data } = await client.query({\r\n                  query: GET_TK_PRODUCT_IDS,\r\n                });\r\n                this.onProductsFetched(data);\r\n                console.log(data)\r\n              }}\r\n            >\r\n              Click me!\r\n            </button>\r\n          </div>\r\n        )}\r\n      </ApolloConsumer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceListWithProducts;\r\n"]},"metadata":{},"sourceType":"module"}