{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Banner, Form, FormLayout, Layout, TextField, Stack, TextStyle, Checkbox, Button, Toast } from \"@shopify/polaris\";\nimport { LoadingText } from \"../components/Loading\";\nimport SnippetGen from \"../components/SnippetGen\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const {\n    0: value,\n    1: setValue\n  } = useState(\"\");\n  const {\n    0: tkMetaId,\n    1: setTkMetaId\n  } = useState();\n  const {\n    0: isSaved,\n    1: setIsSaved\n  } = useState(false);\n  const {\n    0: isPdp,\n    1: setIsPdp\n  } = useState({});\n  const {\n    0: isChecked,\n    1: setIsChecked\n  } = useState(false);\n  const {\n    0: isAr,\n    1: setIsAr\n  } = useState({});\n  const {\n    0: arChecked,\n    1: setArChecked\n  } = useState(false);\n  const {\n    0: modalActive,\n    1: setModalActive\n  } = useState(false);\n  const handleModalChange = useCallback(() => setModalActive(!modalActive), [modalActive]);\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n  const IS_PLAYER_PDP = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"pdp\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n  const IS_AR_ENABLED = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"ARen\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n  const UPDATE_TK_ATTR = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n\n  const setCheck = val => setIsChecked(val);\n\n  const setArCheck = val => setArChecked(val);\n\n  const updateMeta = (data, bool, namespace, key, obj, action) => {\n    let productVariableInput;\n\n    if (!data.product.metafield) {\n      bool ? productVariableInput = {\n        id: props.id.id,\n        metafields: [{\n          namespace: namespace,\n          key: key,\n          value: \"false\",\n          valueType: \"STRING\"\n        }]\n      } : productVariableInput = {\n        id: props.id.id,\n        metafields: [{\n          namespace: namespace,\n          key: key,\n          value: \"true\",\n          valueType: \"STRING\"\n        }]\n      };\n    } else {\n      bool ? productVariableInput = {\n        id: props.id.id,\n        metafields: [{\n          namespace: namespace,\n          key: key,\n          value: \"false\",\n          valueType: \"STRING\",\n          id: obj.product.metafield.id\n        }]\n      } : productVariableInput = {\n        id: props.id.id,\n        metafields: [{\n          namespace: namespace,\n          key: key,\n          value: \"true\",\n          valueType: \"STRING\",\n          id: obj.product.metafield.id\n        }]\n      };\n    }\n\n    action({\n      variables: {\n        input: productVariableInput\n      }\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(Stack, {\n    distribution: \"fill\"\n  }, __jsx(Form, null, __jsx(FormLayout, null, __jsx(Query, {\n    query: props.query,\n    variables: props.id\n  }, ({\n    loading,\n    error,\n    data,\n    refetch\n  }) => {\n    if (loading) return __jsx(LoadingText, null);\n    if (error) return `Error! ${error}`;\n    return __jsx(\"div\", null, __jsx(Query, {\n      query: GET_META_ID,\n      variables: props.id,\n      onCompleted: data => setTkMetaId(data)\n    }, ({\n      loading,\n      error,\n      data,\n      refetch\n    }) => {\n      if (loading) return null;\n      if (error) return `Error! ${error}`;\n      return null;\n    }), __jsx(Stack.Item, null, __jsx(\"h3\", null, __jsx(TextStyle, {\n      variation: \"strong\"\n    }, props.title))), __jsx(Stack.Item, null, __jsx(Mutation, {\n      mutation: UPDATE_TK_ID,\n      onCompleted: () => setIsSaved(true)\n    }, (handleSubmit, {\n      err,\n      res\n    }) => {\n      const showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      return __jsx(\"div\", null, !isSaved ? __jsx(\"div\", null) : __jsx(Toast, {\n        content: \"Saved\",\n        onDismiss: () => setIsSaved(false)\n      }), __jsx(Layout.Section, null, showError), __jsx(TextField, {\n        value: value,\n        onFocus: () => setValue(!data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value),\n        onChange: handleChange,\n        id: data.product.id,\n        ariaControls: data.product.id,\n        placeholder: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n        connectedRight: __jsx(\"div\", null, __jsx(SnippetGen, {\n          handleChange: handleModalChange,\n          active: modalActive,\n          title: `${props.title}`,\n          assetid: !data.product.metafield ? \"No Threekit ID\" : data.product.metafield.value,\n          ar: \"true\",\n          env: \"preview\"\n        }), __jsx(Button, {\n          primary: true,\n          onClick: () => {\n            let productVariableInput;\n\n            if (!data.product.metafield) {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\"\n                }]\n              };\n            } else {\n              productVariableInput = {\n                id: props.id.id,\n                metafields: [{\n                  namespace: \"threekit\",\n                  key: \"assetid\",\n                  value: value,\n                  valueType: \"STRING\",\n                  id: tkMetaId.product.metafield.id\n                }]\n              };\n            }\n\n            handleSubmit({\n              variables: {\n                input: productVariableInput\n              }\n            });\n          }\n        }, \"Save\"), __jsx(Button, {\n          onClick: handleModalChange\n        }, \"Embed this product\"))\n      }));\n    })));\n  }), __jsx(Stack.Item, null, __jsx(Query, {\n    query: IS_PLAYER_PDP,\n    variables: props.id,\n    onCompleted: data => setIsPdp(data)\n  }, ({\n    loading,\n    error,\n    data,\n    refetch\n  }) => {\n    if (loading) return __jsx(LoadingText, null);\n    if (error) return `Error! ${error}`;\n    console.log(data);\n    return __jsx(Mutation, {\n      mutation: UPDATE_TK_ATTR,\n      onCompleted: () => setIsSaved(true)\n    }, (handleSubmit, {\n      err,\n      res\n    }) => {\n      const showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      if (!data.product.metafield || data.product.metafield.value == \"false\") {\n        useEffect(() => {\n          setIsChecked(false);\n        }, [setIsChecked]);\n      } else {\n        useEffect(() => {\n          setIsChecked(true);\n        }, [setIsChecked]);\n      }\n\n      return __jsx(\"div\", null, __jsx(\"p\", null, \"PDP Controls.\"), __jsx(Checkbox, {\n        label: \"Display on PDP\",\n        checked: isChecked,\n        onChange: () => updateMeta(data, isChecked, \"threekit\", \"pdp\", isPdp, handleSubmit),\n        onFocus: () => isChecked ? setCheck(false) : setCheck(true)\n      }));\n    });\n  })), __jsx(Stack.Item, null, __jsx(Query, {\n    query: IS_AR_ENABLED,\n    variables: props.id,\n    onCompleted: data => setIsAr(data)\n  }, ({\n    loading,\n    error,\n    data,\n    refetch\n  }) => {\n    if (loading) return __jsx(LoadingText, null);\n    if (error) return `Error! ${error}`;\n    console.log(data);\n    return __jsx(Mutation, {\n      mutation: UPDATE_TK_ATTR,\n      onCompleted: () => setIsSaved(true)\n    }, (handleArSubmit, {\n      err,\n      res\n    }) => {\n      const showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      if (!data.product.metafield || data.product.metafield.value == \"false\") {\n        useEffect(() => {\n          setArChecked(false);\n        }, [setArChecked]);\n      } else {\n        useEffect(() => {\n          setArChecked(true);\n        }, [setArChecked]);\n      }\n\n      return __jsx(\"div\", null, __jsx(Checkbox, {\n        label: \"AR Enabled\",\n        checked: arChecked,\n        onChange: () => updateMeta(data, arChecked, \"threekit\", \"ARen\", isAr, handleArSubmit),\n        onFocus: () => arChecked ? setArCheck(false) : setArCheck(true)\n      }));\n    });\n  }))))));\n}\n\nexport default ThreekitForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ThreekitForm.js"],"names":["React","useState","useCallback","useEffect","Query","Mutation","gql","Banner","Form","FormLayout","Layout","TextField","Stack","TextStyle","Checkbox","Button","Toast","LoadingText","SnippetGen","ThreekitForm","props","value","setValue","tkMetaId","setTkMetaId","isSaved","setIsSaved","isPdp","setIsPdp","isChecked","setIsChecked","isAr","setIsAr","arChecked","setArChecked","modalActive","setModalActive","handleModalChange","UPDATE_TK_ID","GET_META_ID","IS_PLAYER_PDP","IS_AR_ENABLED","UPDATE_TK_ATTR","handleChange","newValue","setCheck","val","setArCheck","updateMeta","data","bool","namespace","key","obj","action","productVariableInput","product","metafield","id","metafields","valueType","variables","input","query","loading","error","refetch","title","handleSubmit","err","res","showError","message","console","log","handleArSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  Form,\n  FormLayout,\n  Layout,\n  TextField,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button,\n  Toast,\n} from \"@shopify/polaris\";\nimport { LoadingText } from \"../components/Loading\";\nimport SnippetGen from \"../components/SnippetGen\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [tkMetaId, setTkMetaId] = useState();\n  const [isSaved, setIsSaved] = useState(false);\n\n  const [isPdp, setIsPdp] = useState({});\n  const [isChecked, setIsChecked] = useState(false);\n\n  const [isAr, setIsAr] = useState({});\n  const [arChecked, setArChecked] = useState(false);\n\n  const [modalActive, setModalActive] = useState(false);\n  const handleModalChange = useCallback(() => setModalActive(!modalActive), [\n    modalActive,\n  ]);\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_PLAYER_PDP = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"pdp\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_AR_ENABLED = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"ARen\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const UPDATE_TK_ATTR = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  const setCheck = (val) => setIsChecked(val);\n  const setArCheck = (val) => setArChecked(val);\n\n  const updateMeta = (data, bool, namespace, key, obj, action) => {\n    let productVariableInput;\n    if (!data.product.metafield) {\n      bool\n        ? (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"false\",\n                valueType: \"STRING\",\n              },\n            ],\n          })\n        : (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"true\",\n                valueType: \"STRING\",\n              },\n            ],\n          });\n    } else {\n      bool\n        ? (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"false\",\n                valueType: \"STRING\",\n                id: obj.product.metafield.id,\n              },\n            ],\n          })\n        : (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"true\",\n                valueType: \"STRING\",\n                id: obj.product.metafield.id,\n              },\n            ],\n          });\n    }\n\n    action({\n      variables: {\n        input: productVariableInput,\n      },\n    });\n  };\n  return (\n    <div>\n      <Stack distribution=\"fill\">\n        <Form>\n          <FormLayout>\n            <Query query={props.query} variables={props.id}>\n              {({ loading, error, data, refetch }) => {\n                if (loading) return <LoadingText />;\n                if (error) return `Error! ${error}`;\n\n                return (\n                  <div>\n                    <Query\n                      query={GET_META_ID}\n                      variables={props.id}\n                      onCompleted={(data) => setTkMetaId(data)}\n                    >\n                      {({ loading, error, data, refetch }) => {\n                        if (loading) return null;\n                        if (error) return `Error! ${error}`;\n\n                        return null;\n                      }}\n                    </Query>\n\n                    <Stack.Item>\n                      <h3>\n                        <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                      </h3>\n                    </Stack.Item>\n\n                    <Stack.Item>\n                      <Mutation\n                        mutation={UPDATE_TK_ID}\n                        onCompleted={() => setIsSaved(true)}\n                      >\n                        {(handleSubmit, { err, res }) => {\n                          const showError = err && (\n                            <Banner status=\"critical\">{err.message}</Banner>\n                          );\n\n                          return (\n                            <div>\n                              {!isSaved ? (\n                                <div></div>\n                              ) : (\n                                <Toast\n                                  content=\"Saved\"\n                                  onDismiss={() => setIsSaved(false)}\n                                ></Toast>\n                              )}\n\n                              <Layout.Section>{showError}</Layout.Section>\n\n                              <TextField\n                                value={value}\n                                onFocus={() =>\n                                  setValue(\n                                    !data.product.metafield\n                                      ? \"No Threekit ID\"\n                                      : data.product.metafield.value\n                                  )\n                                }\n                                onChange={handleChange}\n                                id={data.product.id}\n                                ariaControls={data.product.id}\n                                placeholder={\n                                  !data.product.metafield\n                                    ? \"No Threekit ID\"\n                                    : data.product.metafield.value\n                                }\n                                connectedRight={\n                                  <div>\n                                    <SnippetGen\n                                      handleChange={handleModalChange}\n                                      active={modalActive}\n                                      title={`${props.title}`}\n                                      assetid={\n                                        !data.product.metafield\n                                          ? \"No Threekit ID\"\n                                          : data.product.metafield.value\n                                      }\n                                      ar={\"true\"}\n                                      env={\"preview\"}\n                                    />\n                                    <Button\n                                      primary\n                                      onClick={() => {\n                                        let productVariableInput;\n                                        if (!data.product.metafield) {\n                                          productVariableInput = {\n                                            id: props.id.id,\n                                            metafields: [\n                                              {\n                                                namespace: \"threekit\",\n                                                key: \"assetid\",\n                                                value: value,\n                                                valueType: \"STRING\",\n                                              },\n                                            ],\n                                          };\n                                        } else {\n                                          productVariableInput = {\n                                            id: props.id.id,\n                                            metafields: [\n                                              {\n                                                namespace: \"threekit\",\n                                                key: \"assetid\",\n                                                value: value,\n                                                valueType: \"STRING\",\n                                                id:\n                                                  tkMetaId.product.metafield.id,\n                                              },\n                                            ],\n                                          };\n                                        }\n\n                                        handleSubmit({\n                                          variables: {\n                                            input: productVariableInput,\n                                          },\n                                        });\n                                      }}\n                                    >\n                                      Save\n                                    </Button>\n                                    <Button onClick={handleModalChange}>\n                                      Embed this product\n                                    </Button>\n                                  </div>\n                                }\n                              ></TextField>\n                            </div>\n                          );\n                        }}\n                      </Mutation>\n                    </Stack.Item>\n                  </div>\n                );\n              }}\n            </Query>\n\n            <Stack.Item>\n              <Query\n                query={IS_PLAYER_PDP}\n                variables={props.id}\n                onCompleted={(data) => setIsPdp(data)}\n              >\n                {({ loading, error, data, refetch }) => {\n                  if (loading) return <LoadingText />;\n                  if (error) return `Error! ${error}`;\n                  console.log(data);\n                  return (\n                    <Mutation\n                      mutation={UPDATE_TK_ATTR}\n                      onCompleted={() => setIsSaved(true)}\n                    >\n                      {(handleSubmit, { err, res }) => {\n                        const showError = err && (\n                          <Banner status=\"critical\">{err.message}</Banner>\n                        );\n                        if (\n                          !data.product.metafield ||\n                          data.product.metafield.value == \"false\"\n                        ) {\n                          useEffect(() => {\n                            setIsChecked(false);\n                          }, [setIsChecked]);\n                        } else {\n                          useEffect(() => {\n                            setIsChecked(true);\n                          }, [setIsChecked]);\n                        }\n\n                        return (\n                          <div>\n                            <p>\n                              PDP Controls.\n                            </p>\n                            <Checkbox\n                              label=\"Display on PDP\"\n                              checked={isChecked}\n                              onChange={() =>\n                                updateMeta(\n                                  data,\n                                  isChecked,\n                                  \"threekit\",\n                                  \"pdp\",\n                                  isPdp,\n                                  handleSubmit\n                                )\n                              }\n                              onFocus={() =>\n                                isChecked ? setCheck(false) : setCheck(true)\n                              }\n                            />\n                          </div>\n                        );\n                      }}\n                    </Mutation>\n                  );\n                }}\n              </Query>\n            </Stack.Item>\n            <Stack.Item>\n              <Query\n                query={IS_AR_ENABLED}\n                variables={props.id}\n                onCompleted={(data) => setIsAr(data)}\n              >\n                {({ loading, error, data, refetch }) => {\n                  if (loading) return <LoadingText />;\n                  if (error) return `Error! ${error}`;\n                  console.log(data);\n                  return (\n                    <Mutation\n                      mutation={UPDATE_TK_ATTR}\n                      onCompleted={() => setIsSaved(true)}\n                    >\n                      {(handleArSubmit, { err, res }) => {\n                        const showError = err && (\n                          <Banner status=\"critical\">{err.message}</Banner>\n                        );\n                        if (\n                          !data.product.metafield ||\n                          data.product.metafield.value == \"false\"\n                        ) {\n                          useEffect(() => {\n                            setArChecked(false);\n                          }, [setArChecked]);\n                        } else {\n                          useEffect(() => {\n                            setArChecked(true);\n                          }, [setArChecked]);\n                        }\n\n                        return (\n                          <div>\n                            <Checkbox\n                              label=\"AR Enabled\"\n                              checked={arChecked}\n                              onChange={() =>\n                                updateMeta(\n                                  data,\n                                  arChecked,\n                                  \"threekit\",\n                                  \"ARen\",\n                                  isAr,\n                                  handleArSubmit\n                                )\n                              }\n                              onFocus={() =>\n                                arChecked ? setArCheck(false) : setArCheck(true)\n                              }\n                            />\n                          </div>\n                        );\n                      }}\n                    </Mutation>\n                  );\n                }}\n              </Query>\n            </Stack.Item>\n          </FormLayout>\n        </Form>\n      </Stack>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"]},"metadata":{},"sourceType":"module"}