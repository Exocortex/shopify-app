{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    query($id: ID!) {\\n      product(id: $id) {\\n        metafield(namespace: \\\"threekit\\\", key: \\\"assetid\\\") {\\n          value\\n          id\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation($input: ProductInput!) {\\n      productUpdate(input: $input) {\\n        product {\\n          metafields(first: 100) {\\n            edges {\\n              node {\\n                id\\n                namespace\\n                key\\n                value\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback } from \"react\";\nimport { Query, Mutation, useQuery } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Banner, DisplayText, Form, FormLayout, Frame, Layout, Page, PageActions, TextField, Card, Stack, TextStyle, Checkbox, Button } from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  var _useState = useState(\"\"),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(),\n      tkMetaId = _useState2[0],\n      setTkMetaId = _useState2[1];\n\n  var UPDATE_TK_ID = gql(_templateObject());\n  var GET_META_ID = gql(_templateObject2());\n  var handleChange = useCallback(function (newValue) {\n    return setValue(newValue);\n  }, []);\n\n  var setTkMetaField = function setTkMetaField(id) {\n    return setTkMetaId(id);\n  };\n\n  return __jsx(\"div\", null, __jsx(Query, {\n    query: props.query,\n    variables: props.id // skip={!breed}\n\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data,\n        refetch = _ref.refetch;\n    if (loading) return null;\n    if (error) return \"Error! \".concat(error);\n    return __jsx(\"div\", null, __jsx(Stack, null, __jsx(Stack.Item, {\n      fill: true\n    }, __jsx(\"h3\", null, __jsx(TextStyle, {\n      variation: \"strong\"\n    }, props.title))), __jsx(Stack.Item, null, __jsx(Mutation, {\n      mutation: UPDATE_TK_ID\n    }, function (handleSubmit, _ref2) {\n      var err = _ref2.err,\n          res = _ref2.res;\n\n      var showError = err && __jsx(Banner, {\n        status: \"critical\"\n      }, err.message);\n\n      var showToast = res && res.productVariantUpdate && __jsx(Toast, {\n        content: \"Sucessfully updated\",\n        onDismiss: function onDismiss() {\n          return console.log(\"UPDATED\");\n        }\n      });\n\n      return __jsx(\"div\", null, showToast, __jsx(Query, {\n        query: props.query,\n        variables: props.id // skip={!breed}\n\n      }, function (_ref3) {\n        var loading = _ref3.loading,\n            error = _ref3.error,\n            data_tk = _ref3.data_tk,\n            refetch = _ref3.refetch;\n        if (loading) return null;\n        if (error) return \"Error! \".concat(error);\n        return __jsx(\"div\", null);\n      }));\n    }))));\n  }));\n}\n\nexport default ThreekitForm;","map":{"version":3,"sources":["/Users/willthompson/Documents/ThreeKit/Shopify/shopify-tutorial/components/ThreekitForm.js"],"names":["React","useState","useCallback","Query","Mutation","useQuery","gql","Banner","DisplayText","Form","FormLayout","Frame","Layout","Page","PageActions","TextField","Card","Stack","TextStyle","Checkbox","Button","ThreekitForm","props","value","setValue","tkMetaId","setTkMetaId","UPDATE_TK_ID","GET_META_ID","handleChange","newValue","setTkMetaField","id","query","loading","error","data","refetch","title","handleSubmit","err","res","showError","message","showToast","productVariantUpdate","console","log","data_tk"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Query, Mutation, useQuery } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  DisplayText,\n  Form,\n  FormLayout,\n  Frame,\n  Layout,\n  Page,\n  PageActions,\n  TextField,\n  Card,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button\n} from \"@shopify/polaris\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [tkMetaId, setTkMetaId] = useState();\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setValue(newValue), []);\n  const setTkMetaField = id => setTkMetaId(id);\n  return (\n    <div>\n      <Query\n        query={props.query}\n        variables={props.id}\n        // skip={!breed}\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n\n          return (\n            <div>\n              {/* <Card title={props.title}> */}\n              {/* {console.log(data)} */}\n\n              <Stack>\n                <Stack.Item fill>\n                  <h3>\n                    <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                  </h3>\n                </Stack.Item>\n                <Stack.Item>\n                  <Mutation mutation={UPDATE_TK_ID}>\n                    {(handleSubmit, { err, res }) => {\n                      const showError = err && (\n                        <Banner status=\"critical\">{err.message}</Banner>\n                      );\n                      const showToast = res && res.productVariantUpdate && (\n                        <Toast\n                          content=\"Sucessfully updated\"\n                          onDismiss={() => console.log(\"UPDATED\")}\n                        />\n                      );\n\n                      return (\n                        <div>\n                          {/* <Frame> */}\n                          {/* <Page> */}\n                          {/* <Layout> */}\n                          {showToast}\n                          {/* <Layout.Section>{showError}</Layout.Section> */}\n                          {/* <Layout.Section> */}\n\n                          <Query\n                            query={props.query}\n                            variables={props.id}\n                            // skip={!breed}\n                          >\n                            {({ loading, error, data_tk, refetch }) => {\n                              if (loading) return null;\n                              if (error) return `Error! ${error}`;\n\n                              return <div>\n                                \n                              </div>;\n                            }}\n                          </Query>\n\n             \n                          {/* </Layout.Section> */}\n                          {/* </Layout> */}\n                          {/* </Page> */}\n                          {/* </Frame> */}\n                        </div>\n                      );\n                    }}\n                  </Mutation>\n                </Stack.Item>\n              </Stack>\n              {/* Catch the error for no IDS */}\n\n              {/* <button onClick={() => refetch()}>Refetch!</button> */}\n              {/* </Card> */}\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n"]},"metadata":{},"sourceType":"module"}