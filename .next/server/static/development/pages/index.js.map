{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Loading.js","webpack:///./components/ResourceList.js","webpack:///./components/SnippetGen.js","webpack:///./components/ThreekitForm.js","webpack:///./components/TokenForm.js","webpack:///./pages/index.js","webpack:///external \"@shopify/app-bridge-react\"","webpack:///external \"@shopify/app-bridge/actions\"","webpack:///external \"@shopify/polaris\"","webpack:///external \"apollo-link-http\"","webpack:///external \"graphql-tag\"","webpack:///external \"node-fetch\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"store-js\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import React from \"react\";\nimport { SkeletonPage, SkeletonBodyText, SkeletonDisplayText } from \"@shopify/polaris\";\n\nexport const LoadingScreen = () =>{\n  return (\n    <SkeletonPage primaryAction>\n      <SkeletonBodyText />\n    </SkeletonPage>\n  );\n};\n\nexport const LoadingText = () =>{\n  return (\n    <SkeletonDisplayText size=\"medium\" />\n  );\n};\n","import gql from \"graphql-tag\";\r\nimport { Query, ApolloConsumer } from \"react-apollo\";\r\nimport { Card, ResourceList, Stack, Thumbnail, Frame } from \"@shopify/polaris\";\r\nimport store from \"store-js\";\r\nimport ThreekitForm from \"./ThreekitForm\";\r\nimport { Redirect } from \"@shopify/app-bridge/actions\";\r\nimport { Context } from \"@shopify/app-bridge-react\";\r\nimport { LoadingScreen } from \"../components/Loading\";\r\nimport fetch from 'node-fetch';\r\nimport { createHttpLink } from 'apollo-link-http';\r\n\r\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!) {\r\n    nodes(ids: $ids) {\r\n      ... on Product {\r\n        title\r\n        handle\r\n        descriptionHtml\r\n        id\r\n        images(first: 1) {\r\n          edges {\r\n            node {\r\n              originalSrc\r\n              altText\r\n            }\r\n          }\r\n        }\r\n        variants(first: 1) {\r\n          edges {\r\n            node {\r\n              price\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_PRODUCT_IDS = gql`\r\n  query {\r\n    shop {\r\n      metafield(namespace: \"threekit\", key: \"items\") {\r\n        id\r\n        value\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TK_ASSET_ID = gql`\r\n  query($id: ID!) {\r\n    product(id: $id) {\r\n      metafield(namespace: \"threekit\", key: \"assetid\") {\r\n        value\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_META_ID = gql`\r\n  query($id: ID!) {\r\n    product(id: $id) {\r\n      metafield(namespace: \"threekit\", key: \"assetid\") {\r\n        value\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass ResourceListWithProducts extends React.Component {\r\n  state = {\r\n    ids: [],\r\n    tkId: {},\r\n    field: \"\",\r\n    active: false,\r\n    checked: false,\r\n    tkMetaFieldId: \"\",\r\n  };\r\n\r\n  _queryMe = (data) => {\r\n    if (data.shop.metafield == null) {\r\n      return null;\r\n    } else {\r\n      const str = JSON.parse(data.shop.metafield.value);\r\n      let arr;\r\n      arr = str.ids.split(\",\");\r\n\r\n      this.setState({\r\n        ids: arr.map((id) => \"gid://shopify/Product/\" + id),\r\n      });\r\n    }\r\n  };\r\n\r\n  _setTkID = (data) => {\r\n    this.setState({\r\n      tkId: data,\r\n    });\r\n  };\r\n\r\n  _setTkMetafieldId = (data) => {\r\n    this.setState({\r\n      tkMetaFieldId: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  getTkAsset = () => {\r\n    return (\r\n      <Query\r\n        query={GET_TK_ASSET_ID}\r\n        onCompleted={(data) => this._setTkID(data)}\r\n      >\r\n        {() => {\r\n          return null;\r\n        }}\r\n      </Query>\r\n    );\r\n  };\r\n\r\n  handleTKChange = (e) => {\r\n    this.setState({\r\n      field: e,\r\n    });\r\n  };\r\n\r\n  handleCheck = () => {\r\n    !this.state.checked\r\n      ? this.setState({ checked: true })\r\n      : this.setState({ checked: false });\r\n  };\r\n\r\n  handleToggle = () =>\r\n    !this.state.active\r\n      ? this.setState({ active: true })\r\n      : this.setState({ active: false });\r\n\r\n  static contextType = Context;\r\n  render() {\r\n    const app = this.context;\r\n    const redirectToProduct = () => {\r\n      const redirect = Redirect.create(app);\r\n      redirect.dispatch(Redirect.Action.APP, \"/edit-products\");\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Frame>\r\n          <Query\r\n            query={GET_TK_PRODUCT_IDS}\r\n            onCompleted={(data) => this._queryMe(data)}\r\n          >\r\n            {() => {\r\n              return <div>{\"\"}</div>;\r\n            }}\r\n          </Query>{\" \"}\r\n          <Query\r\n            query={GET_META_ID}\r\n            onCompleted={(data) => this._setTkMetafieldId(data)}\r\n          >\r\n            {() => {\r\n              return <div>{\"\"}</div>;\r\n            }}\r\n          </Query>{\" \"}\r\n          <Query\r\n            query={GET_PRODUCTS_BY_ID}\r\n            variables={{ ids: store.get(\"ids\") }}\r\n          >\r\n            {({ data, loading, error }) => {\r\n              if (loading) return <LoadingScreen />;\r\n              if (error) return <div>{error.message}</div>;\r\n\r\n              return (\r\n                <Card>\r\n                  <ResourceList\r\n                    showHeader\r\n                    resourceName={{\r\n                      singular: \"Product\",\r\n                      plural: \"Products\",\r\n                    }}\r\n                    items={data.nodes}\r\n                    renderItem={(item) => {\r\n                      const media = (\r\n                        <Thumbnail\r\n                          source={\r\n                            item.images.edges[0]\r\n                              ? item.images.edges[0].node.originalSrc\r\n                              : \"\"\r\n                          }\r\n                          alt={\r\n                            item.images.edges[0]\r\n                              ? item.images.edges[0].node.altText\r\n                              : \"\"\r\n                          }\r\n                        />\r\n                      );\r\n                      const price = item.variants.edges[0].node.price;\r\n                      return (\r\n                        <ResourceList.Item\r\n                          id={item.id}\r\n                          media={media}\r\n                          accessibilityLabel={`View details for ${item.title}`}\r\n                        >\r\n                          <Stack>\r\n                            <Stack.Item fill>\r\n                              <ThreekitForm\r\n                                query={GET_TK_ASSET_ID}\r\n                                title={item.title}\r\n                                id={{ id: item.id }}\r\n                                field={this.state.field}\r\n                                handleTKChange={this.handleTKChange}\r\n                                handleCheckChange={this.handleCheck}\r\n                                checked={this.state.checked}\r\n                                tkMetafieldId={this.state.tkMetaFieldId}\r\n                              />\r\n                            </Stack.Item>\r\n                          </Stack>\r\n                        </ResourceList.Item>\r\n                      );\r\n                    }}\r\n                  />\r\n                </Card>\r\n              );\r\n            }}\r\n          </Query>\r\n        </Frame>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceListWithProducts;\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  TextContainer,\n  TextField,\n  Modal,\n} from \"@shopify/polaris\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nfunction SnippetGen(props) {\n  const GET_TK_TOKEN = gql`\n    query {\n      shop {\n        metafield(namespace: \"threekit\", key: \"token\") {\n          id\n          value\n        }\n      }\n    }\n  `;\n\n  const createSnippet = function (token) {\n    let newTitle = props.title.replace(/\\s/g, \"\");\n    <Query\n      query={GET_TK_TOKEN}\n      onCompleted={(data) =>\n        setValue(\n          createSnippet(\n            !data.shop.metafield ? \"no token\" : data.shop.metafield.value\n          )\n        )\n      }\n    >\n      {({ loading, error, data, refetch }) => {\n        if (loading) return null;\n        if (error) return `Error! ${error}`;\n\n        return (\n          <Modal\n            open={props.active}\n            onClose={props.handleChange}\n            title={props.title}\n            primaryAction={{\n              content: \"Close\",\n              onAction: props.handleChange,\n            }}\n          >\n            <Modal.Section>\n              <TextContainer>\n                <p>\n                  Copy and paste the HTML to embed a Threekit player with the\n                  selected product. Use it on blog posts, home pages, or\n                  anywhere HTML input is supported.\n                </p>\n              </TextContainer>\n            </Modal.Section>\n            <Modal.Section>\n              <TextContainer>\n                <TextField multiline value={value} />\n              </TextContainer>\n            </Modal.Section>\n          </Modal>\n        );\n      }}\n    </Query>;\n    return `<div id=\"tkplayer-${newTitle}\" style=\"height: 500px; width: 500px;\">\n        <script>\n                window.threekitPlayer({\n                authToken: \"${token}\",\n                el: document.getElementById(\"tkplayer-${newTitle}\"),\n                assetId: '${props.assetid}',\n                showConfigurator: false,\n                showAR: ${props.ar}\n              })\n              .then(async api => {\n                 window.player = api;\n                 window.configurator = await api.getConfigurator();\n          });\n        </script>`;\n  };\n  const [value, setValue] = useState(\"\");\n\n\n  return (\n    <div>\n      <Query\n        query={GET_TK_TOKEN}\n        onCompleted={(data) =>\n          setValue(\n            createSnippet(\n              !data.shop.metafield ? \"no token\" : data.shop.metafield.value\n            )\n          )\n        }\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return null;\n          if (error) return `Error! ${error}`;\n\n          return (\n            <Modal\n              open={props.active}\n              onClose={props.handleChange}\n              title={props.title}\n              primaryAction={{\n                content: \"Close\",\n                onAction: props.handleChange,\n              }}\n              \n            >\n              <Modal.Section>\n                <TextContainer>\n                  <p>\n                    Copy and paste the HTML to embed a Threekit player with the\n                    selected product. Use it on blog posts, home pages, or\n                    anywhere HTML input is supported.\n                  </p>\n                </TextContainer>\n              </Modal.Section>\n              <Modal.Section>\n                <TextContainer>\n                  <TextField multiline value={value} id=\"textBox\" />\n                </TextContainer>\n              </Modal.Section>\n            </Modal>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default SnippetGen;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport {\n  Banner,\n  Form,\n  FormLayout,\n  Layout,\n  TextField,\n  Stack,\n  TextStyle,\n  Checkbox,\n  Button,\n  Toast,\n} from \"@shopify/polaris\";\nimport { LoadingText } from \"../components/Loading\";\nimport SnippetGen from \"../components/SnippetGen\";\n\nfunction ThreekitForm(props) {\n  // Declare a new state variable, which we'll call \"count\"\n  const [value, setValue] = useState(\"\");\n  const [tkMetaId, setTkMetaId] = useState();\n  const [isSaved, setIsSaved] = useState(false);\n\n  const [isPdp, setIsPdp] = useState({});\n  const [isChecked, setIsChecked] = useState(false);\n\n  const [isAr, setIsAr] = useState({});\n  const [arChecked, setArChecked] = useState(false);\n\n  const [modalActive, setModalActive] = useState(false);\n  const handleModalChange = useCallback(() => setModalActive(!modalActive), [\n    modalActive,\n  ]);\n\n  const UPDATE_TK_ID = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const GET_META_ID = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"assetid\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_PLAYER_PDP = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"pdp\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const IS_AR_ENABLED = gql`\n    query($id: ID!) {\n      product(id: $id) {\n        metafield(namespace: \"threekit\", key: \"ARen\") {\n          value\n          id\n        }\n      }\n    }\n  `;\n\n  const UPDATE_TK_ATTR = gql`\n    mutation($input: ProductInput!) {\n      productUpdate(input: $input) {\n        product {\n          metafields(first: 100) {\n            edges {\n              node {\n                id\n                namespace\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  const setCheck = (val) => setIsChecked(val);\n  const setArCheck = (val) => setArChecked(val);\n\n  const updateMeta = (data, bool, namespace, key, obj, action) => {\n    let productVariableInput;\n    if (!data.product.metafield) {\n      bool\n        ? (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"false\",\n                valueType: \"STRING\",\n              },\n            ],\n          })\n        : (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"true\",\n                valueType: \"STRING\",\n              },\n            ],\n          });\n    } else {\n      bool\n        ? (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"false\",\n                valueType: \"STRING\",\n                id: obj.product.metafield.id,\n              },\n            ],\n          })\n        : (productVariableInput = {\n            id: props.id.id,\n            metafields: [\n              {\n                namespace: namespace,\n                key: key,\n                value: \"true\",\n                valueType: \"STRING\",\n                id: obj.product.metafield.id,\n              },\n            ],\n          });\n    }\n\n    action({\n      variables: {\n        input: productVariableInput,\n      },\n    });\n  };\n  return (\n    <div>\n      <Stack distribution=\"fill\">\n        <Form>\n          <FormLayout>\n            <Query query={props.query} variables={props.id}>\n              {({ loading, error, data, refetch }) => {\n                if (loading) return <LoadingText />;\n                if (error) return `Error! ${error}`;\n\n                return (\n                  <div>\n                    <Query\n                      query={GET_META_ID}\n                      variables={props.id}\n                      onCompleted={(data) => setTkMetaId(data)}\n                    >\n                      {({ loading, error, data, refetch }) => {\n                        if (loading) return null;\n                        if (error) return `Error! ${error}`;\n                        \n                        return null;\n                      }}\n                    </Query>\n\n                    <Stack.Item>\n                      <h3>\n                        <TextStyle variation=\"strong\">{props.title}</TextStyle>\n                      </h3>\n                    </Stack.Item>\n\n                    <Stack.Item>\n                      <Mutation\n                        mutation={UPDATE_TK_ID}\n                        onCompleted={() => setIsSaved(true)}\n                      >\n                        {(handleSubmit, { err, res }) => {\n                          const showError = err && (\n                            <Banner status=\"critical\">{err.message}</Banner>\n                          );\n\n                          return (\n                            <div>\n                              {!isSaved ? (\n                                <div></div>\n                              ) : (\n                                <Toast\n                                  content=\"Saved\"\n                                  onDismiss={() => setIsSaved(false)}\n                                ></Toast>\n                              )}\n\n                              <Layout.Section>{showError}</Layout.Section>\n\n                              <TextField\n                                value={value}\n                                onFocus={() =>\n                                  setValue(\n                                    !data.product.metafield\n                                      ? \"No Threekit ID\"\n                                      : data.product.metafield.value\n                                  )\n                                }\n                                onChange={handleChange}\n                                id={data.product.id}\n                                ariaControls={data.product.id}\n                                placeholder={\n                                  !data.product.metafield\n                                    ? \"No Threekit ID\"\n                                    : data.product.metafield.value\n                                }\n                                connectedRight={\n                                  <div>\n                                    <SnippetGen\n                                      handleChange={handleModalChange}\n                                      active={modalActive}\n                                      title={`${props.title}`}\n                                      assetid={\n                                        !data.product.metafield\n                                          ? \"No Threekit ID\"\n                                          : data.product.metafield.value\n                                      }\n                                      ar={\"true\"}\n                                      env={\"preview\"}\n                                    />\n                                    <Button\n                                      primary\n                                      onClick={() => {\n                                        let productVariableInput;\n                                        if (!data.product.metafield) {\n                                          productVariableInput = {\n                                            id: props.id.id,\n                                            metafields: [\n                                              {\n                                                namespace: \"threekit\",\n                                                key: \"assetid\",\n                                                value: value,\n                                                valueType: \"STRING\",\n                                              },\n                                            ],\n                                          };\n                                        } else {\n                                          productVariableInput = {\n                                            id: props.id.id,\n                                            metafields: [\n                                              {\n                                                namespace: \"threekit\",\n                                                key: \"assetid\",\n                                                value: value,\n                                                valueType: \"STRING\",\n                                                id:\n                                                  tkMetaId.product.metafield.id,\n                                              },\n                                            ],\n                                          };\n                                        }\n\n                                        handleSubmit({\n                                          variables: {\n                                            input: productVariableInput,\n                                          },\n                                        });\n                                      }}\n                                    >\n                                      Save\n                                    </Button>\n                                    <Button onClick={handleModalChange}>\n                                      Embed this product\n                                    </Button>\n                                  </div>\n                                }\n                              ></TextField>\n                            </div>\n                          );\n                        }}\n                      </Mutation>\n                    </Stack.Item>\n                  </div>\n                );\n              }}\n            </Query>\n\n            <Stack.Item>\n              <Query\n                query={IS_PLAYER_PDP}\n                variables={props.id}\n                onCompleted={(data) => setIsPdp(data)}\n              >\n                {({ loading, error, data, refetch }) => {\n                  if (loading) return <LoadingText />;\n                  if (error) return `Error! ${error}`;\n                  return (\n                    <Mutation\n                      mutation={UPDATE_TK_ATTR}\n                      onCompleted={() => setIsSaved(true)}\n                    >\n                      {(handleSubmit, { err, res }) => {\n                        const showError = err && (\n                          <Banner status=\"critical\">{err.message}</Banner>\n                        );\n                        if (\n                          !data.product.metafield ||\n                          data.product.metafield.value == \"false\"\n                        ) {\n                          useEffect(() => {\n                            setIsChecked(false);\n                          }, [setIsChecked]);\n                        } else {\n                          useEffect(() => {\n                            setIsChecked(true);\n                          }, [setIsChecked]);\n                        }\n\n                        return (\n                          <div>\n                            <p>\n                              PDP Controls\n                            </p>\n                            <Checkbox\n                              label=\"Display on PDP\"\n                              checked={isChecked}\n                              onChange={() =>\n                                updateMeta(\n                                  data,\n                                  isChecked,\n                                  \"threekit\",\n                                  \"pdp\",\n                                  isPdp,\n                                  handleSubmit\n                                )\n                              }\n                              onFocus={() =>\n                                isChecked ? setCheck(false) : setCheck(true)\n                              }\n                            />\n                          </div>\n                        );\n                      }}\n                    </Mutation>\n                  );\n                }}\n              </Query>\n            </Stack.Item>\n            <Stack.Item>\n              <Query\n                query={IS_AR_ENABLED}\n                variables={props.id}\n                onCompleted={(data) => setIsAr(data)}\n              >\n                {({ loading, error, data, refetch }) => {\n                  if (loading) return <LoadingText />;\n                  if (error) return `Error! ${error}`;\n                  return (\n                    <Mutation\n                      mutation={UPDATE_TK_ATTR}\n                      onCompleted={() => setIsSaved(true)}\n                    >\n                      {(handleArSubmit, { err, res }) => {\n                        const showError = err && (\n                          <Banner status=\"critical\">{err.message}</Banner>\n                        );\n                        if (\n                          !data.product.metafield ||\n                          data.product.metafield.value == \"false\"\n                        ) {\n                          useEffect(() => {\n                            setArChecked(false);\n                          }, [setArChecked]);\n                        } else {\n                          useEffect(() => {\n                            setArChecked(true);\n                          }, [setArChecked]);\n                        }\n\n                        return (\n                          <div>\n                            <Checkbox\n                              label=\"AR Enabled\"\n                              checked={arChecked}\n                              onChange={() =>\n                                updateMeta(\n                                  data,\n                                  arChecked,\n                                  \"threekit\",\n                                  \"ARen\",\n                                  isAr,\n                                  handleArSubmit\n                                )\n                              }\n                              onFocus={() =>\n                                arChecked ? setArCheck(false) : setArCheck(true)\n                              }\n                            />\n                          </div>\n                        );\n                      }}\n                    </Mutation>\n                  );\n                }}\n              </Query>\n            </Stack.Item>\n          </FormLayout>\n        </Form>\n      </Stack>\n    </div>\n  );\n}\n\nexport default ThreekitForm;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { TextField, Button, Toast, Frame } from \"@shopify/polaris\";\nimport { LoadingText } from \"../components/Loading\";\nimport fetch from 'node-fetch';\n\n\nfunction TokenForm(props) {\n  const [tkToken, setTkToken] = useState(\"No Threekit ID\");\n  const [isSaved, setIsSaved] = useState(false);\n\n  const makeShopMetafield = val => {\n    var fetchUrl = \"/api/makeMeta/\" + val;\n    var method = \"GET\";\n\n    fetch(fetchUrl, { method: method })\n      .then(response => response.json())\n      .then(json => {\n        setTkToken(json.data.metafield.value.replace(`'`, \"\"));\n        setIsSaved(true);\n      });\n  };\n\n  const updateShopMetafield = (id, val) => {\n    var fetchUrl = `/api/insertMeta/${id}/${val}`;\n    var method = \"GET\";\n    fetch(fetchUrl, { method: method })\n      .then(response => response.json())\n      .then(json => {\n        setTkToken(json.data.metafield.value.replace(`'`, \"\"));\n        setIsSaved(true);\n      });\n  };\n\n\n  const GET_TK_TOKEN = gql`\n    query {\n      shop {\n        metafield(namespace: \"threekit\", key: \"token\") {\n          id\n          value\n        }\n      }\n    }\n  `;\n\n  const handleChange = useCallback(newValue => setTkToken(newValue), []);\n  return (\n    <div>\n      {!isSaved ? (\n        <div></div>\n      ) : (\n        <Frame>\n          <Toast content=\"Saved\" onDismiss={() => setIsSaved(false)}></Toast>\n        </Frame>\n      )}\n      <Query\n        query={GET_TK_TOKEN}\n        onCompleted={data => setTkToken(data)}\n      >\n        {({ loading, error, data, refetch }) => {\n          if (loading) return <LoadingText/>;\n          if (error) return `Error! ${error}`;\n\n          return (\n            <TextField\n              label={\"Threekit Token\"}\n              value={tkToken}\n              onChange={handleChange}\n              placeholder={\n                !data.shop.metafield\n                  ? \"No Threekit Token\"\n                  : data.shop.metafield.value\n              }\n              connectedRight={\n                <div>\n                  <Button\n                    primary\n                    onClick={() =>\n                      !data.shop.metafield\n                        ? makeShopMetafield(tkToken)\n                        : updateShopMetafield(\n                            data.shop.metafield.id.split(\"Metafield/\")[1],\n                            tkToken\n                          )\n                    }\n                  >\n                    Save\n                  </Button>\n                </div>\n              }\n            ></TextField>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default TokenForm;\n","import { Layout, Page, TextStyle, EmptyState, Button } from \"@shopify/polaris\";\r\nimport { ResourcePicker, TitleBar } from \"@shopify/app-bridge-react\";\r\nimport store from \"store-js\";\r\nimport ResourceListWithProducts from \"../components/ResourceList\";\r\nimport TokenForm from '../components/TokenForm';\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\n\r\nimport fetch from 'node-fetch';\r\n\r\n\r\n\r\n// Get the shop's threekit metafield\r\nconst GET_TK_METAFIELD = gql`\r\nquery {\r\n  shop{\r\n    metafield(namespace: \"threekit\", key: \"token\") {\r\n      id,\r\n      value\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nclass Index extends React.Component {\r\n  state = {\r\n    open: false,\r\n    hasSrc: false,\r\n    shop: \"\",\r\n    tkMetaId: {},\r\n    metaID: '',\r\n  };\r\n\r\n  _queryMe = data => {\r\n    if (data.shop.metafield == null){\r\n      return null;\r\n    } else {\r\n      this.setState({\r\n        tkMetaId: data,\r\n        metaID: data.shop.metafield.id.split('Metafield/')[1]\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n\r\n  _checkIfTK = () => {\r\n    if(this.state.tkMetaId.shop.metafield == null){\r\n      console.log('no TK id')\r\n    } else {\r\n      console.log(\"Yes this is TK\")\r\n    }\r\n  }\r\n\r\n  _formatProductID = arr => {\r\n    arr.map(x => x.split('Product/')[1]);\r\n  }\r\n\r\n  // For testing\r\n  getShopMetafield = () => {\r\n    var fetchUrl = \"/api/shopMeta\";\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        return json.data\r\n      });\r\n  };\r\n\r\n\r\n\r\n  updateShopMetafield = (id, val) => {\r\n    var fetchUrl = `/api/insertMeta/${id}/${val}`;\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        return json.data\r\n      });\r\n  };\r\n\r\n  makeScript = () => {\r\n    var fetchUrl = `/make/script_tags`;\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        return json.data\r\n      });\r\n  }\r\n\r\n  makeShopMetafield = (val) => {\r\n    var fetchUrl;\r\n    if (val == 'undefined'){\r\n      fetchUrl = \"/api/makeMeta/\";\r\n    } else{\r\n      fetchUrl = \"/api/makeMeta/\" + val;\r\n    }\r\n    var method = \"GET\";\r\n    fetch(fetchUrl, { method: method })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n\r\n      });\r\n  };\r\n  \r\n\r\n  componentDidMount() {\r\n    // console.log(this.state)\r\n    store.remove('ids')\r\n    store.each(function(value, key) {\r\n      console.log(key, '==', value)\r\n    })\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    store.remove('ids')\r\n  }\r\n\r\n  render() {\r\n    const emptyState = !store.get(\"ids\");\r\n\r\n    return (\r\n      <Page>\r\n        <TitleBar\r\n          primaryAction={{\r\n            content: \"Select products\",\r\n            onAction: () => this.setState({ open: true })\r\n          }}\r\n        />\r\n        <ResourcePicker\r\n          resourceType=\"Product\"\r\n          showVariants={false}\r\n          open={this.state.open}\r\n          onSelection={resources => this.handleSelection(resources)}\r\n          onCancel={() => this.setState({ open: false })}\r\n        />\r\n        <div >\r\n          \r\n          <TokenForm />\r\n\r\n  \r\n\r\n        </div>\r\n        {emptyState ? (\r\n          <Layout>\r\n            <EmptyState\r\n              heading=\"Associate a Shopify product with a Threekit item.\"\r\n              action={{\r\n                content: \"Select products\",\r\n                onAction: () => this.setState({ open: true })\r\n              }}\r\n              image={\r\n                \"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\r\n              }\r\n            >\r\n              <p>Select products to associate it with a Threekit item.</p>\r\n            </EmptyState>\r\n          </Layout>\r\n        ) : (\r\n          <div>\r\n            <Query query={GET_TK_METAFIELD} onCompleted={data => this._queryMe(data)}>\r\n              {() => {\r\n                return (\r\n                  <div>\r\n                    {\"\"}\r\n                  </div>\r\n                );\r\n              }}\r\n            </Query>\r\n          <ResourceListWithProducts />\r\n\r\n          </div>\r\n        )}\r\n      </Page>\r\n    );\r\n  }\r\n  handleSelection = resources => {\r\n    const idsFromResources = resources.selection.map(product => product.id);\r\n    this.setState({ open: false });\r\n    store.set(\"ids\", idsFromResources);\r\n  };\r\n}\r\nexport default Index;\r\n","module.exports = require(\"@shopify/app-bridge-react\");","module.exports = require(\"@shopify/app-bridge/actions\");","module.exports = require(\"@shopify/polaris\");","module.exports = require(\"apollo-link-http\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"node-fetch\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"store-js\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AA6BA;;;;;;;;;AAAA;AAWA;;;;;;;;;AAAA;AAWA;;;;;;;;;AAAA;AACA;AAUA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAvBA;AAyBA;AACA;AADA;AAGA;AACA;AA7BA;AA+BA;AACA;AADA;AAGA;AACA;AAnCA;AAqCA;AAEA;AACA;AAFA;AAKA;AACA;AAGA;AACA;AAhDA;AAkDA;AACA;AADA;AAGA;AACA;AAtDA;AAwDA;AACA;AAAA;AACA;AAAA;AACA;AACA;AA5DA;AA+DA;AAAA;AACA;AAAA;AAhEA;AACA;AAkEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAFA;AAKA;AACA;AAGA;AACA;AAFA;AAKA;AACA;AAGA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AAKA;AANA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AARA;AAcA;AA7CA;AAiDA;AAKA;AACA;AA9JA;AACA;AADA;AACA;AA+JA;;;;;;;;;;;;;;;;;;;;;;AC3OA;AACA;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;AAAA;AACA;AAUA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAoBA;AAAA;AAAA;AAKA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;;;;;AAPA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAqBA;AAAA;AAAA;AAAA;AAKA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAIA;;;;;;;;;;;;;;;;;AAAA;AAmBA;;;;;;;;;AAAA;AAWA;;;;;;;;;AAAA;AAWA;;;;;;;;;AAAA;AAWA;;;;;;;;;;;;;;;;;AAAA;AAmBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AAYA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AAWA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AAYA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAKA;AAAA;AAMA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAMA;AACA;AAFA;AASA;AACA;AAOA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAVA;AAaA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AAaA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AArCA;AAyCA;AAAA;AAxEA;AAgFA;AAKA;AAKA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAUA;AAbA;AAmBA;AAGA;AAKA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAUA;AAbA;AAmBA;AAGA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACvbA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAAA;AAWA;AACA;AAMA;AAAA;AAAA;AAIA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AAGA;AACA;AAFA;AAXA;AA4BA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;;;;;;;;;AAAA;AACA;AAUA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AALA;AACA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AApBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AAjCA;AAoCA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AA5CA;AAgDA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAxDA;AA0DA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAlEA;AAoEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AAjFA;AA0JA;AACA;AAAA;AAAA;AACA;AACA;AA7JA;AACA;AAkFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAFA;AADA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AANA;AAeA;AAAA;AAAA;AAEA;AAKA;AAQA;AACA;AAzJA;AACA;AA8JA;;;;;;;;;;;;;;;;;;;;;;;ACvLA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}